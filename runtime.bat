REM = 0; /*
@echo off
cls
title %~f0
cd %~dp0
if "%PROCESSOR_ARCHITECTURE%" EQU "x86" (
  call cscript.exe "%~f0" //Nologo //E:JScript "%~f0" %*
)
if "%PROCESSOR_ARCHITECTURE%" NEQ "x86" (
  call C:\Windows\SysWOW64\CScript.exe "%~f0" //Nologo //E:JScript "%~f0" %*
)
goto LBL_END
*/
var document = new ActiveXObject('htmlfile');
document.write(
  '<!DOCTYPE html><html><head><meta http-equiv=X-UA-Compatible content="IE=edge"><title></title></head><body></body></html>'
);
var window = document.parentWindow;
window.WScript = WScript;
window.ActiveXObject = ActiveXObject;
window.GetObject = GetObject;

var src = '(function () {
  'use strict';

  // NodeJS Runtime

  var Process = function Process() {
    this._version = null;
    this._argv = null;
    this._env = null;
  };

  var prototypeAccessors = { version: { configurable: true },argv: { configurable: true },env: { configurable: true } };

  Process.prototype.exit = function exit (status) {
      if ( status === void 0 ) status = 0;

    WScript.Quit(status);
  };

  Process.prototype.sleep = function sleep (millis) {
    WScript.Sleep(millis);
  };

  prototypeAccessors.version.get = function () {
    if (this._version) { return this._version; }

    this._version =
      ScriptEngine() +
      ' ' +
      ScriptEngineMajorVersion() +
      '.' +
      ScriptEngineMinorVersion() +
      '.' +
      ScriptEngineBuildVersion();

    return this._version;
  };

  prototypeAccessors.argv.get = function () {
    if (this._argv) { return this._argv; }
    this._argv = [WScript.FullName];
    var en = new Enumerator(WScript.Arguments);
    for (; !en.atEnd(); en.moveNext()) { this._argv.push(en.item()); }
    return this._argv;
  };

  prototypeAccessors.env.get = function () {
    if (this._env) { return this._env; }
    var it, i;
    var en = new Enumerator(__WShell.Environment('PROCESS'));
    this._env = {};
    for (; !en.atEnd(); en.moveNext()) {
      it = en.item();
      i = it.indexOf('=');
      if (i > 0) {
        this._env[it.slice(0, i)] = it.slice(i + 1);
      }
    }
    return this._env;
  };

  Object.defineProperties( Process.prototype, prototypeAccessors );

  var process = new Process();

  var _doc;

  function getXmlDoc() {
    return _doc || (_doc = new ActiveXObject('MSXML2.DOMDocument.6.0'));
  }

  function text2value(type, text) {
    var el = getXmlDoc().createElement('tmp');
    el.dataType = type;
    el.text = text;
    return el.nodeTypedValue;
  }

  function value2text(type, value) {
    var el = getXmlDoc().createElement('tmp');
    el.dataType = type;
    el.nodeTypedValue = value;
    return el.text;
  }

  function bin2hex(bytes) {
    return value2text('bin.hex', bytes);
  }

  function hex2bin(hex) {
    return text2value('bin.hex', hex);
  }

  function bin2base64(bytes) {
    return value2text('bin.base64', bytes);
  }

  function base642bin(base64) {
    return text2value('bin.base64', base64);
  }

  function bin2str(bytes, encoding) {
    var st = new ActiveXObject('ADODB.Stream'),
      str;
    encoding || (encoding = 'UTF-8');
    try {
      st.Open();
      st.Type = 1;
      st.Write(bytes);
      st.Position = 0;
      st.Type = 2;
      st.Charset = encoding;
      str = st.ReadText();
    } finally {
      st.Close();
    }
    return str;
  }

  function str2bin(str, encoding) {
    var st = new ActiveXObject('ADODB.Stream'),
      bin;
    encoding || (encoding = 'UTF-8');
    try {
      st.Open();
      st.Type = 2;
      st.Charset = encoding;
      st.WriteText(str);
      st.Position = 0;
      st.Type = 1;
      encoding = encoding.replace('-', '').toLowerCase();
      if (encoding == 'utf8' || encoding == 'unicode') { st.Position = 3; }
      else if (encoding == 'uft16') { st.Position = 2; }
      bin = st.Read();
    } finally {
      st.Close();
    }
    return bin;
  }

  function encode(str, encoding) {
    switch (encoding) {
      case 'hex':
        return hex2bin(str);
      case 'base64':
        return base642bin(str);
      default:
        return str2bin(str, encoding);
    }
  }

  function decode(bytes, encoding) {
    switch (encoding) {
      case 'hex':
        return bin2hex(bytes);
      case 'base64':
        return bin2base64(bytes);
      case 'binary':
        return bytes;
      default:
        return bin2str(bytes, encoding);
    }
  }

  var Buffer = function Buffer(obj, encoding) {
    this.buffer = null;
    if (obj == null || obj == '' || obj.length == 0) {
      this.buffer = new ActiveXObject('Scripting.Dictionary').Items();
    } else if (Buffer.isBuffer(obj)) {
      this.buffer = obj.buffer;
    } else if (typeof obj == 'string') {
      this.buffer = encode(obj, encoding);
    } else if (obj != null && obj.constructor && obj.constructor === VBArray) {
      this.buffer = obj;
    } else {
      throw new TypeError('Failed to create buffer.');
    }
  };

  var prototypeAccessors$1 = { length: { configurable: true } };

  Buffer.isBuffer = function isBuffer (obj) {
    return obj && obj instanceof Buffer;
  };

  Buffer.from = function from (obj, encoding) {
    return new Buffer(obj, encoding);
  };

  Buffer.prototype.toString = function toString (encoding) {
    return this.buffer.ubound() == -1 ? '' : decode(this.buffer, encoding);
  };

  prototypeAccessors$1.length.get = function () {
    return this.buffer.ubound() + 1;
  };

  Object.defineProperties( Buffer.prototype, prototypeAccessors$1 );

  var TO_STR = {}.toString;
  var HAS_OWN = {}.hasOwnProperty;

  // #region Util

  function chr(n) {
    return String.fromCharCode(n);
  }

  function ord(c) {
    return c.charCodeAt(0);
  }

  function hex(x) {
    return Number(x).toString(16);
  }

  function bin(x) {
    return Number(x).toString(2);
  }

  function oct(x) {
    return Number(x).toString(8);
  }

  function int(x, base) {
    return parseInt(x, base);
  }

  var FUNC_NAME_REG = /function +(\w+)/;

  function getFuncName(fn) {
    if (fn.name) { return fn.name; }
    var m = fn.toString().match(FUNC_NAME_REG);
    return m ? m[1] : '';
  }

  function getTag(value) {
    return TO_STR.call(value);
  }

  var TYPE_REG = /\[object ([^\]]+)\]/;

  function typeOf(obj) {
    var tp = obj === null ? 'null' : typeof obj;
    if (tp == 'object')
      { tp = TO_STR.call(obj)
        .match(TYPE_REG)[1]
        .toLowerCase(); }
    if (tp == 'object' && obj.constructor && typeof obj.constructor == 'function')
      { tp = getFuncName(obj.constructor).toLowerCase() || tp; }
    return tp;
  }

  var type = typeOf;

  function has$1(obj, key) {
    return obj != null && HAS_OWN.call(obj, key);
  }

  function isArray(obj) {
    return Array.isArray(obj);
  }

  function isObject(obj) {
    var type = typeof obj;
    return obj != null && (type == 'object' || type == 'function');
  }

  function isFunction(obj) {
    return typeof obj == 'function';
  }

  function isString(obj) {
    return typeof obj == 'string';
  }

  function isNumber(obj) {
    return typeof obj == 'number';
  }

  function isBoolean(obj) {
    return obj === true || obj === false;
  }

  function isDate(obj) {
    return TO_STR.call(obj) == '[object Date]';
  }

  function isRegExp(obj) {
    return TO_STR.call(obj) == '[object RegExp]';
  }

  function isError(obj) {
    return TO_STR.call(obj) == '[object Error]';
  }

  function isMap(obj) {
    return obj instanceof Map;
  }

  function isSet(obj) {
    return obj instanceof Set;
  }

  function isWeakMap(obj) {
    return obj instanceof WeakMap;
  }

  function isInteger(value) {
    return typeof value == 'number' && value % 1 == 0;
  }

  function isArguments(obj) {
    return TO_STR.call(obj) == '[object Arguments]';
  }

  function isObjectLike(value) {
    return typeof value == 'object' && value != null;
  }

  function isLength(value) {
    return isInteger(value) && value > -1 && value < 9007199254740992;
  }

  function isArrayLike(obj) {
    return obj != null && typeof obj != 'function' && isLength(obj.length);
  }

  function isEmpty(obj) {
    if (obj == null) { return true; }
    if (isArrayLike(obj)) { return !obj.length; }
    if (isMap(obj) || isSet(obj)) { return !obj.size; }
    for (var key in obj) {
      if (HAS_OWN.call(obj, key)) { return false; }
    }
    return true;
  }

  function isBuffer(obj) {
    return Buffer.isBuffer(obj);
  }

  function apply(fn, thisArg, args) {
    var argCnt = (args && args.length) || 0,
      hasThis = thisArg == null;
    switch (argCnt) {
      case 0:
        return hasThis ? fn() : fn.call(thisArg);
      case 1:
        return hasThis ? fn(args[0]) : fn.call(thisArg, args[0]);
      case 2:
        return hasThis
          ? fn(args[0], args[1])
          : fn.call(thisArg, args[0], args[1]);
      case 3:
        return hasThis
          ? fn(args[0], args[1], args[2])
          : fn.call(thisArg, args[0], args[1], args[2]);
      default:
        return fn.apply(thisArg, args);
    }
  }

  function range(start, end, step) {
    var i = -1,
      len,
      result = [];
    if (start == null) { return result; }
    if (end == null) { (end = start), (start = 0); }
    if (step == null) { step = 1; }
    step = Math.abs(step);
    if (start > end) { step = -step; }
    len = Math.max(Math.ceil((end - start) / step), 0);
    result = new Array(len);
    while (++i < len) { (result[i] = start), (start += step); }
    return result;
  }

  function toPath(pth) {
    if (isString(pth)) { pth = pth.split(/[.[\]]/).filter(identity); }
    else if (isNumber(pth)) { pth = [pth]; }
    return isArray(pth) ? pth : [];
  }

  function identity(value) {
    return value;
  }

  function iteratee(value) {
    switch (typeOf(value)) {
      case 'function':
        return value;
      case 'string':
      case 'number':
        return property(value);
      case 'array':
        return properties(value);
      case 'object':
        return matches(value);
      default:
        return identity;
    }
  }

  // #endregion

  // #region Collection

  function each(obj, fn) {
    var en, i, key, len;
    if (isArrayLike(obj)) {
      for (i = 0, len = obj.length; i < len; i++) {
        if (fn(obj[i], i, obj) === false) { break; }
      }
    } else if (obj && !obj.constructor && 'Item' in obj) {
      en = new Enumerator(obj);
      for (i = 0; !en.atEnd(); en.moveNext(), i++) {
        if (fn(en.item(), i, obj) === false) { break; }
      }
    } else if (isLength(obj)) {
      for (i = 0; i < obj; i++) {
        if (fn(i, i, obj) === false) { break; }
      }
    } else if (isObject(obj)) {
      for (key in obj) {
        if (has$1(obj, key)) {
          if (fn(obj[key], key, obj) === false) { break; }
        }
      }
    }
    return obj;
  }

  var forEach = each;

  function map(obj, fn) {
    var result = [],
      ite = iteratee(fn);
    each(obj, function (v, k, o) {
      result.push(ite(v, k, o));
    });
    return result;
  }

  var select = map;

  function reduce(obj, fn, memo) {
    each(obj, function(v, k, o) {
      memo = fn(memo, v, k, o);
    });
    return memo;
  }

  function filter(obj, fn) {
    var result = [],
      ite = iteratee(fn);
    each(obj, function (v, k, o) {
      if (ite(v, k, o)) { result.push(v); }
    });
    return result;
  }

  var where = filter;

  function toArray(obj) {
    var i, len, arr;
    if (isArray(obj)) { return obj; }
    if (isArrayLike(obj)) {
      i = -1;
      len = obj.length;
      arr = Array(len);
      while (++i < len) { arr[i] = obj[i]; }
      return arr;
    }
    if (isObject(obj)) { return map(obj); }
    return [];
  }

  function baseFind(arr, fn, _this) {
    var i = -1,
      len = arr.length,
      it;
    if (_this) {
      while (++i < len) {
        it = arr[i];
        if (fn.call(_this, it, i, arr)) {
          return [it, i];
        }
      }
    } else {
      while (++i < len) {
        it = arr[i];
        if (fn(it, i, arr)) {
          return [it, i];
        }
      }
    }
    return [null, -1];
  }

  function find(arr, fn) {
    return baseFind(arr, fn)[0];
  }

  function findIndex(arr, fn) {
    return baseFind(arr, fn)[1];
  }

  function fill(arr, val, start, end) {
    var len = arr.length;
    if (start == null) { start = 0; }
    if (end == null) { end = len; }
    if (end < 0) { end = Math.max(end + len, len); }
    while (start < end) {
      arr[start] = val;
      start++;
    }
    return arr;
  }

  function groupBy(obj, fn) {
    var result = {},
      ite = iteratee(fn);
    each(obj, function(v, k, o) {
      var key = ite(v, k, o);
      has$1(result, key) ? result[key].push(v) : (result[key] = [v]);
    });
    return result;
  }

  function countBy(obj, fn) {
    var ite = iteratee(fn);
    return reduce(
      obj,
      function (result, value, key) {
        key = ite(value);
        has$1(result, key) ? result[key]++ : (result[key] = 1);
        return result;
      },
      {}
    );
  }

  function size(obj) {
    return isArrayLike(obj) ? obj.length : Object.keys(obj).length;
  }

  var len = size;

  // #endregion

  // #region Array

  function uniqBy(arr, fn) {
    var ite = iteratee(fn),
      result = [],
      memo = new Set(),
      i = -1,
      len = arr.length,
      item,
      computed;
    while (++i < len) {
      item = arr[i];
      computed = ite(item);
      if (!memo.has(computed)) {
        result.push(item);
        memo.add(computed);
      }
    }
    memo.clear();
    return result;
  }

  function uniq(arr) {
    return uniqBy(arr, identity);
  }

  var distinct = uniq;

  var distinctBy = uniqBy;

  function chunk(arr, n) {
    if (n == null || n < 1) { return []; }
    var result = [],
      tmp = Array(n),
      i = -1,
      len = arr.length,
      off = 0;
    while (++i < len) {
      tmp[off++] = arr[i];
      if (off == 1) {
        result.push(tmp);
      } else if (off == n) {
        off = 0;
        tmp = Array(n);
      }
    }
    return result;
  }

  function concat() {
    var arguments$1 = arguments;

    var i = -1,
      len = arguments.length,
      result = [],
      arr,
      ii,
      len2;
    while (++i < len) {
      arr = arguments$1[i];
      ii = -1;
      len2 = arr && arr.length;
      if (len2 == null) {
        result.push(arr);
      } else {
        while (++ii < len2) { result.push(arr[ii]); }
      }
    }
    return result;
  }

  function slice(arr, start, end) {
    var i = -1,
      len = (arr && arr.length) || 0,
      result;
    if (!len) { return []; }
    if (start == null) { start = 0; }
    if (end == null) { end = len; }
    if (start < 0) { start = -start > len ? 0 : len + start; }
    if (end < 0) { end += len; }
    else if (end > len) { end = len; }
    len = start > end ? 0 : end - start;
    result = new Array(len);
    while (++i < len) { result[i] = arr[i + start]; }
    return result;
  }

  // drop([1, 2, 3, 4, 5], 2) => [3, 4, 5]
  function drop(arr, n) {
    return slice(arr, n || 1);
  }

  // tail([1, 2, 3, 4]) => [2, 3, 4]
  function tail(arr) {
    return drop(arr, 1);
  }

  // initail([1, 2, 3, 4]) => [1, 2, 3]
  function initial(arr) {
    return slice(arr, 0, Math.max(0, arr.length - 1));
  }

  // take([1, 2, 3, 4, 5], 2) => [1, 2]
  function take(arr, n) {
    return slice(arr, 0, n);
  }

  function takeRight(arr, n) {
    return slice(arr, -n);
  }

  function contains(obj, val, pos) {
    return obj.indexOf(val, pos || 0) != -1;
  }

  var include = contains;

  var includes = contains;

  function first(arr) {
    return arr && arr[0];
  }

  var head = first;

  function last(arr) {
    return (arr && arr.length > 0 && arr[arr.length - 1]) || void 0;
  }

  function nth(arr, n) {
    return arr && (n < 0 ? arr[arr.length + n] : arr[n]);
  }

  function pullAll(arr, values) {
    if (!isArray(values)) { return arr; }
    var i = arr.length;
    while (i--) {
      if (values.includes(arr[i])) { arr.splice(i, 1); }
    }
    return arr;
  }

  function pull(arr) {
    return pullAll(arr, tail(arguments));
  }

  function remove(arr, fn) {
    var i = arr.length,
      ite = iteratee(fn);
    while (i--) {
      if (ite(arr[i], i, arr)) { arr.splice(i, 1); }
    }
    return arr;
  }

  function difference(arr, values) {
    return filter(arr, function (it) { return !includes(values, it); });
  }

  function unzip(arr) {
    if (arr == null || !arr.length) {
      return [];
    }
    var len = 0;
    arr = filter(arr, function (it) {
      if (has$1(it, 'length')) {
        len = Math.max(it.length, len);
        return true;
      }
    });
    var i = -1,
      result = Array(len);
    while (++i < len) {
      result[i] = map(arr, i);
    }
    return result;
  }

  function zip() {
    return unzip(arguments);
  }

  function flatten(arr) {
    return reduce(
      arr,
      function (rst, it) {
        if (isArray(it)) { rst = rst.concat(it); }
        else { rst.push(it); }
        return rst;
      },
      []
    );
  }

  // #endregion

  // #region Object

  function keys(obj) {
    return obj ? Object.keys(obj) : [];
  }

  function values(obj) {
    return obj ? keys(obj).map(propertyOf(obj)) : [];
  }

  function keysIn(obj) {
    var arr = [];
    if (obj) {
      for (var k in obj) {
        arr.push(k);
      }
    }
    return arr;
  }

  function valuesIn(obj) {
    return obj ? keysIn(obj).map(propertyOf(obj)) : [];
  }

  // zipObject(['a', 'b', 'c'], [1, 2, 3])
  // => { a: 1, b: 2, c: 3}
  function zipObject(props, values) {
    var i = -1,
      len = props.length,
      vLen = values.length,
      result = {};
    while (++i < len) {
      result[props[i]] = i < vLen ? values[i] : void 0;
    }
    return result;
  }

  // object([ ['a', 1], ['b', 2], ['c', 3] ])
  // => { a: 1, b: 2, c: 3}
  function fromPairs(pairs) {
    var result = {},
      i = -1,
      len = pairs.length;
    while (++i < len) { result[pairs[i][0]] = pairs[i][1]; }
    return result;
  }

  function object(arr1, arr2) {
    return arr2 ? zipObject(arr1, arr2) : fromPairs(arr1);
  }

  function get(obj, pth, defVal) {
    var i = -1,
      _pth = toPath(pth),
      len = _pth.length;
    while (++i < len) {
      if (obj == null) { return defVal; }
      obj = obj[_pth[i]];
    }
    return obj;
  }

  function at(obj, pths) {
    return pths.map(function (pth) { return get(obj, pth); });
  }

  function propertyOf(obj) {
    return function (pth) { return get(obj, pth); };
  }

  function property(pth) {
    return function (obj) { return get(obj, pth); };
  }

  function properties(pths) {
    return function (obj) { return at(obj, pths); };
  }

  function set(obj, pth, value) {
    var _pth = toPath(pth),
      key = last(_pth),
      _obj = get(obj, initial(_pth));
    if (_obj != null) {
      _obj[key] = value;
    }
    return obj;
  }

  function unset(obj, pth) {
    var _pth = toPath(pth),
      key = last(_pth),
      _obj = get(obj, initial(_pth));
    if (_obj != null && has$1(_obj, key)) {
      delete _obj[key];
    }
    return obj;
  }

  function update(obj, pth, fn) {
    var _pth = toPath(pth),
      key = last(_pth),
      _obj = get(obj, initial(_pth));
    if (_obj != null) {
      _obj[key] = fn(_obj[key]);
    }
    return obj;
  }

  function pick(obj, pths) {
    var _pths = pths.map(function (it) { return toPath(it); });
    return _pths.reduce(function (result, pth) {
      var value = get(obj, pth);
      if (value) { result[last(pth)] = value; }
      return result;
    }, {});
  }

  // isMatch({a: 1, b: 2}, { b: 2 }) => true
  // isMatch({a: 1, b: 2}, { b: 1 }) => false
  function isMatch(obj, attrs) {
    if (obj == null || attrs == null) { return false; }
    for (var key in attrs) {
      if (!has$1(attrs, key)) { continue; }
      if (!has$1(obj, key) || attrs[key] !== obj[key]) { return false; }
    }
    return true;
  }

  // matches({b: 2})({ a: 1, b: 2}) => true
  function matches(attrs) {
    return function (obj) { return isMatch(obj, attrs); };
  }

  var matcher = matches;

  function assign(obj) {
    var key,
      src,
      i = 0,
      args = arguments,
      len = args.length;
    obj || (obj = {});
    while (++i < len) {
      src = args[i];
      for (key in src) {
        if (has$1(src, key)) {
          obj[key] = src[key];
        }
      }
    }
    return obj;
  }

  function assignIn(obj) {
    var key,
      src,
      i = 0,
      args = arguments,
      len = args.length;
    obj || (obj = {});
    while (++i < len) {
      src = args[i];
      for (key in src) {
        if (has$1(src, key)) {
          obj[key] = src[key];
        }
      }
    }
    return obj;
  }

  var extend = assignIn;

  function defaults(obj) {
    var key,
      src,
      i = 0,
      args = arguments,
      len = args.length;
    obj || (obj = {});
    while (++i < len) {
      src = args[i];
      for (key in src) {
        if (!has$1(obj, key)) {
          obj[key] = src[key];
        }
      }
    }
    return obj;
  }

  function entries(obj) {
    return obj ? map(obj, function (v, k) { return [k, v]; }) : [];
  }

  var toPairs = entries;

  // #endregion

  // #region Function

  function memoize(fn, resolver) {
    var memoized = function() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var cache = memoized.cache,
        addr = resolver ? apply(resolver, this, args) : args[1];
      if (!cache.has(addr)) {
        cache.set(addr, apply(fn, this, args));
      }
      return cache.get(addr);
    };
    memoized.cache = new Map();
    return memoized;
  }

  function partial(fn) {
    var boundArgs = [], len = arguments.length - 1;
    while ( len-- > 0 ) boundArgs[ len ] = arguments[ len + 1 ];

    return function() {
      var _args = [], len = arguments.length;
      while ( len-- ) _args[ len ] = arguments[ len ];

      var i = 0;
      var args = boundArgs.map(function (arg) { return (arg === partial._ ? _args[i++] : arg); });
      args = args.concat(_args.slice(i));
      return apply(fn, this, args);
    };
  }
  partial._ = {};

  function curry(fn) {
    var argsLen = fn.length,
      args = [];
    var curried = function() {
      var _args = [], len = arguments.length;
      while ( len-- ) _args[ len ] = arguments[ len ];

      args = [args ].concat( _args);
      if (argsLen === args.length) { return apply(fn, this, args); }
      else { return curried; }
    };
    return argsLen < 2 ? fn : curried;
  }

  function ary(fn, n) {
    return n == null
      ? fn
      : function() {
          var args = [], len = arguments.length;
          while ( len-- ) args[ len ] = arguments[ len ];

          return apply(fn, this, args.slice(0, n));
        };
  }

  function wrap(fn, wrapper) {
    wrapper || (wrapper = identity);
    return function() {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      return apply(wrapper, this, [fn ].concat( args));
    };
  }

  // #endregion

  // #region Math

  function random(lower, upper) {
    if (lower == null) { return Math.random(); }
    if (upper == null) {
      upper = lower;
      lower = 0;
    }
    if (lower > upper) {
      var temp = lower;
      lower = upper;
      upper = temp;
    }
    return lower + Math.floor(Math.random() * (upper - lower + 1));
  }

  function sum() {
    var arr = arguments.length === 1 ? arguments[0] : arguments;
    return reduce(arr, function (result, it) { return (result += it); }, 0);
  }

  function average() {
    var arr = arguments.length === 1 ? arguments[0] : arguments;
    var len = arr.length;
    return len === 0 ? 0 : sum(arr) / len;
  }

  var avg = average;

  function decimalAdjust(methodName, number, precision) {
    if (precision) {
      var value = Math[methodName](number + 'e' + precision);
      return +(value + 'e' + -precision);
    }
    return Math[methodName](number);
  }

  function round(num, precision) {
    return decimalAdjust('round', num, precision);
  }

  function floor(num, precision) {
    return decimalAdjust('floor', num, precision);
  }

  function ceil(num, precision) {
    return decimalAdjust('ceil', num, precision);
  }

  function radians(x) {
    return (Math.PI / 180) * x;
  }

  // #endregion

  // #region String

  function toUpper(x) {
    return x.toUpperCase();
  }

  function toLower(x) {
    return x.toLowerCase();
  }

  function trim(x) {
    return x.trim();
  }

  function repeat(str, n) {
    var rst = '';
    if (!isString(str)) { str = String(str); }
    if (n < 1 || !isFinite(n)) { return rst; }
    do {
      if (n % 2) { rst += str; }
      n = Math.floor(n / 2);
      if (n) { str += str; }
    } while (n);
    return rst;
  }

  function createPadding(len, chrs) {
    chrs || (chrs = ' ');
    var pad = chrs.repeat(Math.ceil(len / chrs.length));
    return pad.length > len ? pad.slice(0, len) : pad;
  }

  function padStart(str, len, chrs) {
    if (!isString(str)) { str = String(str); }
    var strLen = str.length;
    if (len == null || len <= strLen) { return str; }
    return createPadding(len - strLen, chrs) + str;
  }

  function padEnd(str, len, chrs) {
    if (!isString(str)) { str = String(str); }
    var strLen = str.length;
    if (len == null || len <= strLen) { return str; }
    return str + createPadding(len - strLen, chrs);
  }

  function startsWith(str, target, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, target.length) == target;
  }

  function endsWith(str, target, this_len) {
    if (this_len == null || this_len > str.length) { this_len = str.length; }
    return str.substring(this_len - target.length, this_len) == target;
  }

  function eachMatch(str, pattern, fn) {
    if (!isString(str) || !isRegExp(pattern)) {
      throw new TypeError('invalid arguments');
    }
    if (!pattern.global) {
      pattern = RegExp(pattern.source, 'g');
    }
    var match;
    for (;;) {
      match = pattern.exec(str);
      if (!match) { break; }
      if (apply(fn, null, match) === false) { break; }
    }
  }

  function findAll(str, pattern) {
    var arguments$1 = arguments;

    var rst = [];
    eachMatch(str, pattern, function () {
      rst.push(arguments$1.length == 1 ? arguments$1[0] : arguments$1);
    });
    return rst;
  }
  // #endregion

  var tool = /*#__PURE__*/Object.freeze({
    chr: chr,
    ord: ord,
    hex: hex,
    bin: bin,
    oct: oct,
    int: int,
    getFuncName: getFuncName,
    getTag: getTag,
    typeOf: typeOf,
    type: type,
    has: has$1,
    isArray: isArray,
    isObject: isObject,
    isFunction: isFunction,
    isString: isString,
    isNumber: isNumber,
    isBoolean: isBoolean,
    isDate: isDate,
    isRegExp: isRegExp,
    isError: isError,
    isMap: isMap,
    isSet: isSet,
    isWeakMap: isWeakMap,
    isInteger: isInteger,
    isArguments: isArguments,
    isObjectLike: isObjectLike,
    isLength: isLength,
    isArrayLike: isArrayLike,
    isEmpty: isEmpty,
    isBuffer: isBuffer,
    apply: apply,
    range: range,
    toPath: toPath,
    identity: identity,
    iteratee: iteratee,
    each: each,
    forEach: forEach,
    map: map,
    select: select,
    reduce: reduce,
    filter: filter,
    where: where,
    toArray: toArray,
    find: find,
    findIndex: findIndex,
    fill: fill,
    groupBy: groupBy,
    countBy: countBy,
    size: size,
    len: len,
    uniqBy: uniqBy,
    uniq: uniq,
    distinct: distinct,
    distinctBy: distinctBy,
    chunk: chunk,
    concat: concat,
    slice: slice,
    drop: drop,
    tail: tail,
    initial: initial,
    take: take,
    takeRight: takeRight,
    contains: contains,
    include: include,
    includes: includes,
    first: first,
    head: head,
    last: last,
    nth: nth,
    pullAll: pullAll,
    pull: pull,
    remove: remove,
    difference: difference,
    unzip: unzip,
    zip: zip,
    flatten: flatten,
    keys: keys,
    values: values,
    keysIn: keysIn,
    valuesIn: valuesIn,
    zipObject: zipObject,
    fromPairs: fromPairs,
    object: object,
    get: get,
    at: at,
    propertyOf: propertyOf,
    property: property,
    properties: properties,
    set: set,
    unset: unset,
    update: update,
    pick: pick,
    isMatch: isMatch,
    matches: matches,
    matcher: matcher,
    assign: assign,
    assignIn: assignIn,
    extend: extend,
    defaults: defaults,
    entries: entries,
    toPairs: toPairs,
    memoize: memoize,
    partial: partial,
    curry: curry,
    ary: ary,
    wrap: wrap,
    random: random,
    sum: sum,
    average: average,
    avg: avg,
    round: round,
    floor: floor,
    ceil: ceil,
    radians: radians,
    toUpper: toUpper,
    toLower: toLower,
    trim: trim,
    repeat: repeat,
    padStart: padStart,
    padEnd: padEnd,
    startsWith: startsWith,
    endsWith: endsWith,
    eachMatch: eachMatch,
    findAll: findAll
  });

  function log(msg) {
    if ( msg === void 0 ) msg = '';

    WScript.Echo(msg);
  }

  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: ctor
    });
  }

  var FMT_REG = /%[sdifjoO%]/g;

  function format(f) {
    if (!isString(f)) {
      return map(arguments, function (arg) { return inspect(arg); }).join(' ');
    }

    var i = 1,
      args = arguments,
      len = args.length,
      str = f.replace(FMT_REG, function (x) {
        if (x === '%%') { return '%'; }
        if (i >= len) { return x; }
        switch (x) {
          case '%s':
          case '%d':
          case '%i':
          case '%f':
            return args[i++];
          case '%j':
            return JSON.stringify(args[i++]);
          case '%o':
          case '%O':
            return inspect(args[i++]);
          default:
            return x;
        }
      });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isPrimitive(x)) { str += ' ' + x; }
      else { str += ' ' + inspect(x); }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    var arguments$1 = arguments;

    // Allow for deprecating things in the process of starting up.
    if (global.process === void 0) {
      return function () { return apply(deprecate(fn, msg), null, arguments$1); };
    }

    if (process.noDeprecation === true) { return fn; }

    var warned = false;

    function deprecated() {
      if (!warned) {
        if (process.throwDeprecation) { throw new Error(msg); }
        else if (process.traceDeprecation) { log(msg); }
        else { log(msg); }
        warned = true;
      }
      return apply(fn, null, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;

  function debuglog(set) {
    var arguments$1 = arguments;

    if (debugEnviron == null) { debugEnviron = process.env.NODE_DEBUG || ''; }
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = process.pid;
        debugs[set] = function () {
          var msg = apply(format, null, arguments$1);
          log((set + " " + pid + ": " + msg));
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /* obj, [ showHidden/options, depth, colors ] */
  function inspect(obj, showHidden, depth, colors) {
    // default options
    var ctx = {
      seen: [],
      // stylize: stylizeNoColor,
      showHidden: false,
      depth: 2,
      colors: false,
      customInspect: false,
      maxArrayLength: 100,
      breakLength: 60
    };
    if (isBoolean(showHidden)) { ctx.showHidden = showHidden; }
    if (isNumber(depth)) { ctx.depth = depth; }
    if (isBoolean(colors)) { ctx.colors = colors; }
    if (isObject(showHidden)) {
      // got an "options" object
      Object.assign(ctx, showHidden);
    }
    return formatValue(ctx, obj, 0);
  }

  function formatValue(ctx, value, recurseTimes) {
    var result;
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (
      ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)
    ) {
      result = value.inspect(recurseTimes, ctx);
      if (!isString(result)) {
        result = formatValue(ctx, result, recurseTimes);
      }
      return result;
    }

    // Primitive types cannot have properties
    result = formatValue_simple(value);
    if (result !== false) { return result; }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = keys.reduce(function (memo, key) { return ((memo[key] = true), memo); }, {});

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    if (recurseTimes > ctx.depth) { return getTag(value); }

    ctx.seen.push(value);

    var output,
      vType = typeOf(value);
    output = formatObject(ctx, value, recurseTimes, visibleKeys, keys, vType);
    ctx.seen.pop();

    return reduceToSingleString(ctx, output, recurseTimes, vType);
  }

  var ESCAPSE_MAP = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var ESCAPSE_REG = /'|\\|\r|\n|\u2028|\u2029]/g;

  function escapeChar(c) {
    return '\\' + ESCAPSE_MAP[c];
  }

  function formatValue_simple(value) {
    if (value === void 0) { return 'undefined'; }
    if (value === null) { return 'null'; }
    switch (typeOf(value)) {
      case 'string':
        return "'" + value.replace(ESCAPSE_REG, escapeChar) + "'";
      case 'number':
      case 'boolean':
      case 'regexp':
        return String(value);
      case 'date':
        return value.toJSON();
      case 'function': {
        var name = getFuncName(value);
        return name ? '[Function: ' + name + ']' : '[Function]';
      }
      case 'error':
        return '[' + value + ']';
      case 'buffer': {
        var bytes = value.buffer,
          len = value.length,
          i = -1,
          overflow,
          arr;
        if (len > 50) {
          overflow = true;
          len = 50;
          arr = Array(51);
        } else {
          arr = Array(len);
        }
        while (++i < len) { arr[i] = hex(bytes.getItem(i)); }
        if (overflow) { arr[50] = '...'; }
        return '<Buffer ' + arr.join(' ') + '>';
      }
      default:
        return false;
    }
  }

  function formatObject(ctx, obj, recurseTimes, visibleKeys, keys, vType) {
    var output = [],
      i = 0,
      len,
      key;
    if (vType == 'array') {
      len = obj.length;
      for (; i < len; i++) {
        if (i >= ctx.maxArrayLength) {
          output.push('... ' + (len - ctx.maxArrayLength) + ' more items');
          break;
        }
        output.push(formatProperty(ctx, obj[i], recurseTimes, null, true, null));
      }
      i = len;
    } else if (vType == 'map') {
      obj.forEach(function (value, key) {
        output.push(formatProperty(ctx, value, recurseTimes, key, true, ' => '));
      });
    } else if (vType == 'set') {
      obj.forEach(function (value) {
        output.push(formatProperty(ctx, value, recurseTimes, null, true, null));
      });
    }

    for (len = keys.length; i < len; i++) {
      key = keys[i];
      output.push(
        formatProperty(ctx, obj[key], recurseTimes, key, visibleKeys[key], ': ')
      );
    }
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, key, enumerable, sep) {
    var name, str;

    if (ctx.seen.indexOf(value) === -1) {
      str = formatValue(ctx, value, recurseTimes + 1);
    } else {
      str = '[Circular]';
    }

    if (key == null) { return str; }

    name = enumerable ? String(key) : '[' + key + ']';

    if (!/^\w+$/.test(name)) {
      name = "'" + name.replace(/'/g, "\\'") + "'";
    }

    return name + sep + str;
  }

  function reduceToSingleString(ctx, output, recurseTimes, vType) {
    var braces,
      indent,
      breakLine = false,
      len = output.length,
      i = -1,
      count = 0;
    if (vType == 'array') { braces = ['[', ']']; }
    else if (vType == 'map') { braces = ['Map {', '}']; }
    else if (vType == 'set') { braces = ['Set {', '}']; }
    else if (vType == 'arguments') { braces = ['[Arguments] {', '}']; }
    else { braces = ['{', '}']; }

    if (len == 0) { return braces[0] + braces[1]; }

    while (++i < len) {
      count += output[i].length + 1;
      if (count > ctx.breakLength) {
        breakLine = true;
        break;
      }
    }

    len = output.reduce(function (memo, cur) { return memo + cur.length + 1; }, 0);
    indent = repeat('  ', recurseTimes);
    if (breakLine) {
      return vType == 'array'
        ? braces[0] + ' ' + output.join(',\r\n  ' + indent) + ' ' + braces[1]
        : braces[0] +
            ' \r\n  ' +
            indent +
            output.join(',\r\n  ' + indent) +
            ' ' +
            braces[1];
    }
    return braces[0] + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isPrimitive(value) {
    return !isObject(value);
  }

  var util = /*#__PURE__*/Object.freeze({
    inherits: inherits,
    format: format,
    deprecate: deprecate,
    debuglog: debuglog,
    inspect: inspect,
    isPrimitive: isPrimitive
  });

  var Console = function Console(stdout, stderr) {
    if (!stdout || !('Write' in stdout)) {
      throw new Error('Console expects a writable stream instance');
    }
    if (!stderr) { stderr = stdout; }
    this._stdout = stdout;
    this._stderr = stderr;
    this._times = {};

    for (var key in Console.prototype) {
      this[key] = this[key].bind(this);
    }
  };

  Console.prototype.log = function log () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    this._stdout.WriteLine(format.apply(void 0, args));
  };

  Console.prototype.info = function info () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    this._stdout.WriteLine(format.apply(void 0, args));
  };

  Console.prototype.warn = function warn () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    this._stderr.WriteLine(format.apply(void 0, args));
  };

  Console.prototype.error = function error () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    this._stderr.WriteLine(format.apply(void 0, args));
  };

  Console.prototype.dir = function dir (object) {
    this._stdout.WriteLine(
      inspect(object, {
        customInspect: false
      })
    );
  };

  Console.prototype.time = function time (label) {
    this._times[label] = Date.now();
  };

  Console.prototype.timeEnd = function timeEnd (label) {
    var time = this._times[label];
    if (!time) {
      throw new Error('No such label: ' + label);
    }
    var duration = Date.now() - time;
    this.log('%s: %dms', label, duration);
  };

  Console.prototype.assert = function assert (v) {
      var args = [], len = arguments.length - 1;
      while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    if (!v) { throw new Error(format.apply(void 0, args)); }
  };

  var console = new Console(WScript.StdOut, WScript.StdErr);

  var ROOT_REGEXP = /^([A-z]:|)[/\\]/;
  var SEP_REGEXP = /[/\\]+/;
  var SEP_REGEXP_END = /[/\\]$/;
  var LNK_REGEXP = /(\.lnk|\.url)$/;

  var SEP = '\\';
  var sep = SEP;

  function isabs(pth) {
    return pth && ROOT_REGEXP.test(pth);
  }

  var isAbsolute = isabs;

  function dirname(pth) {
    return __FSO.GetParentFolderName(pth);
  }

  function basename(pth, ext) {
    return ext ? __FSO.GetBaseName(pth) : __FSO.GetFileName(pth);
  }

  function extname(pth) {
    return __FSO.GetExtensionName(pth);
  }

  function abspath(pth) {
    if (!isabs(pth)) { pth = __dirname + SEP + pth; }
    return __FSO.GetAbsolutePathName(pth);
  }

  function normpath(pth) {
    var parts = pth.split(SEP_REGEXP),
      normParts = [],
      len = parts.length,
      part;
    for (var i = 0; i < len; i++) {
      part = parts[i];
      if (part === '..') { normParts.pop(); }
      else if (part === '.') { continue; }
      else { normParts.push(part); }
    }
    return normParts.join(SEP);
  }

  var normalize = normpath;

  function join() {
    var arguments$1 = arguments;

    var p,
      len = arguments.length,
      parts = [];
    for (var i = 0; i < len; i++) {
      p = arguments$1[i];
      if (typeof p === 'string') { parts.push(p); }
    }
    return normpath(parts.join(SEP));
  }

  function resolve() {
    var arguments$1 = arguments;

    var p,
      len = arguments.length,
      parts = [];
    for (var i = 0; i < len; i++) {
      p = arguments$1[i];
      if (typeof p === 'string') {
        if (ROOT_REGEXP.test(p)) {
          parts.length = 0;
          parts[0] = p;
        } else {
          parts.push(p);
        }
      }
    }
    return abspath(parts.join(SEP));
  }

  function relative(from, to) {
    var from_ = abspath(from).toLowerCase(),
      to_ = abspath(to).toLowerCase(),
      fromParts = from_.split(SEP_REGEXP),
      toParts = to_.split(SEP_REGEXP),
      len = Math.min(fromParts.length, toParts.length),
      samePartsLen = len,
      i = -1;

    while (++i < len) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLen = i;
        break;
      }
    }

    if (samePartsLen == 0) { return to; }

    var outputParts = [];
    for (i = samePartsLen; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLen));

    return outputParts.join(SEP);
  }

  function isfile(pth) {
    return __FSO.FileExists(pth);
  }

  function isdir(pth) {
    return __FSO.FolderExists(pth);
  }

  function exists(pth) {
    return isfile(pth) || isdir(pth);
  }

  function createShortcut(pth, options) {
    var shortcut = __WShell.CreateShortcut(pth);
    if (options.target) { shortcut.TargetPath = options.target; }
    if (options.runStyle) { shortcut.WindowStyle = options.runStyle; } //NORMAL(1),MAX(3),MIN(7)
    if (options.desc) { shortcut.Description = options.desc; }
    shortcut.Save();
  }

  function getShortcutTarget(pth) {
    var shortcut = __WShell.CreateShortcut(pth);
    return shortcut.TargetPath;
  }

  var FILE_PROTO = {
    isfile: function() {
      return (this._file.Attributes & 16) == 0;
    },
    isFile: function() {
      return (this._file.Attributes & 16) == 0;
    },
    isdir: function() {
      return (this._file.Attributes & 16) == 16;
    },
    isDirectory: function() {
      return (this._file.Attributes & 16) == 16;
    },
    isShortcut: function() {
      return this.isFile() && LNK_REGEXP.test(this.path);
    },
    createShortcut: function(pth, options) {
      options.target = this.path;
      createShortcut(pth, options);
    },
    copy: function(dst, ow) {
      if (!isabs(dst)) { dst = abspath(dst); }
      if (!SEP_REGEXP_END.test(dst)) { dst += SEP; }
      if (!isdir(dst)) { mkdirs(dst); }
      return this._file.Copy(dst, ow == null ? true : !!ow);
    },
    delete: function(force) {
      return this._file.Delete(!!force);
    },
    move: function(dst) {
      if (!isabs(dst)) { dst = abspath(dst); }
      if (!SEP_REGEXP_END.test(dst)) { dst += SEP; }
      if (!isdir(dst)) { mkdirs(dst); }
      return this._file.Move(dst);
    },
    getChildren: function() {
      var self = this.isShortcut() ? getStats(this.target) : this;
      if (self.isFile()) { return null; }
      var _enum = new Enumerator(self._file.Files);
      var rst = [];
      for (; !_enum.atEnd(); _enum.moveNext()) {
        rst.push(getStats(_enum.item()));
      }
      _enum = new Enumerator(self._file.SubFolders);
      for (; !_enum.atEnd(); _enum.moveNext()) {
        rst.push(getStats(_enum.item()));
      }
      return rst;
    }
  };

  var FILE_PROPS = {
    _file: {
      value: null,
      writable: true
    },
    name: {
      enumerable: true,
      get: function() {
        return this._file.Name;
      },
      set: function(v) {
        this._file.Name = v;
      }
    },
    path: {
      enumerable: true,
      get: function() {
        return this._file.Path;
      }
    },
    dirname: {
      enumerable: true,
      get: function() {
        return this._file.ParentFolder.Path;
      }
    },
    size: {
      enumerable: true,
      get: function() {
        return this._file.Size;
      }
    },
    type: {
      enumerable: true,
      get: function() {
        return this._file.Type;
      }
    },
    target: {
      enumerable: true,
      get: function() {
        return this.isShortcut() ? getShortcutTarget(this.path) : null;
      }
    },
    atime: {
      enumerable: true,
      get: function() {
        return new Date(this._file.DateLastAccessed);
      }
    },
    mtime: {
      enumerable: true,
      get: function() {
        return new Date(this._file.DateLastModified);
      }
    },
    ctime: {
      enumerable: true,
      get: function() {
        return new Date(this._file.DateCreated);
      }
    },
    atimeMs: {
      enumerable: true,
      get: function() {
        return this.atime.getTime();
      }
    },
    mtimeMs: {
      enumerable: true,
      get: function() {
        return this.mtime.getTime();
      }
    },
    ctimeMs: {
      enumerable: true,
      get: function() {
        return this.ctime.getTime();
      }
    },
    readonly: {
      enumerable: true,
      get: function() {
        return !!(this._file.Attributes & 1);
      }
    },
    hidden: {
      enumerable: true,
      get: function() {
        return !!(this._file.Attributes & 2);
      }
    },
    system: {
      enumerable: true,
      get: function() {
        return !!(this._file.Attributes & 4);
      }
    }
  };

  function getStats(pth) {
    var f,
      instance = Object.create(FILE_PROTO, FILE_PROPS);
    if (typeof pth == 'object') {
      f = pth;
    } else if (typeof pth == 'string') {
      if (!isabs(pth)) { pth = abspath(pth); }
      if (isfile(pth)) {
        f = __FSO.GetFile(pth);
      } else if (isdir(pth)) {
        f = __FSO.GetFolder(pth);
      }
    }
    if (!f) { throw new Error(("ENOENT, no such file or directory (" + pth + ")")); }
    instance._file = f;
    return instance;
  }

  function scandir(pth) {
    return getStats(pth).getChildren();
  }

  function mkdir(pth) {
    return __FSO.CreateFolder(pth);
  }

  function mkdirs(pth) {
    var dir = pth,
      dirs = [];
    while (dir) {
      if (isdir(dir)) { break; }
      dirs.push(dir);
      dir = dirname(dir);
    }
    var i = dirs.length;
    while (i--) { mkdir(dirs[i]); }
  }

  function rmdir(pth) {
    return isdir(pth) && __FSO.DeleteFolder(pth);
  }

  function remove$1(pth) {
    return isfile(pth) && __FSO.DeleteFile(pth);
  }

  function copyfile(pth, dst, ow) {
    if (!isabs(dst)) { dst = abspath(dirname(pth) + SEP + dst); }
    if (!SEP_REGEXP_END.test(dst)) { dst += SEP; }
    if (!isdir(dst)) { mkdirs(dst); }
    __FSO.CopyFile(pth, dst, ow || false);
  }

  function repl(pth, dst) {
    if (!isabs(dst)) { dst = abspath(dirname(pth) + SEP + dst); }
    var dir = dirname(dst);
    var name = basename(dst);
    if (isfile(dst)) { throw new Error(dst + ' is exists. repl faid.'); }
    if (!isdir(dir)) { mkdirs(dir); }
    else if (isdir(dst)) { rmdir(dst); }
    var f = getStats(pth);
    if (f.name != name) { f.name = name; }
    if (f.dirname != dir) { f.move(dir); }
  }

  function statSync(pth) {
    return getStats(pth);
  }

  function readdirSync(pth) {
    return scandir(pth).map(function (it) { return it.name; });
  }

  function withStream(options, fn) {
    var st = new ActiveXObject('ADODB.Stream'),
      file = options.file,
      encoding = options.encoding,
      flag = options.flag,
      rst;
    try {
      if (encoding == 'binary') { st.Type = 1; }
      else { st.Charset = encoding; }
      st.Open();
      if (flag == 'r' || flag == 'a') {
        if (!isfile(file))
          { throw new Error(("withStream: file not exists. (" + file + ")")); }
        st.LoadFromFile(file);
      }
      if (flag == 'a') { st.Position = st.Size; }
      rst = fn(st);
    } catch (e) {
      throw e;
    } finally {
      st && st.State == 1 && st.close();
    }
    return rst;
  }

  function saveStream(st, options) {
    var skipLen = 0,
      file = options.file,
      encoding = options.encoding.replace('-', '').toLowerCase();
    if (encoding == 'utf8' || encoding == 'unicode') { skipLen = 3; }
    else if (encoding == 'uft16') { skipLen = 2; }
    st.SetEOS();
    if (skipLen) {
      st.Position = 0;
      st.Type = 1;
      st.Position = skipLen;
      var binData = st.Read(-1);
      st.Position = 0;
      st.Write(binData);
      st.SetEOS();
    }
    st.SaveToFile(file, 2);
  }

  function initArgs(file, options) {
    var tp, encoding, flag;
    if (!isabs(file)) { throw new Error('fs: relative path is not supported'); }
    tp = typeof options;
    if (tp == 'string') {
      encoding = options;
    } else if (tp == 'object') {
      if (options.encoding) { encoding = options.encoding; }
      if (options.flag) { flag = options.flag; }
      else if (options.flags) { flag = options.flags; }
    }
    if (flag && flag.length > 1) { flag = flag.charAt(0); }
    return { file: file, encoding: encoding, flag: flag };
  }

  function readFileSync(file, options) {
    var opts = initArgs(file, options);
    opts.flag = 'r';
    if (!opts.encoding) { opts.encoding = 'binary'; }
    return withStream(opts, function(st) {
      return opts.encoding == 'binary'
        ? Buffer.from(st.Read(-1))
        : st.ReadText(-1);
    });
  }

  function writeFileSync(file, data, options) {
    var opts = initArgs(file, options),
      isBuffer = Buffer.isBuffer(data);
    opts.flag = 'w';
    if (isBuffer) { opts.encoding = 'binary'; }
    else if (!opts.encoding) { opts.encoding = 'UTF-8'; }
    withStream(opts, function (st) {
      isBuffer ? st.Write(data.buffer) : st.WriteText(data);
      saveStream(st, opts);
    });
  }

  function appendFileSync(file, data, options) {
    var opts = initArgs(file, options),
      isBuffer = Buffer.isBuffer(data);
    opts.flag = 'a';
    if (isBuffer) { opts.encoding = 'binary'; }
    else if (!opts.encoding) { opts.encoding = 'UTF-8'; }
    withStream(opts, function (st) {
      isBuffer ? st.Write(data.buffer) : st.WriteText(data);
      saveStream(st, opts);
    });
  }

  function mkdirSync(pth, options) {
    if (options && options.recursive) { mkdirs(pth); }
    mkdir(pth);
  }

  function copyFileSync(src, dest) {
    copyfile(src, dest, true);
  }

  // fs-extra

  function mkdirsSync(pth) {
    mkdirs(pth);
  }

  function ensureDirSync(pth) {
    if (!isdir(pth)) { mkdirs(pth); }
  }

  function ensureFileSync(file) {
    if (!isabs(file)) { file = abspath(file); }
    var dir = dirname(file);
    if (!isdir(dir)) { mkdirs(dir); }
  }

  function outputFileSync(file, data, options) {
    if (!isabs(file)) { file = abspath(file); }
    ensureFileSync(file);
    writeFileSync(file, data, options);
  }

  function outputJsonSync(file, obj, options) {
    if (!isabs(file)) { file = abspath(file); }
    ensureFileSync(file);
    writeFileSync(file, JSON.stringify(obj), options);
  }

  var outputJSONSync = outputJsonSync;

  function readJsonSync(file, options) {
    if (!isabs(file)) { file = abspath(file); }
    if (!options || (typeof options == 'object' && !options.encoding))
      { options = 'UTF-8'; }
    var data = readFileSync(file, options);
    return JSON.parse(data);
  }

  var readJSONSync = readJsonSync;

  function emptyDirSync(dir) {
    scandir(dir).forEach(function (it) { return it.delete(true); });
  }

  function readLinesSync(file, options) {
    if (!isabs(file)) { file = abspath(file); }
    var opts = initArgs(file, options);
    opts.flag = 'r';
    if (!opts.encoding) { opts.encoding = 'UTF-8'; }
    return withStream(opts, function(st) {
      var lines = [];
      while (!st.EOS) { lines.push(st.ReadText(-2)); }
      return lines;
    });
  }

  var fs = /*#__PURE__*/Object.freeze({
    statSync: statSync,
    readdirSync: readdirSync,
    readFileSync: readFileSync,
    writeFileSync: writeFileSync,
    appendFileSync: appendFileSync,
    mkdirSync: mkdirSync,
    copyFileSync: copyFileSync,
    mkdirsSync: mkdirsSync,
    ensureDirSync: ensureDirSync,
    ensureFileSync: ensureFileSync,
    outputFileSync: outputFileSync,
    outputJsonSync: outputJsonSync,
    outputJSONSync: outputJSONSync,
    readJsonSync: readJsonSync,
    readJSONSync: readJSONSync,
    emptyDirSync: emptyDirSync,
    readLinesSync: readLinesSync,
    existsSync: exists,
    renameSync: repl,
    rmdirSync: rmdir,
    unlinkSync: remove$1
  });

  var PARSE_REG = /^([A-Za-z]:[/\\]|[/\\]|)(?:([^?#]*)[/\\]|)([^/\\?#]*?)([.][^.?#]+|)$/;
  var CAPTURE = ['path', 'root', 'dir', 'name', 'ext'];

  function parse(pth) {
    pth || (pth = '');
    var match = pth.match(PARSE_REG);
    var result = CAPTURE.reduce(function(memo, name, index) {
      memo[name] = match[index];
      return memo;
    }, {});
    result.base = result.name + result.ext;
    result.dirname = result.root + result.dir;
    return result;
  }

  var delimiter = ';';

  var Path = /*#__PURE__*/Object.freeze({
    parse: parse,
    delimiter: delimiter,
    sep: sep,
    dirname: dirname,
    basename: basename,
    extname: extname,
    isAbsolute: isAbsolute,
    normalize: normalize,
    join: join,
    resolve: resolve,
    relative: relative
  });

  if (!Object.assign) {
    Object.assign = function() {
      return apply(assign, null, arguments);
    };
  }

  if (!Object.values) {
    Object.values = values;
  }

  function defineMethods(target, funcDict) {
    var props = {};
    for (var key in funcDict) {
      if (!target[key]) {
        props[key] = {
          enumerable: false,
          value: funcDict[key]
        };
      }
    }
    Object.defineProperties(target, props);
  }

  defineMethods(Array.prototype, {
    includes: function(val, start) {
      return includes(this, val, start);
    },
    find: function(fn, _this) {
      return find(this, fn, _this)[0];
    },
    findIndex: function(fn, _this) {
      return findIndex(this, fn, _this)[1];
    },
    fill: function(val, start, end) {
      return fill(this, val, start, end);
    }
  });

  defineMethods(String.prototype, {
    repeat: function(n) {
      return repeat(this, n);
    },
    startsWith: function(target, pos) {
      return startsWith(this, target, pos);
    },
    endsWith: function(target, this_len) {
      return endsWith(this, target, this_len);
    },
    includes: function(target, pos) {
      return includes(this, target, pos);
    },
    padStart: function(len, chrs) {
      return padStart(this, len, chrs);
    },
    padEnd: function(len, chrs) {
      return padEnd(this, len, chrs);
    }
  });

  if (!String.raw) {
    String.raw = function(callSite) {
      var arguments$1 = arguments;

      var i = 0,
        buf = [],
        strs = callSite.raw,
        len = strs.length,
        argsCnt = arguments.length;
      while (i < len) {
        buf.push(strs[i++]);
        if (i < argsCnt && i < len) {
          buf.push(arguments$1[i]);
        }
      }
      return buf.join('');
    };
  }

  window.__filename = WScript.ScriptFullName;
  window.__dirname = __filename.match(/(.*)[\\/]/)[1];

  function defineGetter(target, funcDict) {
    var props = {};
    for (var key in funcDict) {
      if (!target[key]) {
        props[key] = {
          get: funcDict[key]
        };
      }
    }
    Object.defineProperties(target, props);
  }

  var _vbs, _shell, _fso, _shell_app;

  defineGetter(window, {
    __VBS: function() {
      if (!_vbs) {
        _vbs = new ActiveXObject('ScriptControl');
        _vbs.Language = 'VBScript';
      }
      return _vbs;
    },
    __WShell: function() {
      return _shell || (_shell = new ActiveXObject('WScript.Shell'));
    },
    __FSO: function() {
      return _fso || (_fso = new ActiveXObject('Scripting.FileSystemObject'));
    },
    __ShellApp: function() {
      return _shell_app || (_shell_app = new ActiveXObject('Shell.Application'));
    }
  });

  function log$1(msg) {
    if ( msg === void 0 ) msg = '';

    WScript.Echo(msg);
  }

  window.addEventListener('error', function() {
    var scripts = document.scripts;
    var i = -1,
      len = scripts.length;
    var name = basename(__filename).replace(/\.[^.]+$/, '');
    var file, folder;
    folder = join(__dirname, name + '_src');
    if (!isdir(folder)) { mkdirsSync(folder); }
    log$1();
    while (++i < len) {
      file = join(folder, i + '.js');
      outputFileSync(file, scripts[i].text);
      log$1(("source " + i + ": " + file));
    }
  });

  function execSync(cmd) {
    var proc = __WShell.Exec(cmd);
    for (;;) {
      if (proc.States !== 0) { break; }
    }
    if (!proc.StdOut.AtEndOfStream) {
      return proc.StdOut.ReadAll();
    }
  }

  function exec(cmd, func) {
    var proc, stdout, stderr;
    try {
      proc = __WShell.Exec(cmd);
      for (;;) {
        if (proc.States !== 0) { break; }
      }
      if (func && typeof func === 'function') {
        if (!proc.StdOut.AtEndOfStream) {
          stdout = proc.StdOut.ReadAll();
        }
        if (!proc.StdErr.AtEndOfStream) {
          stderr = proc.StdErr.ReadAll();
        }
        func(null, stdout, stderr);
      }
    } catch (e) {
      if (func && typeof func === 'function') {
        func(e, null, null);
      } else {
        throw e;
      }
    }
  }

  function run(cmd, options) {
    var intWindowStyle = 1,
      bWaitOnReturn = true;
    options || (options = {});
    if (options.hide === false || options.hidden === false) { intWindowStyle = 0; }
    if (options.wait === false) { bWaitOnReturn = false; }
    return __WShell.Run(cmd, intWindowStyle, bWaitOnReturn);
  }

  var child_process = /*#__PURE__*/Object.freeze({
    execSync: execSync,
    exec: exec,
    run: run
  });

  var escape = encodeURIComponent;

  var unescape = decodeURIComponent;

  function formatValue$1(value) {
    switch (typeof value) {
      case 'string':
        return encodeURIComponent(value);
      case 'number':
      case 'boolean':
        return String(value);
      default:
        return '';
    }
  }

  function stringify(obj, sep, eq) {
    if (!obj) { return ''; }
    sep || (sep = '&');
    eq || (eq = '=');
    var buf = [],
      value,
      i,
      len;
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        value = obj[key];
        if (Array.isArray(value)) {
          (i = -1), (len = value.length);
          while (++i < len) {
            buf.push(key + eq + formatValue$1(value[i]));
          }
        } else {
          buf.push(key + eq + formatValue$1(value));
        }
      }
    }
    return buf.join(sep);
  }

  function parse$1(str, sep, eq) {
    sep || (sep = '&');
    eq || (eq = '=');
    var buf = str.split(sep);
    var i = -1,
      len = buf.length,
      result = {},
      keyDict = {},
      pair,
      key,
      value;
    while (++i < len) {
      pair = buf[i].split(eq);
      key = pair[0];
      value = pair[1];
      if (keyDict[key]) {
        if (keyDict[key] === 1) {
          keyDict[key] = 2;
          result[key] = [result[key], value];
        } else {
          result[key].push(value);
        }
      } else {
        keyDict[key] = 1;
        result[key] = value;
      }
    }
    return result;
  }

  var querystring = /*#__PURE__*/Object.freeze({
    escape: escape,
    unescape: unescape,
    stringify: stringify,
    parse: parse$1
  });

  var BIN_TYPES = ['arraybuffer', 'blob'];

  function request(options) {
    var http, uri, method, timeout;
    http = new ActiveXObject('WinHttp.WinHttpRequest.5.1');
    uri = options.uri || options.url || options.path;
    method = (options.method || 'GET').toUpperCase();
    timeout = options.timeout || 3000;
    http.setTimeouts(timeout, timeout, timeout, timeout);

    try {
      var data = options.form || options.data || null;
      if (data && typeof data !== 'string') { data = stringify(data); }
      if (data) {
        if (method === 'GET') {
          http.open(method, uri + '?' + data, false);
        } else {
          http.open(method, uri, false);
        }
      } else {
        http.open(method, uri, false);
      }
      applyOptions(http, options);
      http.send(data);

      return {
        statusCode: http.status,
        headers: parseHeaders(http.getAllResponseHeaders()),
        body: BIN_TYPES.includes(options.responseType)
          ? Buffer.from(http.ResponseBody)
          : http.ResponseText
      };
    } catch (e) {
      throw e;
    }
  }
  /*
  WinHttpRequestOption
    UserAgentString = 0
    URL = 1
    URLCodePage = 2
    EscapePercentInURL = 3
    SslErrorIgnoreFlags = 4
    SelectCertificate = 5
    EnableRedirects = 6
    UrlEscapeDisable = 7
    UrlEscapeDisableQuery = 8
    SecureProtocols = 9
    EnableTracing = 10
    RevertImpersonationOverSsl = 11
    EnableHttpsToHttpRedirects = 12
    EnablePassportAuthentication = 13
    MaxAutomaticRedirects = 14
    MaxResponseHeaderSize = 15
    MaxResponseDrainSize = 16
    EnableHttp1_1 = 17
    EnableCertificateRevocationCheck = 18
  */
  var setReqOpts = Function(
    'http',
    "\nhttp.Option(0) = 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko';\nhttp.Option(4) = 13056;\nhttp.Option(6) = false;"
  );

  function applyOptions(http, options) {
    if (options.proxy) {
      setReqOpts(http);
      http.setProxy('2', options.proxy);
      // http.SetClientCertificate("LOCAL_MACHINE\Personal\My Certificate")
      // http.SetCredentials('user', 'pass', 1);
    }

    if (options.method !== 'GET') {
      http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }

    var headers = options.headers;
    if (headers) {
      for (var key in headers) {
        if (key.toLowerCase() == 'cookie') {
          http.setRequestHeader('Cookie', 'string');
          http.setRequestHeader('Cookie', headers[key]);
        } else {
          http.setRequestHeader(key, headers[key]);
        }
      }
    }
  }

  function parseHeaders(str_headers) {
    var result = {},
      headers,
      i,
      k,
      v;
    headers = str_headers.trim().split(/\r?\n/);
    headers.forEach(function (header) {
      i = header.indexOf(':');
      k = header.slice(0, i).trim();
      v = header.slice(i + 1).trim();
      if (k.toLowerCase() == 'set-cookie') {
        if (result[k]) { result[k].push(v); }
        else { result[k] = [v]; }
      } else {
        result[k] = v;
      }
    });
    return result;
  }

  function getOption(args) {
    var options;
    if (typeof args[0] === 'string') {
      options = args[1] || {};
      options.uri = args[0];
    } else {
      options = args[0] || {};
    }
    return options;
  }

  var http = {
    request: function() {
      return request(getOption(arguments));
    },
    get: function() {
      var options = getOption(arguments);
      options.method = 'GET';
      return request(options);
    },
    post: function() {
      var options = getOption(arguments);
      options.method = 'POST';
      return request(options);
    }
  };

  var http$1 = /*#__PURE__*/Object.freeze({
    'default': http
  });

  function _cipher(enc, buf_password, buf_data) {
    var crypt = new ActiveXObject('System.Security.Cryptography.RijndaelManaged');
    var keyHash = new ActiveXObject('System.Security.Cryptography.SHA256Managed');
    keyHash.ComputeHash_2(buf_password.buffer);
    crypt.Key = keyHash.Hash;
    keyHash.Clear();

    var ivHash = new ActiveXObject(
      'System.Security.Cryptography.MD5CryptoServiceProvider'
    );
    ivHash.ComputeHash_2(buf_password.buffer);
    crypt.IV = ivHash.Hash;
    ivHash.Clear();

    var dst = null;
    var ts = enc ? crypt.CreateEncryptor() : crypt.CreateDecryptor();
    try {
      dst = ts.TransformFinalBlock(buf_data.buffer, 0, buf_data.length);
    } finally {
      crypt.Clear();
    }
    return dst;
  }

  var Cipher = function Cipher(algorithm, password, isEncode) {
    this.algorithm = algorithm;
    this.password = password;
    this.isEncode = isEncode;
    this.data = null;
    this.inputEncoding = null;
    this.outputEncoding = null;
  };

  Cipher.prototype.update = function update (data, inputEncoding, outputEncoding) {
    this.data = data;
    if (inputEncoding) { this.inputEncoding = inputEncoding; }
    if (outputEncoding) { this.outputEncoding = outputEncoding; }
    return this;
  };

  Cipher.prototype.final = function final (outputEncoding) {
    if (outputEncoding) { this.outputEncoding = outputEncoding; }
    var bytes = _cipher(
      this.isEncode,
      Buffer.from(this.password),
      Buffer.from(this.data, this.inputEncoding)
    );
    if (this.outputEncoding == null || this.outputEncoding == 'binary') {
      return Buffer.from(bytes);
    } else {
      return Buffer.from(bytes).toString(this.outputEncoding);
    }
  };

  function _hash(objname, buf_data, opt_type) {
    var provider = new ActiveXObject(objname);
    provider.ComputeHash_2(buf_data.buffer);
    var hashs = provider.Hash;
    provider.Clear();
    return Buffer.from(hashs).toString(opt_type || 'hex');
  }

  var Hash = function Hash(algorithm) {
    this.algorithm = algorithm;
    this.data = null;
    this.inputEncoding = null;
  };

  Hash.prototype.update = function update (data, inputEncoding) {
      if ( inputEncoding === void 0 ) inputEncoding = 'utf-8';

    this.inputEncoding = inputEncoding;
    this.data = data;
    return this;
  };

  Hash.prototype.digest = function digest (encoding) {
    if (this.algorithm == 'md5') {
      return _hash(
        'System.Security.Cryptography.MD5CryptoServiceProvider',
        Buffer.from(this.data, this.inputEncoding),
        encoding
      );
    } else if (this.algorithm == 'sha1') {
      return _hash(
        'System.Security.Cryptography.SHA1CryptoServiceProvider',
        Buffer.from(this.data, this.inputEncoding),
        encoding
      );
    }
  };

  var crypto = {
    createCipher: function(algorithm, password) {
      return new Cipher(algorithm, password, true);
    },

    createDeCipher: function(algorithm, password) {
      return new Cipher(algorithm, password, false);
    },

    createHash: function(algorithm) {
      return new Hash(algorithm);
    }
  };

  var crypto$1 = /*#__PURE__*/Object.freeze({
    Cipher: Cipher,
    'default': crypto
  });

  var DEFAULT_OPTIONS = {
    headers: false,
    delimiter: ',',
    quote: '"',
    escape: '"',
    trim: false,
    rtrim: false,
    ltrim: false,
    newline: '\r\n'
  };

  var EMPTY_CHAR_REGEXP = /\s/;

  function Parser(options) {
    Object.assign(this, DEFAULT_OPTIONS);
    if (options != null && typeof options == 'object') {
      Object.assign(this, options);
    }
  }

  var PP = Parser.prototype;

  PP.init = function() {
    this.rows = [];
    this.row = [];
    this.cursor = 0;
    this.pos = 0;
    this.buf = [];
    this.bufLen = 0;
    this.escaping = false;
  };

  PP.parse = function fromString(str) {
    var i = 0,
      len = str.length;
    this.init();
    for (; i < len; i++) {
      this._char(str.charAt(i));
    }
    return this._getResult();
  };

  PP._getResult = function() {
    var result, headers, len;
    if (this.pos !== this.cursor) {
      this._row();
    }
    len = this.rows.length;
    result = this.rows;
    if (this.headers === true && len > 1) {
      headers = this.rows[0];
      this.rows.shift();
    } else if (isArray(this.headers) && len > 0) {
      headers = this.headers;
    }
    if (headers && headers.length > 0) {
      result = this.rows.map(function (row) { return zipObject(headers, row); });
    }
    return result;
  };

  PP._char = function(c) {
    if (c === this.delimiter && !this.escaping) {
      this._cell();
    } else if (c === this.quote) {
      this._push(c);
      this._quote();
    } else if (c === this.escape) {
      this._push(c);
      this._escape();
    } else if (c === '\n' && !this.escaping) {
      this._row();
    } else {
      this._push(c);
    }

    this.cursor++;
  };

  PP._push = function(c) {
    if (this.bufLen === 0) {
      if ((this.trim || this.ltrim) && EMPTY_CHAR_REGEXP.test(c)) { return; }
      if (c === this.quote) { return; }
    }
    this.buf[this.bufLen] = c;
    this.bufLen++;
  };

  PP._cell = function() {
    var item = this._getValue();
    this.row.push(item);
  };

  PP._getValue = function() {
    var result, c, i;
    i = this.bufLen;
    while (i--) {
      c = this.buf[i];
      if (EMPTY_CHAR_REGEXP.test(c)) {
        if (this.trim || this.rtrim) {
          this.buf[i] = '';
        }
      } else {
        if (c === this.quote) {
          this.buf[i] = '';
          break;
        } else {
          break;
        }
      }
    }
    result = this.buf.join('');
    this.buf.length = 0;
    this.bufLen = 0;
    return result;
  };

  PP._row = function() {
    if (this.bufLen > 0 && this.buf[this.bufLen - 1] === '\r') {
      this.buf[this.bufLen - 1] = '';
    }
    this._cell();
    this.rows.push(this.row);
    this.row = [];
    this.pos = this.cursor;
  };

  PP._quote = function() {
    this.escaping = !this.escaping;
    if (this.bufLen > 1 && this.buf[this.bufLen - 2] === this.escape) {
      this.buf[this.bufLen - 2] = this.buf[this.bufLen - 1];
      this.buf[this.bufLen - 1] = '';
    }
  };

  PP._escape = function() {
    this.escaping = !this.escaping;
  };

  function createParser(options) {
    return new Parser(options);
  }

  function parse$2(str, options) {
    return new Parser(options).parse(str);
  }

  function Formatter(options) {
    Object.assign(this, DEFAULT_OPTIONS);
    if (options != null && typeof options == 'object')
      { Object.assign(this, options); }
  }

  var FP = Formatter.prototype;

  FP.init = function() {
    this.rows = [];
  };

  FP.stringify = function(data) {
    var row, i, len, rowDataIsArray;
    this.init();
    if (isArray(this.headers)) {
      this._appendLine(this.headers);
    }
    len = isArray(data) && data.length;
    if (len && len > 0) {
      i = 0;
      row = data[0];
      rowDataIsArray = isArray(row);
      if (rowDataIsArray) {
        if (this.headers === true) {
          this.headers = row;
          this._appendLine(this.headers);
          i = 1;
        }
      } else {
        this.headers = Object.keys(row);
        this._appendLine(this.headers);
      }

      for (; i < len; i++) {
        row = data[i];
        if (rowDataIsArray) { this._appendLine(row); }
        else { this._appendLine(map(row)); }
      }
    }
    return this._getResult();
  };

  FP._appendLine = function(row) {
    var quote = this.quote;
    var escape_quote = this.escape + quote;
    var quoteRegexp = /"/g;
    var line = row
      .map(function (item) {
        if (item == null) {
          return '';
        } else if (isString(item)) {
          if (item.includes(quote)) {
            return quote + item.replace(quoteRegexp, escape_quote) + quote;
          } else {
            return item;
          }
        } else {
          return item + '';
        }
      })
      .join(this.delimiter);
    this.rows.push(line);
  };

  FP._getResult = function() {
    return this.rows.join(this.newline);
  };

  function createFormatter(options) {
    return new Formatter(options);
  }

  function stringify$1(data, options) {
    return new Formatter(options).stringify(data);
  }

  var csv = /*#__PURE__*/Object.freeze({
    createParser: createParser,
    parse: parse$2,
    createFormatter: createFormatter,
    stringify: stringify$1
  });

  var APP_ID = 'Excel.Application';

  function find$1(items, fn) {
    var en = new Enumerator(items);
    var item;
    for (var i = 0; !en.atEnd(); en.moveNext(), i++) {
      item = en.item();
      if (fn(item, i) === true) { return item; }
    }
    return null;
  }

  function matcher$1(pattern) {
    var isMatch;
    if (isFunction(pattern)) { isMatch = pattern; }
    else if (isString(pattern)) { isMatch = function (it) { return it.Name.includes(pattern); }; }
    else if (isRegExp(pattern)) { isMatch = function (it) { return pattern.test(it.Name); }; }
    else { isMatch = null; }
    return isMatch;
  }

  var Excel = function Excel(pth) {
    if ( pth === void 0 ) pth = '';

    var app;
    try {
      app = GetObject(pth, APP_ID);
    } catch (e) {
      app = new ActiveXObject(APP_ID);
    }
    if (!app.Visible) { app.Visible = true; }
    if (app.Workbooks.Count === 0) { app.Workbooks.Add(); }
    this.app = app;
  };

  var prototypeAccessors$2 = { activeBook: { configurable: true },activeSheet: { configurable: true },activeCell: { configurable: true },selection: { configurable: true },books: { configurable: true } };

  prototypeAccessors$2.activeBook.get = function () {
    return this.app.ActiveWorkBook;
  };

  prototypeAccessors$2.activeSheet.get = function () {
    return this.app.ActiveSheet;
  };

  prototypeAccessors$2.activeCell.get = function () {
    return this.app.ActiveCell;
  };

  prototypeAccessors$2.selection.get = function () {
    return this.app.Selection;
  };

  prototypeAccessors$2.books.get = function () {
    return this.app.WorkBooks;
  };

  Excel.prototype.close = function close () {
    this.app && this.app.Quit();
    this.app = null;
  };

  Excel.prototype.getBook = function getBook (name) {
    return name ? this.app.WorkBooks(name) : this.activeBook;
  };

  Excel.prototype.getSheet = function getSheet (sheetName, bookName) {
    return sheetName
      ? this.getBook(bookName).Sheets(sheetName)
      : this.activeSheet;
  };

  Excel.prototype.range = function range (addr) {
    return addr ? this.app.Range(addr) : this.selection;
  };

  Excel.prototype.getRange = function getRange (strRange, sheetName, bookName) {
    return strRange
      ? this.getSheet(sheetName, bookName).Range(strRange)
      : this.selection;
  };

  Excel.prototype.cell = function cell (row, col) {
    return row && col ? this.app.Cells(row, col) : this.activeCell;
  };

  Excel.prototype.getCell = function getCell (row, col, sheetName, bookName) {
    return row && col
      ? this.getSheet(sheetName, bookName).Cells(row, col)
      : this.activeCell;
  };

  Excel.prototype.getBooks = function getBooks () {
    return map(this.books);
  };

  Excel.prototype.openBook = function openBook (path) {
    if (!isfile(path)) { return null; }
    var target = find$1(this.books, function (book) { return book.Name == basename(path); });
    return target ? target : this.books.Open(path);
  };

  Excel.prototype.newBook = function newBook () {
    return this.books.add();
  };

  Excel.prototype.getSheets = function getSheets (book) {
    return map(this.getBook(book).Sheets);
  };

  Excel.prototype.findBook = function findBook (pattern) {
    var isMatch = matcher$1(pattern);
    return isMatch && find$1(this.books, isMatch);
  };

  Excel.prototype.findSheet = function findSheet (pattern, _book) {
    var book, isMatch;
    if (_book) {
      book = this.findBook(_book);
      if (!book) { book = _book; }
    } else {
      book = this.activeBook;
    }
    isMatch = matcher$1(pattern);
    return isMatch && find$1(book.Sheets, isMatch);
  };

  Excel.prototype.getValues = function getValues (range) {
    var rowNo,
      tbl = [],
      rowData;
    each(range, function (r) {
      if (rowNo != r.Row) {
        if (rowData) { tbl.push(rowData); }
        rowData = [];
        rowNo = r.Row;
      }
      rowData.push(r.value);
    });
    if (rowData) { tbl.push(rowData); }
    return tbl;
  };

  Excel.prototype.setValues = function setValues (range, vals) {
    if (isArray(vals)) {
      each(vals, function (val) {
        if (isArray(val)) {
          each(val, function (it, i) {
            range.offset(0, i).value = it;
          });
        } else {
          range.value = val;
        }
        range = range.offset(1, 0);
      });
    }
  };

  Excel.prototype.no_update = function no_update (cb) {
    try {
      this.app.ScreenUpdating = false;
      cb();
    } finally {
      this.app.ScreenUpdating = true;
    }
  };

  Excel.prototype.update = function update (cb) {
    try {
      this.app.ScreenUpdating = true;
      cb();
    } finally {
      this.app.ScreenUpdating = false;
    }
  };

  Object.defineProperties( Excel.prototype, prototypeAccessors$2 );

  Excel.xldown = -4121;
  Excel.xlToLeft = -4159;
  Excel.xlToRight = -4161;
  Excel.xlup = -4162;

  var excel = /*#__PURE__*/Object.freeze({
    'default': Excel
  });

  function getWindows() {
    var wins = [];
    each(__ShellApp.Windows(), function (app) {
      if (app && app.Name === 'Internet Explorer') {
        wins.push(app);
      }
    });
    return wins;
  }

  function getActive() {
    var ie;
    each(__ShellApp.Windows(), function (app) {
      if (app && app.Name === 'Internet Explorer' && !app.Document.hidden) {
        ie = app;
        return false;
      }
    });
    return ie;
  }

  function getIE() {
    var ie;
    each(__ShellApp.Windows(), function (app) {
      if (app && app.Name === 'Internet Explorer') {
        ie = app;
        return false;
      }
    });
    return ie;
  }

  function wait(ie, timeout) {
    var elapsed = 0;
    timeout || (timeout = 5000);
    while (ie.Busy || ie.ReadyState !== 4) {
      if (elapsed >= timeout) {
        throw new Error('IE timeout');
      }
      elapsed += 100;
      process.sleep(100);
    }
  }

  var IE_OPTIONS = [
    'AddressBar',
    'FullScreen',
    'Width',
    'Height',
    'Top',
    'Left',
    'MenuBar',
    'Resizable',
    'Silent',
    'StatusBar',
    'ToolBar',
    'Visible'
  ].reduce(function (memo, it) {
    memo[it] = it;
    memo[it.toLowerCase()] = it;
    return memo;
  }, {});

  function open(url, options) {
    var ie = new ActiveXObject('InternetExplorer.Application');
    options || (options = {});
    each(options, function (v, k) {
      var prop = IE_OPTIONS[k];
      if (prop) { ie[prop] = v; }
    });
    if (!has$1(options, 'visible') && !has$1(options, 'Visible')) {
      ie.Visible = true;
    }
    ie.Navigate(url || 'about:blank');
    wait(ie, options.timeout);
    return ie;
  }

  var ie = /*#__PURE__*/Object.freeze({
    getWindows: getWindows,
    getActive: getActive,
    getIE: getIE,
    wait: wait,
    open: open
  });

  var APP_ID$1 = 'Outlook.Application';
  var olMailItem = 0;

  var OUTLOOK_PROTO = {
    createMail: function(options) {
      var item = this.app.CreateItem(olMailItem);
      if (options) {
        each(options, function (value, key) {
          item[key] = value;
        });
      }
      item.Display();
      return item;
    }
  };

  var OUTLOOK_PROPS = {
    app: { value: null, writable: true }
  };

  function Outlook() {
    var app;
    try {
      app = GetObject('', APP_ID$1);
    } catch (e) {
      app = new ActiveXObject(APP_ID$1);
    }
    var ol = Object.create(OUTLOOK_PROTO, OUTLOOK_PROPS);
    ol.app = app;
    return ol;
  }

  var outlook = /*#__PURE__*/Object.freeze({
    'default': Outlook
  });

  /* CursorLocationEnum */
  var adUseClient = 3;
  var adUseNone = 1;
  var adUseServer = 2;
  /* LockTypeEnum */
  var adLockUnspecified = -1;
  var adLockReadOnly = 1;
  var adLockPessimistic = 2;
  var adLockOptimistic = 3;
  var adLockBatchOptimistic = 4;
  /* CursorTypeEnum */
  var adOpenUnspecified = -1;
  var adOpenForwardOnly = 0;
  var adOpenKeyset = 1;
  var adOpenDynamic = 2;
  var adOpenStatic = 3;
  /* DataTypeEnum */
  var adBigInt = 20;
  var adBinary$1 = 128;
  var adBoolean = 11;
  var adChar = 129;
  var adCurrency = 6;
  var adDate = 7;
  var adDBDate = 133;
  var adDBTime = 134;
  var adDBTimeStamp = 135;
  var adDecimal = 14;
  var adDouble = 5;
  var adGUID = 72;
  var adIDispatch = 9;
  var adInteger = 3;
  var adLongVarBinary = 205;
  var adLongVarChar = 201;
  var adLongVarWChar = 203;
  var adNumeric = 131;
  var adSingle = 4;
  var adSmallInt = 2;
  var adUnsignedTinyInt = 17;
  var adVarBinary = 204;
  var adVarChar = 200;
  var adVariant = 12;
  var adVarWChar = 202;
  var adWChar = 130;
  /* ParameterDirectionEnum */
  var adParamUnknown = 0;
  var adParamInput = 1;
  var adParamOutput = 2;
  var adParamInputOutput = 3;
  var adParamReturnValue = 4;
  /* SchemaEnum */
  var adSchemaTables = 20;
  var adSchemaColumns = 4;

  var Adodb = function Adodb() {
    this.conn = new ActiveXObject('ADODB.Connection');
  };

  Adodb.prototype.close = function close () {
    this.conn && this.conn.State != 0 && this.conn.Close();
    this.conn = null;
  };

  Adodb.prototype.begin = function begin () {
    this.conn.BeginTrans();
  };

  Adodb.prototype.commit = function commit () {
    this.conn.CommitTrans();
  };

  Adodb.prototype.rollback = function rollback () {
    this.conn.RollbackTrans();
  };

  Adodb.prototype.getOptions = function getOptions (args) {
    if (typeof args[0] === 'object' && args[0]._is_options) { return args[0]; }
    var i = -1,
      len = args.length,
      arg,
      op = { _is_options: true };
    while (++i < len) {
      arg = args[i];
      switch (typeOf(arg)) {
        case 'string':
          op.sql = arg;
          break;
        case 'array':
        case 'object':
          op.params = arg;
          break;
        case 'boolean':
          op.prepared = arg;
          break;
        case 'function':
          op.callback = arg;
          break;
      }
    }
    return op;
  };

  Adodb.prototype.getDataTypeMapping = function getDataTypeMapping () {
    return {
      string: adVarWChar,
      int: adSmallInt,
      decimal: adDouble,
      boolean: adBoolean,
      date: adDate,
      buffer: adBinary$1,
      null: adVarWChar,
      undefined: adVarWChar
    };
  };

  Adodb.prototype.createParams = function createParams (opts) {
    var cmdobj = opts.cmd,
      params = opts.params;
    if (!cmdobj || !params) { return; }
    var jsType,
      tp,
      size = 10,
      dtmap = this.getDataTypeMapping();
    each(params, function (value, name) {
      jsType = typeOf(value);
      if (jsType == 'string') {
        tp = dtmap['string'];
        size = tp === adVariant ? value.length * 2 : value.length;
      } else if (jsType == 'number') {
        tp = isInteger(value) ? dtmap['int'] : dtmap['decimal'];
      } else if (has(dtmap, jsType)) {
        tp = dtmap[jsType];
      } else {
        throw new Error('Adodb.createParams: unexpected type ' + jsType);
      }
      var paramobj = cmdobj.CreateParameter(
        name,
        tp,
        adParamInput,
        size,
        value
      );
      cmdobj.Parameters.Append(paramobj);
    });
  };

  Adodb.prototype.execute = function execute () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    var op = this.getOptions(args);
    try {
      var cmd = new ActiveXObject('ADODB.Command');
      cmd.ActiveConnection = this.conn;
      cmd.CommandType = 1; /*text*/
      cmd.Prepared = op.prepared || false;
      cmd.CommandText = op.sql;
      op.cmd = cmd;
      this.createParams(op);
      return cmd.Execute();
    } catch (e) {
      e.sql = op.sql;
      throw e;
    }
  };

  Adodb.prototype.select = function select () {
      var args = [], len$1 = arguments.length;
      while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];

    var rs,
      row,
      i,
      len,
      op = this.getOptions(args);
    try {
      rs = this.execute(op);
      while (!rs.EOF) {
        row = {};
        if (len == null) { len = rs.Fields.Count; }
        for (i = 0; i < len; i++) {
          row[rs.Fields(i).Name] = this.getFieldValue(rs.Fields(i));
        }
        if (op.callback(row) === false) { break; }
        rs.MoveNext();
      }
    } catch (e) {
      e.sql = op.sql;
      throw e;
    } finally {
      rs && rs.State != 0 && rs.Close();
    }
  };

  Adodb.prototype.getFieldValue = function getFieldValue (field) {
    switch (field.Type) {
      case adBinary$1:
      case adVarBinary:
        return '[LOB]';
      case adDate:
      case adDBDate:
      case adDBTime:
      case adDBTimeStamp:
        return new Date(field.value);
      default:
        return field.value;
    }
  };

  Adodb.prototype.eachRow = function eachRow () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    var op = this.getOptions(args);
    this.select(op);
  };

  Adodb.prototype.firstRow = function firstRow () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    var op = this.getOptions(args),
      _row;
    op.callback = function (row) { return ((_row = row), false); };
    this.select(op);
    return _row;
  };

  Adodb.prototype.rows = function rows () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    var op = this.getOptions(args),
      rows = [];
    op.callback = function (row) {
      rows.push(row);
    };
    this.select(op);
    return rows;
  };

  Adodb.prototype.batch = function batch (cmd, fn) {
    var conn, rs;
    try {
      conn = this.conn;
      rs = new ActiveXObject('ADODB.Recordset');
      rs.CursorLocation = adUseClient;
      rs.LockType = adLockBatchOptimistic;
      rs.CursorType = adOpenDynamic;
      rs.Open(cmd, conn);
      fn(rs);
    } finally {
      rs && rs.State != 0 && rs.Close();
    }
  };

  Adodb.prototype.setFieldValue = function setFieldValue (field, value) {
    switch (typeOf(value)) {
      case 'date':
        field.Value = formatDate(value);
        break;
      case 'string':
      case 'number':
        field.Value = value;
        break;
      default:
        field.Value = String(value);
        break;
    }
  };

  Adodb.prototype.batch_insert = function batch_insert (cmd, rows) {
    var self = this;
    this.batch(cmd, function (rs) {
      each(rows, function (row) {
        rs.AddNew();
        each(row, function (v, k) {
          self.setFieldValue(rs.Fields(k), v);
        });
      });
      rs.UpdateBatch();
    });
  };

  Adodb.prototype.tableExists = function tableExists (tableName) {
    var conn,
      rs,
      result = false,
      params = [null, null, tableName, 'TABLE'];
    try {
      conn = this.conn;
      rs = conn.OpenSchema(adSchemaTables, params);
      if (!rs.EOF) { result = true; }
    } catch (e) {
      throw e;
    } finally {
      rs && rs.State != 0 && rs.Close();
    }
    return result;
  };

  Adodb.prototype.getTables = function getTables () {
    var conn,
      rs,
      result = [],
      count = 0;
    try {
      conn = this.conn;
      rs = conn.OpenSchema(adSchemaTables);
      while (!rs.EOF) {
        if (rs.Fields('TABLE_TYPE').Value === 'TABLE') {
          result[count++] = rs.Fields('TABLE_NAME').Value;
        }
        rs.MoveNext();
      }
    } catch (e) {
      throw e;
    } finally {
      rs && rs.State != 0 && rs.Close();
    }
    return result;
  };

  function formatDate(d) {
    return (
      d.getFullYear() +
      '/' +
      (d.getMonth() + 1) +
      '/' +
      d.getDate() +
      ' ' +
      d.getHours() +
      ':' +
      d.getMinutes() +
      ':' +
      d.getSeconds()
    );
  }

  var adodb = /*#__PURE__*/Object.freeze({
    adUseClient: adUseClient,
    adUseNone: adUseNone,
    adUseServer: adUseServer,
    adLockUnspecified: adLockUnspecified,
    adLockReadOnly: adLockReadOnly,
    adLockPessimistic: adLockPessimistic,
    adLockOptimistic: adLockOptimistic,
    adLockBatchOptimistic: adLockBatchOptimistic,
    adOpenUnspecified: adOpenUnspecified,
    adOpenForwardOnly: adOpenForwardOnly,
    adOpenKeyset: adOpenKeyset,
    adOpenDynamic: adOpenDynamic,
    adOpenStatic: adOpenStatic,
    adBigInt: adBigInt,
    adBinary: adBinary$1,
    adBoolean: adBoolean,
    adChar: adChar,
    adCurrency: adCurrency,
    adDate: adDate,
    adDBDate: adDBDate,
    adDBTime: adDBTime,
    adDBTimeStamp: adDBTimeStamp,
    adDecimal: adDecimal,
    adDouble: adDouble,
    adGUID: adGUID,
    adIDispatch: adIDispatch,
    adInteger: adInteger,
    adLongVarBinary: adLongVarBinary,
    adLongVarChar: adLongVarChar,
    adLongVarWChar: adLongVarWChar,
    adNumeric: adNumeric,
    adSingle: adSingle,
    adSmallInt: adSmallInt,
    adUnsignedTinyInt: adUnsignedTinyInt,
    adVarBinary: adVarBinary,
    adVarChar: adVarChar,
    adVariant: adVariant,
    adVarWChar: adVarWChar,
    adWChar: adWChar,
    adParamUnknown: adParamUnknown,
    adParamInput: adParamInput,
    adParamOutput: adParamOutput,
    adParamInputOutput: adParamInputOutput,
    adParamReturnValue: adParamReturnValue,
    adSchemaTables: adSchemaTables,
    adSchemaColumns: adSchemaColumns,
    Adodb: Adodb
  });

  var AccDB = /*@__PURE__*/(function (Adodb) {
    function AccDB(path) {
      if (!isAbsolute(path)) {
        path = normalize(path);
      }
      if (!isfile(path)) {
        var app = new ActiveXObject('Access.Application');
        app.NewCurrentDatabase(path);
      }
      Adodb.call(this);
      this.conn.ConnectionString = "Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" + path;
      this.conn.Open();
    }

    if ( Adodb ) AccDB.__proto__ = Adodb;
    AccDB.prototype = Object.create( Adodb && Adodb.prototype );
    AccDB.prototype.constructor = AccDB;

    return AccDB;
  }(Adodb));

  function accdb(pth) {
    return new AccDB(pth);
  }

  var accdb$1 = /*#__PURE__*/Object.freeze({
    AccDB: AccDB,
    'default': accdb
  });

  var CsvDB = /*@__PURE__*/(function (Adodb) {
    function CsvDB(path, hasHeader) {
      if (!isAbsolute(path)) {
        path = normalize(path);
      }
      if (isfile(path)) { path = dirname(path); }
      var hdr =
        hasHeader == null || hasHeader == true || hasHeader == 'YES'
          ? 'YES'
          : 'NO';
      Adodb.call(this);
      this.conn.ConnectionString = "Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" + path + ";Extended Properties=\"Text;HDR=" + hdr + ";FMT=Delimited\"";
      this.conn.Open();
    }

    if ( Adodb ) CsvDB.__proto__ = Adodb;
    CsvDB.prototype = Object.create( Adodb && Adodb.prototype );
    CsvDB.prototype.constructor = CsvDB;

    return CsvDB;
  }(Adodb));

  function csvdb(path, hasHeader) {
    return new CsvDB(path, hasHeader);
  }

  var csvdb$1 = /*#__PURE__*/Object.freeze({
    CsvDB: CsvDB,
    'default': csvdb
  });

  var EXCEL_TYPE = {
    xls: 'Excel 8.0',
    xlsx: 'Excel 12.0 Xml',
    xlsb: 'Excel 12.0',
    xlsm: 'Excel 12.0 Macro'
  };

  var ExcelDB = /*@__PURE__*/(function (Adodb) {
    function ExcelDB(path, hasHeader) {
      if (!isAbsolute(path)) {
        path = normalize(path);
      }
      var ext = extname(path).toLowerCase();
      var hdr =
        hasHeader == null || hasHeader == true || hasHeader == 'YES'
          ? 'YES'
          : 'NO';
      if (!EXCEL_TYPE[ext]) { throw new Error(ext + ' file is not supported'); }
      Adodb.call(this);
      this.conn.ConnectionString = "Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" + path + ";Extended Properties=\"" + (EXCEL_TYPE[ext]) + ";HDR=" + hdr + "\"";
      this.conn.Open();
    }

    if ( Adodb ) ExcelDB.__proto__ = Adodb;
    ExcelDB.prototype = Object.create( Adodb && Adodb.prototype );
    ExcelDB.prototype.constructor = ExcelDB;

    return ExcelDB;
  }(Adodb));

  function exceldb(path, hasHeader) {
    return new ExcelDB(path, hasHeader);
  }

  var exceldb$1 = /*#__PURE__*/Object.freeze({
    ExcelDB: ExcelDB,
    'default': exceldb
  });

  var OracleDB = /*@__PURE__*/(function (Adodb) {
    function OracleDB(ds, usr, pass) {
      try {
        Adodb.call(this);
        this.conn.ConnectionString =
          // = `Provider=OraOLEDB.Oracle;Data Source=${ds};User ID=${usr};Password=${pass}`;
          "Provider=MSDAORA;Data Source=" + ds + ";User ID=" + usr + ";Password=" + pass;
        this.conn.Open();
      } catch (e) {
        console.log('Database connect failed.');
        console.log(
          'datasource: %s\n    userid: %s\n  password: %s',
          ds,
          usr,
          pass
        );
        throw e;
      }
    }

    if ( Adodb ) OracleDB.__proto__ = Adodb;
    OracleDB.prototype = Object.create( Adodb && Adodb.prototype );
    OracleDB.prototype.constructor = OracleDB;

    OracleDB.prototype.getDataTypeMapping = function getDataTypeMapping () {
      return {
        string: adVariant,
        int: adInteger,
        decimal: adNumeric,
        boolean: adBoolean,
        date: adDBTimeStamp,
        buffer: adBinary,
        null: adVariant,
        undefined: adVariant
      };
    };

    OracleDB.prototype.tableExists = function tableExists (tableName) {
      var row = this.firstRow('select 1 from user_tables where table_name = ?', [
        tableName
      ]);
      return row != null;
    };

    OracleDB.prototype.getTables = function getTables () {
      var rows = this.rows('select table_name from user_tables');
      return rows.map(function (it) { return it.TABLE_NAME; });
    };

    return OracleDB;
  }(Adodb));

  function oracledb(ds, usr, pass) {
    return new OracleDB(ds, usr, pass);
  }

  // OraOLEDB

  var _vbs$1, _session;

  var Oo4o = /*@__PURE__*/(function (Adodb) {
    function Oo4o(ds, user, pass) {
      Adodb.call(this);
      this.dataBase = this.session.OpenDatabase(ds, user + '/' + pass, 0);
    }

    if ( Adodb ) Oo4o.__proto__ = Adodb;
    Oo4o.prototype = Object.create( Adodb && Adodb.prototype );
    Oo4o.prototype.constructor = Oo4o;

    var prototypeAccessors = { vbs: { configurable: true },session: { configurable: true } };

    prototypeAccessors.vbs.get = function () {
      if (!_vbs$1) {
        _vbs$1 = __VBS;
        _vbs$1.AddCode("\nFunction ReadBlob(field)\n  Dim buf()\n  field.GetChunkByteEx buf, 0, field.FieldSize()\n  ReadBlob = buf\nEnd Function\n\nFunction ReadClob(field)\n  Dim buf\n  field.Value.Read buf\n  ReadClob = buf\nEnd Function\n      ");
      }
      return _vbs$1.CodeObject;
    };

    prototypeAccessors.session.get = function () {
      if (!_session) {
        _session = new ActiveXObject('OracleInProcServer.XOraSession');
      }
      return _session;
    };

    Oo4o.prototype.close = function close () {
      this.dataBase.Close();
      this.dataBase = null;
      _session = null;
    };

    Oo4o.prototype.begin = function begin () {
      this.session.BeginTrans();
    };

    Oo4o.prototype.commit = function commit () {
      this.session.CommitTrans();
    };

    Oo4o.prototype.rollback = function rollback () {
      this.session.Rollback();
    };

    Oo4o.prototype.getDataTypeMapping = function getDataTypeMapping () {
      return {
        string: 1,
        int: 2,
        decimal: 2,
        number: 2,
        boolean: 1,
        date: 12,
        buffer: 113,
        null: 1,
        undefined: 1
      };
    };

    Oo4o.prototype.createParams = function createParams (opts) {
      var params = opts.params,
        self = this;
      if (!params) { return; }
      var dtmap = this.getDataTypeMapping();
      each(params, function (v, k) {
        var type = dtmap[typeOf(v)] || 1;
        self.dataBase.Parameters.Add(String(k), v, 1, type);

        if (isArray(params) && opts.sql.includes('?')) {
          var index = 0;
          opts.sql = opts.sql.replace(/\?/g, function () {
            return ':' + index++;
          });
        }
      });
    };

    Oo4o.prototype.removeParams = function removeParams (opts) {
      var params = opts.params,
        self = this;
      if (!params) { return; }
      each(params, function (v, k) {
        self.dataBase.Parameters.Remove(String(k));
      });
    };

    Oo4o.prototype.execute = function execute () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var opts = this.getOptions(args);
      try {
        this.createParams(opts);
        return this.dataBase.ExecuteSQL(opts.sql);
      } catch (e) {
        e.sql = opts.sql;
        throw e;
      } finally {
        this.removeParams(opts);
      }
    };

    Oo4o.prototype.select = function select () {
      var args = [], len$1 = arguments.length;
      while ( len$1-- ) args[ len$1 ] = arguments[ len$1 ];

      var rs,
        row,
        i,
        len,
        opts = this.getOptions(args);
      try {
        this.createParams(opts);
        rs = this.dataBase.CreateDynaset(opts.sql, 0);
        while (!rs.EOF) {
          row = {};
          if (len == null) { len = rs.Fields.Count; }
          for (i = 0; i < len; i++) {
            row[rs.Fields(i).Name] = this.getFieldValue(rs.Fields(i));
          }
          if (opts.callback(row) === false) { break; }
          rs.MoveNext();
        }
      } catch (e) {
        e.sql = opts.sql;
        throw e;
      } finally {
        this.removeParams(opts);
        rs && rs.Close();
      }
    };

    Oo4o.prototype.getFieldValue = function getFieldValue (field) {
      switch (field.OraIDataType) {
        case 2:
        case 8:
          return Number(field.value);
        case 112:
          return this.vbs.ReadClob(field);
        case 113:
          return Buffer.from(this.vbs.ReadBlob(field));
        case 12:
        case 187:
        case 188:
        case 232:
          return new Date(field.value);
        default:
          return field.value;
      }
    };

    Oo4o.prototype.batch = function batch () {};

    Oo4o.prototype.batch_insert = function batch_insert (cmd, rows) {
      var self = this;
      var rs = this.dataBase.CreateDynaset(cmd, 0);
      try {
        this.begin();
        each(rows, function (row) {
          rs.AddNew();
          each(row, function (v, k) {
            self.setFieldValue(rs.Fields(k), v);
          });
          rs.Update();
        });
        this.commit();
      } catch (e) {
        this.rollback();
        throw e;
      } finally {
        rs && rs.Close();
      }
    };

    Object.defineProperties( Oo4o.prototype, prototypeAccessors );

    return Oo4o;
  }(Adodb));

  function oo4o(ds, user, pass) {
    return new Oo4o(ds, user, pass);
  }

  var oracledb$1 = /*#__PURE__*/Object.freeze({
    OracleDB: OracleDB,
    'default': oracledb,
    Oo4o: Oo4o,
    oo4o: oo4o
  });

  var _service;

  function getService() {
    if (!_service) {
      var locator = new ActiveXObject('WbemScripting.SWbemLocator');
      _service = locator.ConnectServer('.', 'root\\CIMV2');
    }
    return _service;
  }

  function get$1(cmd) {
    return getService().Get(cmd);
  }

  function exec$1(wql) {
    return getService().ExecQuery(wql);
  }

  function query(wql) {
    var rs = exec$1(wql);
    var rows = map(rs, function (record) {
      return reduce(
        record.Properties_,
        function (rowData, prop) {
          if (prop.Value != null) {
            rowData[prop.name] = prop.IsArray
              ? new VBArray(prop.Value).toArray()
              : prop.Value;
          }
          return rowData;
        },
        {}
      );
    });
    rs = null;
    return rows;
  }

  function eachRow(wql, cb) {
    var rs = exec$1(wql);
    each(rs, function (it) { return cb(it); });
    rs = null;
  }

  function firstRow(wql) {
    var obj;
    var rs = exec$1(wql);
    each(rs, function (it) {
      obj = it;
      return false;
    });
    rs = null;
    return obj;
  }

  function cpu() {
    return query('select * from Win32_Processor')[0];
  }

  function sys() {
    return query('select * from Win32_ComputerSystem')[0];
  }

  function os() {
    return query('select * from Win32_OperatingSystem')[0];
  }

  function shutdown(forced) {
    return firstRow('select * from Win32_OperatingSystem').Win32Shutdown(
      1 + (forced ? 4 : 0)
    );
  }

  function logoff(forced) {
    return firstRow('select * from Win32_OperatingSystem').Win32Shutdown(
      0 + (forced ? 4 : 0)
    );
  }

  function restart(forced) {
    return firstRow('select * from Win32_OperatingSystem').Win32Shutdown(
      2 + (forced ? 4 : 0)
    );
  }

  function poweroff(forced) {
    return firstRow('select * from Win32_OperatingSystem').Win32Shutdown(
      8 + (forced ? 4 : 0)
    );
  }

  function ps(l) {
    var props = ['ProcessId', 'Caption'];
    if (l) { props.push('ParentProcessId', 'CreationDate', 'CommandLine'); }
    return map(exec$1('select * from Win32_Process'), function (it) {
      return reduce(props, function (row, name) { return ((row[name] = it[name]), row); }, {});
    });
  }

  function kill(arg) {
    var wql = 'select * from Win32_Process';
    if (isString(arg)) { wql += " where Caption='" + arg + "'"; }
    else if (isNumber(arg)) { wql += " where ProcessId=" + arg; }
    else { return -1; }
    return firstRow(wql).Terminate();
  }

  function env() {
    return reduce(
      exec$1('select * from Win32_Environment'),
      function (result, it) { return ((result[it.Name] = it.VariableValue), result); },
      {}
    );
  }

  var wmi = /*#__PURE__*/Object.freeze({
    get: get$1,
    exec: exec$1,
    query: query,
    eachRow: eachRow,
    firstRow: firstRow,
    cpu: cpu,
    sys: sys,
    os: os,
    shutdown: shutdown,
    logoff: logoff,
    restart: restart,
    poweroff: poweroff,
    ps: ps,
    kill: kill,
    env: env
  });

  var REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})[-/]?(\d{1,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?\.?(\d{1,3})?$/;
  var REGEX_FORMAT = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;
  var MS = 'millisecond';
  var S = 'second';
  var MIN = 'minute';
  var H = 'hour';
  var D = 'day';
  var W = 'week';
  var M = 'month';
  var Q = 'quarter';
  var Y = 'year';
  var DATE = 'date';
  var FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';
  var INVALID_DATE_STRING = 'Invalid Date';

  var Ls = {
    en: {
      name: 'en',
      weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
        '_'
      ),
      months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
        '_'
      )
    }
  };
  var L = 'en';

  function parseLocale(preset, object, isLocal) {
    var l;
    if (!preset) { return null; }
    if (isString(preset)) {
      if (Ls[preset]) {
        l = preset;
      }
      if (object) {
        Ls[preset] = object;
        l = preset;
      }
    } else {
      var name = preset.name;
      Ls[name] = preset;
      l = name;
    }
    if (!isLocal) { L = l; }
    return l;
  }

  function isDayjs(date) {
    return date instanceof Dayjs;
  }

  function dayjs(date, cfg) {
    if (isDayjs(date)) { return date.clone(); }
    var _cfg = { date: date };
    if (isString(cfg)) {
      _cfg.format = cfg;
    } else if (isObjectLike(cfg)) {
      extend(_cfg, cfg);
    }
    return new Dayjs(_cfg);
  }

  function Dayjs(cfg) {
    this.$L = parseLocale(cfg.locale, null, true) || L;
    this.parse(cfg);
  }

  var _proto = Dayjs.prototype;

  _proto.parse = function(cfg) {
    this.$d = parseDate(cfg);
    this.init();
  };

  function parseDate(cfg) {
    var date = cfg.date,
      utc = cfg.utc;
    if (date == null) { return new Date(); }
    if (isDate(date)) { return new Date(date); }
    if (isString(date) && !/Z$/i.test(date)) {
      var m = date.match(REGEX_PARSE);
      if (m) {
        if (utc) {
          return new Date(
            Date.UTC(
              m[1],
              m[2] - 1,
              m[3],
              m[4] || 0,
              m[5] || 0,
              m[6] || 0,
              m[7] || 0
            )
          );
        }
        return new Date(
          m[1],
          m[2] - 1,
          m[3],
          m[4] || 0,
          m[5] || 0,
          m[6] || 0,
          m[7] || 0
        );
      }
    }
    return new Date(date);
  }

  _proto.init = function() {
    var $d = this.$d;
    extend(this, {
      $y: $d.getFullYear(),
      $M: $d.getMonth(),
      $D: $d.getDate(),
      $W: $d.getDay(),
      $H: $d.getHours(),
      $m: $d.getMinutes(),
      $s: $d.getSeconds(),
      $ms: $d.getMilliseconds()
    });
  };

  _proto.isValid = function() {
    return this.$d.toString() !== INVALID_DATE_STRING;
  };

  _proto.isSame = function(that, units) {
    var other = dayjs(that);
    return this.startOf(units) <= other && other <= this.endOf(units);
  };

  _proto.isAfter = function(that, units) {
    return dayjs(that) < this.startOf(units);
  };

  _proto.isBefore = function(that, units) {
    return this.endOf(units) < dayjs(that);
  };

  each(
    {
      $y: Y,
      $M: M,
      $W: D,
      $D: DATE,
      $H: H,
      $m: MIN,
      $s: S,
      $ms: MS
    },
    function (unit, prop) {
      _proto[unit] = function(input) {
        return input == null ? this[prop] : this.clone().$set(unit, input);
      };
    }
  );

  _proto.valueOf = function() {
    return this.$d.getTime();
  };

  function prettyUnit(u) {
    var special = {
      M: M,
      y: Y,
      w: W,
      d: D,
      h: H,
      m: MIN,
      s: S,
      ms: MS,
      Q: Q
    };
    return (
      special[u] ||
      String(u || '')
        .toLowerCase()
        .replace(/s$/, '')
    );
  }

  _proto.startOf = function(units, _startOf) {
    // startOf -> endOf
    var isStartOf = _startOf == null ? true : _startOf;
    var unit = prettyUnit(units);
    var $M = this.$M,
      $W = this.$W,
      $D = this.$D;
    var clone = this.clone();

    switch (unit) {
      case Y:
        return clone.$$set(isStartOf ? { M: 0, date: 1 } : { M: 11, date: 31 });
      case M:
        return clone.$$set(
          isStartOf ? { M: $M, date: 1 } : { M: $M + 1, date: 0 }
        );
      case D:
      case DATE:
        return clone.$set(H, isStartOf ? 0 : 23);
      case H:
        return clone.$set(MIN, isStartOf ? 0 : 59);
      case MIN:
        return clone.$set(S, isStartOf ? 0 : 59);
      case S:
        return clone.$set(MS, isStartOf ? 0 : 999);
      case W: {
        var weekStart = this.$locale().weekStart || 0;
        var gap = ($W < weekStart ? $W + 7 : $W) - weekStart;
        return clone.$set(DATE, isStartOf ? $D - gap : $D + (6 - gap));
      }
      default:
        return clone;
    }
  };

  _proto.endOf = function(units) {
    return this.startOf(units, false);
  };

  var UNIT_METHOD = fromPairs([
    [D, 'Date'],
    [DATE, 'Date'],
    [M, 'Month'],
    [Y, 'FullYear'],
    [H, 'Hours'],
    [MIN, 'Minutes'],
    [S, 'Seconds'],
    [MS, 'Milliseconds']
  ]);

  function _set(self, units, _int) {
    var unit = prettyUnit(units);
    var utcPad = 'set' + (self.$u ? 'UTC' : '');
    var name = UNIT_METHOD[unit];
    var arg = unit == D ? self.$D + (_int - self.$W) : _int;

    if (name) {
      if (unit == M || unit == Y) {
        var _d = self.toDate();
        _d.setDate(1);
        _d[utcPad + name](arg);
        _d.setMonth(_d.getMonth() + 1);
        _d.setDate(0);
        var _lastDate = _d.getDate();
        if (self.$D < _lastDate) {
          _d.setDate(self.$D);
        }
        self.$d = _d;
      } else {
        self.$d[utcPad + name](arg);
      }
    }
  }

  _proto.$set = function(units, _int) {
    _set(this, units, _int);
    this.init();
    return this;
  };

  _proto.$$set = function(options) {
    var self = this;
    each(options, function (_int, units) {
      _set(self, units, _int);
    });
    this.init();
    return this;
  };

  _proto.set = function(unit, _int) {
    var clone = this.clone();
    if (isString(unit)) {
      return clone.$set(unit, _int);
    } else if (isObjectLike(unit)) {
      return clone.$$set(unit);
    }
    return clone;
  };

  _proto.get = function(unit) {
    return this[prettyUnit(unit)]();
  };

  _proto.add = function(n, units) {
    var name = prettyUnit(units);
    var clone = this.clone();
    n = Number(n);
    if (name == W) { return clone.$set(DATE, this.$D + Math.round(n * 7)); }
    else { return clone.$set(name, this[name]() + n); }
  };

  _proto.subtract = function(n, unit) {
    return this.add(n * -1, unit);
  };

  _proto.format = function(fmt) {
    if (!this.isValid()) { return INVALID_DATE_STRING; }
    fmt || (fmt = FORMAT_DEFAULT);
    var $y = this.$y,
      $M = this.$M,
      $D = this.$D,
      $W = this.$W,
      $H = this.$H,
      $m = this.$m,
      $s = this.$s,
      $MS = this.$MS;
    var locale = this.$locale();
    var weekdays = locale.weekdays,
      months = locale.months;
    var tzOffset = this.$d.getTimezoneOffset();
    var tzMinutes = Math.abs(tzOffset);
    var hourOffset = Math.floor(tzMinutes / 60);
    var minOffset = tzMinutes % 60;
    var zoneStr =
      (tzOffset < 0 ? '-' : '+') +
      padStart(hourOffset, 2, '0') +
      ':' +
      padStart(minOffset, 2, '0');
    var self = this;
    var getShort = function(arr, index, full, length) {
      return (
        (arr && (arr[index] || arr(self, fmt))) || full[index].substr(0, length)
      );
    };

    var matches = {
      YY: String($y).slice(-2),
      YYYY: $y,
      M: $M + 1,
      MM: padStart($M + 1, 2, '0'),
      MMM: getShort(locale.monthsShort, $M, months, 3),
      MMMM: months[$M] || (isFunction(months) && months(this, fmt)),
      D: $D,
      DD: padStart($D, 2, '0'),
      d: $W,
      dd: getShort(locale.weekdaysMin, $W, weekdays, 2),
      ddd: getShort(locale.weekdaysShort, $W, weekdays, 3),
      dddd: weekdays[$W],
      H: $H,
      HH: padStart($H, 2, '0'),
      h: $H % 12 || 12,
      hh: padStart($H % 12 || 12, 2, '0'),
      a: $H < 12 ? 'am' : 'pm',
      A: $H < 12 ? 'AM' : 'PM',
      m: $m,
      mm: padStart($m, 2, '0'),
      s: $s,
      ss: padStart($s, 2, '0'),
      SSS: padStart($MS, 3, '0'),
      Z: zoneStr
    };
    return fmt.replace(REGEX_FORMAT, function(m0, m1) {
      return m1 || matches[m0] || zoneStr.replace(':', '');
    });
  };

  _proto.utcOffset = function() {
    return -this.$d.getTimezoneOffset();
  };

  function monthDiff(a, b) {
    var diff = (a.year() - b.year()) * 12 + a.month() - b.month();
    var anchor = b.clone().add(diff, M);
    var c = a - anchor > 0;
    var anchor2 = b.clone().add(diff + (c ? 1 : -1), M);
    return diff + (a - anchor) / (c ? anchor2 - anchor : anchor - anchor2);
  }

  function milliSecondDiff(a, b) {
    return a - b + (a.utcOffset() - b.utcOffset()) * 60000;
  }

  function absFloor(n) {
    return n < 0 ? Math.ceil(n) : Math.floor(n);
  }

  _proto.diff = function(input, units, _float) {
    var unit = prettyUnit(units);
    var that = dayjs(input);
    var result;

    switch (unit) {
      case Y:
        result = monthDiff(this, that) / 12;
        break;
      case M:
        result = monthDiff(this, that);
        break;
      case Q:
        result = monthDiff(this, that) / 3;
        break;
      case W:
        result = milliSecondDiff(this, that) / 604800000;
        break;
      case D:
        result = milliSecondDiff(this, that) / 86400000;
        break;
      case H:
        result = milliSecondDiff(this, that) / 3600000;
        break;
      case MIN:
        result = milliSecondDiff(this, that) / 60000;
        break;
      case S:
        result = milliSecondDiff(this, that) / 1000;
        break;
      default:
        result = milliSecondDiff(this, that);
        break;
    }
    return _float ? result : absFloor(result);
  };

  _proto.daysInMonth = function() {
    return this.endOf(M).$D;
  };

  _proto.$locale = function() {
    return Ls[this.$L];
  };

  _proto.locale = function(preset, object) {
    if (!preset) { return this.$L; }
    var that = this.clone();
    that.$L = parseLocale(preset, object, true);
    return that;
  };

  _proto.clone = function() {
    return dayjs(this.toDate(), {
      locale: this.$L,
      utc: this.$u
    });
  };

  _proto.toDate = function() {
    return new Date(this.$d);
  };

  _proto.toJSON = function() {
    return this.toISOString();
  };

  _proto.toISOString = function() {
    return this.$d.toISOString();
  };

  _proto.toString = function() {
    return this.$d.toUTCString();
  };

  dayjs.prototype = Dayjs.prototype;
  dayjs.isDayjs = isDayjs;
  dayjs.locale = parseLocale;
  dayjs.Ls = Ls;

  dayjs.extend = function(plugin, option) {
    plugin(option, Dayjs, dayjs);
    return dayjs;
  };

  var dayjs$1 = /*#__PURE__*/Object.freeze({
    'default': dayjs
  });

  var Pipe = function Pipe(target) {
    if (this instanceof Pipe) {
      this._target = target;
      this._ = this.pipe;
    } else {
      return new Pipe(target);
    }
  };

  Pipe.prototype.pipe = function pipe (func) {
      var this$1 = this;
      var args = [], len = arguments.length - 1;
      while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    if (isFunction(func)) {
      if (args.length == 0) {
        this._target = func(this._target);
      } else {
        var _args = args.map(function (it) { return (it === Pipe ? this$1._target : it); });
        this._target = func.apply(void 0, _args);
      }
    } else {
      this._target = func;
    }
    return this;
  };

  Pipe.prototype.value = function value () {
    return this._target;
  };

  Pipe.prototype.log = function log (msg) {
    msg ? console.log(msg, this._target) : console.log(this._target);
    return this;
  };

  Pipe.create = Pipe.__ = function(target) {
    return new Pipe(target);
  };

  var pipe = /*#__PURE__*/Object.freeze({
    'default': Pipe
  });

  var JS_TOKENS = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

  function matchToToken(match) {
    var token = { type: 'invalid', value: match[0], closed: undefined };
    if (match[1])
      { (token.type = 'string'), (token.closed = !!(match[3] || match[4])); }
    else if (match[5]) { token.type = 'comment'; }
    else if (match[6]) { (token.type = 'comment'), (token.closed = !!match[7]); }
    else if (match[8]) { token.type = 'regex'; }
    else if (match[9]) { token.type = 'number'; }
    else if (match[10]) { token.type = 'name'; }
    else if (match[11]) { token.type = 'punctuator'; }
    else if (match[12]) { token.type = 'whitespace'; }
    return token;
  }

  function getTokens(src) {
    var tokens = [],
      match,
      token;
    for (;;) {
      match = JS_TOKENS.exec(src);
      if (!match) { break; }
      token = matchToToken(match);
      tokens.push(token);
    }
    return tokens;
  }

  var ESCAPSE_MAP$1 = {
    "'": "'",
    '"': '"',
    '\r': 'r',
    '\n': 'n',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var ESCAPSE_REG$1 = /'|"|\r|\n|\t|\u2028|\u2029]/g;

  function escapeChar$1(c) {
    return '\\' + ESCAPSE_MAP$1[c];
  }

  var SUB_REG = /\$\{((?:[^{}]|\{[^}]*\}?)*)\}?/g;
  var SUB_SEP = '$TMP$';
  var SUB_SEP_REG = /\$TMP\$/g;

  function replTmpStr(token, tokens, index) {
    var str = token.value;
    if (token.type != 'string' || str[0] != '`') { return false; }
    var raw_args = [null];
    str = str.slice(1, str.length - 1);
    str = str.replace(SUB_REG, function(g0, g1) {
      raw_args.push(g1);
      return SUB_SEP;
    });
    var strRaw = index > 2 && tokens[index - 1].value;
    if (strRaw == 'raw') {
      raw_args[0] = JSON.stringify({ raw: str.split(SUB_SEP) });
      token.value = '(' + raw_args.join() + ')';
    } else {
      str = str.replace(ESCAPSE_REG$1, escapeChar$1);
      raw_args[0] = "{raw: ['" + str.replace(SUB_SEP_REG, "','") + "']}";
      token.value = 'String.raw(' + raw_args.join() + ')';
    }
    return true;
  }

  function replArrow(token, tokens, index) {
    if (token.type != 'punctuator' || token.value != '=>') { return false; }
    var i = index,
      len = tokens.length,
      depth = 0,
      hasBracket = false,
      hasThis = false,
      tokenIt;
    while (--i) {
      tokenIt = tokens[i];
      if (tokenIt.type == 'punctuator') {
        switch (tokenIt.value) {
          case ')':
            hasBracket = true;
            depth++;
            break;
          case '(':
            depth--;
            break;
          default:
            if (depth == 0) { depth--; }
        }
      } else if (tokenIt.type == 'name' && tokenIt.value == 'return') {
        depth--;
      }
      if (depth < 0) {
        if (hasBracket) {
          tokenIt.value += ' function';
          token.value = '';
        } else {
          tokenIt.value += ' function(';
          token.value = ')';
        }
        break;
      }
    }
    i = index;
    while (++i < len) {
      tokenIt = tokens[i];
      if (tokenIt.type != 'whitespace') { break; }
    }
    hasBracket = false;
    if (tokenIt.value == '{') { hasBracket = true; }
    i--;
    depth = 0;
    while (++i < len) {
      tokenIt = tokens[i];
      if (tokenIt.type == 'punctuator') {
        switch (tokenIt.value) {
          case '{':
          case '(':
          case '[':
            depth++;
            break;
          case '}':
          case ')':
          case ']':
            depth--;
            break;
          case ',':
          case ';':
            if (depth == 0) { depth--; }
            break;
        }
      } else if (tokenIt.type == 'whitespace') {
        if (depth == 0 && tokenIt.value.includes('\r\n')) {
          depth--;
        }
      } else if (tokenIt.type == 'name') {
        if (tokenIt.value == 'this') { hasThis = true; }
      }
      if (depth < 0) {
        if (hasBracket) {
          if (hasThis) { tokenIt.value = '.bind(this)' + tokenIt.value; }
        } else {
          token.value += '{return ';
          if (hasThis) { tokenIt.value = '}.bind(this)' + tokenIt.value; }
          else { tokenIt.value = '}' + tokenIt.value; }
        }
        break;
      }
    }
    return true;
  }

  function rmComment(token) {
    if (token.type == 'comment') {
      token.value = '';
      return true;
    }
    return false;
  }

  function replImport(token, tokens, index) {
    var importMap = {},
      buf = [],
      inside,
      bAlias,
      type,
      value,
      i,
      len,
      tokenIt,
      name,
      moduleName,
      moduleAlias;
    if (token.type != 'name' || token.value != 'import') { return false; }
    token.value = '';
    i = index;
    len = tokens.length;
    tokenIt = token;
    while (++i < len) {
      tokenIt.value = '';
      tokenIt = tokens[i];
      type = tokenIt.type;
      value = tokenIt.value;
      if (type == 'name') {
        if (value == 'from') {
          continue;
        } else if (value == 'as') {
          bAlias = true;
        } else {
          if (bAlias) {
            importMap[name] = value;
            bAlias = false;
          } else {
            name = value;
            if (inside) {
              importMap[name] = name;
            } else {
              importMap['default'] = name;
            }
          }
        }
      } else if (type == 'punctuator') {
        if (value == '*') {
          name = '*';
          importMap['*'] = 0;
        } else if (value == '{') {
          inside = true;
        } else if (value == '}') {
          inside = false;
        }
      } else if (type == 'string') {
        moduleName = value.slice(1, value.length - 1);
        break;
      }
    }

    moduleAlias = moduleName.replace(/[\\/.-@]/g, '_');
    moduleAlias +=
      '_' +
      Math.random()
        .toString(16)
        .slice(2);
    buf.push(moduleAlias + "=require('" + moduleName + "')");
    if (importMap['*']) {
      buf.push(importMap['*'] + '=' + moduleAlias);
      delete importMap['*'];
    }
    if (importMap['default']) {
      buf.push(importMap['default'] + '=' + moduleAlias + "['default']");
      delete importMap['default'];
    }
    for (name in importMap) {
      buf.push(importMap[name] + '=' + moduleAlias + '.' + name);
    }
    tokenIt.value = 'let ' + buf.join();
    return true;
  }

  function transpile(code) {
    var tokens = getTokens(code),
      token,
      source;
    for (var i = 0, len = tokens.length; i < len; i++) {
      token = tokens[i];
      if (replTmpStr(token, tokens, i)) { continue; }
      if (replArrow(token, tokens, i)) { continue; }
      if (replImport(token, tokens, i)) { continue; }
      rmComment(token);
    }
    source = tokens.map(function (it) { return it.value; }).join('');

    return source;
  }

  var InternalModules = {
    accdb: accdb$1,
    adodb: adodb,
    child_process: child_process,
    crypto: crypto$1,
    csv: csv,
    csvdb: csvdb$1,
    dayjs: dayjs$1,
    excel: excel,
    exceldb: exceldb$1,
    fs: fs,
    http: http$1,
    ie: ie,
    oracledb: oracledb$1,
    outlook: outlook,
    path: Path,
    querystring: querystring,
    tool: tool,
    util: util,
    wmi: wmi,
    pipe: pipe
  };

  window.require = function(name) {
    return InternalModules[name];
  };

  if (process.argv.length === 3) {
    var pth = process.argv[2];
    if (!isAbsolute(pth)) {
      pth = resolve(pth);
    }
    if (!extname(pth)) {
      pth += '.js';
    }
    if (!isfile(pth)) {
      throw new Error("Cannot load file '" + pth + "'");
    }
    var src = readFileSync(pth, 'UTF-8');

    Object.assign(window, {
      __filename: pth,
      __dirname: dirname(pth),
      process: process,
      Buffer: Buffer,
      console: console
    });

    src = transpile(src);
    var script = document.createElement('script');
    script.text = src;
    document.head.appendChild(script);
  }

}());
';
src = window.decodeURIComponent(window.escape(window.atob(src)));

var script = document.createElement('script');
script.text = src;
window.addEventListener('error', function(e) {
  if (e.error) {
    WScript.Echo(e.error.stack);
  } else {
    if (e.message) WScript.Echo(' Error:' + e.message);
    WScript.Echo('  line:', e.lineno);
    WScript.Echo('column:', e.colno);
  }
});
document.head.appendChild(script);
/*
:LBL_END
pause
exit
::*/
