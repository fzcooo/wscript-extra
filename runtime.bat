REM = 0; /*
@echo off
cls
title %~f0
cd %~dp0
if "%PROCESSOR_ARCHITECTURE%" EQU "x86" (
  call cscript.exe "%~f0" //Nologo //E:JScript "%~f0" %*
)
if "%PROCESSOR_ARCHITECTURE%" NEQ "x86" (
  call C:\Windows\SysWOW64\CScript.exe "%~f0" //Nologo //E:JScript "%~f0" %*
)
goto LBL_END
*/
var document = new ActiveXObject('htmlfile');
document.write(
  '<!DOCTYPE html><html><head><meta http-equiv=X-UA-Compatible content="IE=edge"><title></title></head><body></body></html>'
);
var window = document.parentWindow;
window.WScript = WScript;
window.GetObject = GetObject;
window.ActiveXObject = ActiveXObject;

var src = 'KGZ1bmN0aW9uICgpIHsKICAndXNlIHN0cmljdCc7CgogIC8vIE5vZGVKUyBSdW50aW1lDQoNCiAgdmFyIFByb2Nlc3MgPSBmdW5jdGlvbiBQcm9jZXNzKCkgew0KICAgIHRoaXMuX3ZlcnNpb24gPSBudWxsOw0KICAgIHRoaXMuX2FyZ3YgPSBudWxsOw0KICAgIHRoaXMuX2VudiA9IG51bGw7DQogIH07CgogIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHZlcnNpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sYXJndjogeyBjb25maWd1cmFibGU6IHRydWUgfSxlbnY6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTsNCg0KICBQcm9jZXNzLnByb3RvdHlwZS5leGl0ID0gZnVuY3Rpb24gZXhpdCAoc3RhdHVzKSB7CiAgICAgIGlmICggc3RhdHVzID09PSB2b2lkIDAgKSBzdGF0dXMgPSAwOwoNCiAgICBXU2NyaXB0LlF1aXQoc3RhdHVzKTsNCiAgfTsNCg0KICBQcm9jZXNzLnByb3RvdHlwZS5zbGVlcCA9IGZ1bmN0aW9uIHNsZWVwIChtaWxsaXMpIHsNCiAgICBXU2NyaXB0LlNsZWVwKG1pbGxpcyk7DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzLnZlcnNpb24uZ2V0ID0gZnVuY3Rpb24gKCkgew0KICAgIGlmICh0aGlzLl92ZXJzaW9uKSB7IHJldHVybiB0aGlzLl92ZXJzaW9uOyB9DQoNCiAgICB0aGlzLl92ZXJzaW9uID0NCiAgICAgIFNjcmlwdEVuZ2luZSgpICsNCiAgICAgICcgJyArDQogICAgICBTY3JpcHRFbmdpbmVNYWpvclZlcnNpb24oKSArDQogICAgICAnLicgKw0KICAgICAgU2NyaXB0RW5naW5lTWlub3JWZXJzaW9uKCkgKw0KICAgICAgJy4nICsNCiAgICAgIFNjcmlwdEVuZ2luZUJ1aWxkVmVyc2lvbigpOw0KDQogICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzLmFyZ3YuZ2V0ID0gZnVuY3Rpb24gKCkgew0KICAgIGlmICh0aGlzLl9hcmd2KSB7IHJldHVybiB0aGlzLl9hcmd2OyB9DQogICAgdGhpcy5fYXJndiA9IFtXU2NyaXB0LkZ1bGxOYW1lXTsNCiAgICB2YXIgZW4gPSBuZXcgRW51bWVyYXRvcihXU2NyaXB0LkFyZ3VtZW50cyk7DQogICAgZm9yICg7ICFlbi5hdEVuZCgpOyBlbi5tb3ZlTmV4dCgpKSB7IHRoaXMuX2FyZ3YucHVzaChlbi5pdGVtKCkpOyB9DQogICAgcmV0dXJuIHRoaXMuX2FyZ3Y7DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzLmVudi5nZXQgPSBmdW5jdGlvbiAoKSB7DQogICAgaWYgKHRoaXMuX2VudikgeyByZXR1cm4gdGhpcy5fZW52OyB9DQogICAgdmFyIGl0LCBpOw0KICAgIHZhciBlbiA9IG5ldyBFbnVtZXJhdG9yKF9fV1NoZWxsLkVudmlyb25tZW50KCdQUk9DRVNTJykpOw0KICAgIHRoaXMuX2VudiA9IHt9Ow0KICAgIGZvciAoOyAhZW4uYXRFbmQoKTsgZW4ubW92ZU5leHQoKSkgew0KICAgICAgaXQgPSBlbi5pdGVtKCk7DQogICAgICBpID0gaXQuaW5kZXhPZignPScpOw0KICAgICAgaWYgKGkgPiAwKSB7DQogICAgICAgIHRoaXMuX2VudltpdC5zbGljZSgwLCBpKV0gPSBpdC5zbGljZShpICsgMSk7DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiB0aGlzLl9lbnY7DQogIH07CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBQcm9jZXNzLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7DQoNCiAgdmFyIHByb2Nlc3MgPSBuZXcgUHJvY2VzcygpOwoKICB2YXIgX2RvYzsNCg0KICBmdW5jdGlvbiBnZXRYbWxEb2MoKSB7DQogICAgcmV0dXJuIF9kb2MgfHwgKF9kb2MgPSBuZXcgQWN0aXZlWE9iamVjdCgnTVNYTUwyLkRPTURvY3VtZW50LjYuMCcpKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRleHQydmFsdWUodHlwZSwgdGV4dCkgew0KICAgIHZhciBlbCA9IGdldFhtbERvYygpLmNyZWF0ZUVsZW1lbnQoJ3RtcCcpOw0KICAgIGVsLmRhdGFUeXBlID0gdHlwZTsNCiAgICBlbC50ZXh0ID0gdGV4dDsNCiAgICByZXR1cm4gZWwubm9kZVR5cGVkVmFsdWU7DQogIH0NCg0KICBmdW5jdGlvbiB2YWx1ZTJ0ZXh0KHR5cGUsIHZhbHVlKSB7DQogICAgdmFyIGVsID0gZ2V0WG1sRG9jKCkuY3JlYXRlRWxlbWVudCgndG1wJyk7DQogICAgZWwuZGF0YVR5cGUgPSB0eXBlOw0KICAgIGVsLm5vZGVUeXBlZFZhbHVlID0gdmFsdWU7DQogICAgcmV0dXJuIGVsLnRleHQ7DQogIH0NCg0KICBmdW5jdGlvbiBiaW4yaGV4KGJ5dGVzKSB7DQogICAgcmV0dXJuIHZhbHVlMnRleHQoJ2Jpbi5oZXgnLCBieXRlcyk7DQogIH0NCg0KICBmdW5jdGlvbiBoZXgyYmluKGhleCkgew0KICAgIHJldHVybiB0ZXh0MnZhbHVlKCdiaW4uaGV4JywgaGV4KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJpbjJiYXNlNjQoYnl0ZXMpIHsNCiAgICByZXR1cm4gdmFsdWUydGV4dCgnYmluLmJhc2U2NCcsIGJ5dGVzKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJhc2U2NDJiaW4oYmFzZTY0KSB7DQogICAgcmV0dXJuIHRleHQydmFsdWUoJ2Jpbi5iYXNlNjQnLCBiYXNlNjQpOw0KICB9DQoNCiAgZnVuY3Rpb24gYmluMnN0cihieXRlcywgZW5jb2RpbmcpIHsNCiAgICB2YXIgc3QgPSBuZXcgQWN0aXZlWE9iamVjdCgnQURPREIuU3RyZWFtJyksDQogICAgICBzdHI7DQogICAgZW5jb2RpbmcgfHwgKGVuY29kaW5nID0gJ1VURi04Jyk7DQogICAgdHJ5IHsNCiAgICAgIHN0Lk9wZW4oKTsNCiAgICAgIHN0LlR5cGUgPSAxOw0KICAgICAgc3QuV3JpdGUoYnl0ZXMpOw0KICAgICAgc3QuUG9zaXRpb24gPSAwOw0KICAgICAgc3QuVHlwZSA9IDI7DQogICAgICBzdC5DaGFyc2V0ID0gZW5jb2Rpbmc7DQogICAgICBzdHIgPSBzdC5SZWFkVGV4dCgpOw0KICAgIH0gZmluYWxseSB7DQogICAgICBzdC5DbG9zZSgpOw0KICAgIH0NCiAgICByZXR1cm4gc3RyOw0KICB9DQoNCiAgZnVuY3Rpb24gc3RyMmJpbihzdHIsIGVuY29kaW5nKSB7DQogICAgdmFyIHN0ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ0FET0RCLlN0cmVhbScpLA0KICAgICAgYmluOw0KICAgIGVuY29kaW5nIHx8IChlbmNvZGluZyA9ICdVVEYtOCcpOw0KICAgIHRyeSB7DQogICAgICBzdC5PcGVuKCk7DQogICAgICBzdC5UeXBlID0gMjsNCiAgICAgIHN0LkNoYXJzZXQgPSBlbmNvZGluZzsNCiAgICAgIHN0LldyaXRlVGV4dChzdHIpOw0KICAgICAgc3QuUG9zaXRpb24gPSAwOw0KICAgICAgc3QuVHlwZSA9IDE7DQogICAgICBlbmNvZGluZyA9IGVuY29kaW5nLnJlcGxhY2UoJy0nLCAnJykudG9Mb3dlckNhc2UoKTsNCiAgICAgIGlmIChlbmNvZGluZyA9PSAndXRmOCcgfHwgZW5jb2RpbmcgPT0gJ3VuaWNvZGUnKSB7IHN0LlBvc2l0aW9uID0gMzsgfQ0KICAgICAgZWxzZSBpZiAoZW5jb2RpbmcgPT0gJ3VmdDE2JykgeyBzdC5Qb3NpdGlvbiA9IDI7IH0NCiAgICAgIGJpbiA9IHN0LlJlYWQoKTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgc3QuQ2xvc2UoKTsNCiAgICB9DQogICAgcmV0dXJuIGJpbjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGVuY29kZShzdHIsIGVuY29kaW5nKSB7DQogICAgc3dpdGNoIChlbmNvZGluZykgew0KICAgICAgY2FzZSAnaGV4JzoNCiAgICAgICAgcmV0dXJuIGhleDJiaW4oc3RyKTsNCiAgICAgIGNhc2UgJ2Jhc2U2NCc6DQogICAgICAgIHJldHVybiBiYXNlNjQyYmluKHN0cik7DQogICAgICBkZWZhdWx0Og0KICAgICAgICByZXR1cm4gc3RyMmJpbihzdHIsIGVuY29kaW5nKTsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBkZWNvZGUoYnl0ZXMsIGVuY29kaW5nKSB7DQogICAgc3dpdGNoIChlbmNvZGluZykgew0KICAgICAgY2FzZSAnaGV4JzoNCiAgICAgICAgcmV0dXJuIGJpbjJoZXgoYnl0ZXMpOw0KICAgICAgY2FzZSAnYmFzZTY0JzoNCiAgICAgICAgcmV0dXJuIGJpbjJiYXNlNjQoYnl0ZXMpOw0KICAgICAgY2FzZSAnYmluYXJ5JzoNCiAgICAgICAgcmV0dXJuIGJ5dGVzOw0KICAgICAgZGVmYXVsdDoNCiAgICAgICAgcmV0dXJuIGJpbjJzdHIoYnl0ZXMsIGVuY29kaW5nKTsNCiAgICB9DQogIH0NCg0KICB2YXIgQnVmZmVyID0gZnVuY3Rpb24gQnVmZmVyKG9iaiwgZW5jb2RpbmcpIHsNCiAgICB0aGlzLmJ1ZmZlciA9IG51bGw7DQogICAgaWYgKG9iaiA9PSBudWxsIHx8IG9iaiA9PSAnJyB8fCBvYmoubGVuZ3RoID09IDApIHsNCiAgICAgIHRoaXMuYnVmZmVyID0gbmV3IEFjdGl2ZVhPYmplY3QoJ1NjcmlwdGluZy5EaWN0aW9uYXJ5JykuSXRlbXMoKTsNCiAgICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7DQogICAgICB0aGlzLmJ1ZmZlciA9IG9iai5idWZmZXI7DQogICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09ICdzdHJpbmcnKSB7DQogICAgICB0aGlzLmJ1ZmZlciA9IGVuY29kZShvYmosIGVuY29kaW5nKTsNCiAgICB9IGVsc2UgaWYgKG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IgPT09IFZCQXJyYXkpIHsNCiAgICAgIHRoaXMuYnVmZmVyID0gb2JqOw0KICAgIH0gZWxzZSB7DQogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGJ1ZmZlci4nKTsNCiAgICB9DQogIH07CgogIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgbGVuZ3RoOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07DQoNCiAgQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikgew0KICAgIHJldHVybiBvYmogJiYgb2JqIGluc3RhbmNlb2YgQnVmZmVyOw0KICB9Ow0KDQogIEJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gZnJvbSAob2JqLCBlbmNvZGluZykgew0KICAgIHJldHVybiBuZXcgQnVmZmVyKG9iaiwgZW5jb2RpbmcpOw0KICB9OwoKICBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGVuY29kaW5nKSB7DQogICAgcmV0dXJuIHRoaXMuYnVmZmVyLnVib3VuZCgpID09IC0xID8gJycgOiBkZWNvZGUodGhpcy5idWZmZXIsIGVuY29kaW5nKTsNCiAgfTsNCg0KICBCdWZmZXIucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiB2YWx1ZU9mICgpIHsNCiAgICB2YXIgYnl0ZXMgPSB0aGlzLmJ1ZmZlciwNCiAgICAgIGxlbiA9IHRoaXMubGVuZ3RoLA0KICAgICAgaSA9IC0xLA0KICAgICAgb3ZlcmZsb3csDQogICAgICBhcnI7DQogICAgaWYgKGxlbiA+IDUwKSB7DQogICAgICBvdmVyZmxvdyA9IHRydWU7DQogICAgICBsZW4gPSA1MDsNCiAgICAgIGFyciA9IEFycmF5KDUxKTsNCiAgICB9IGVsc2Ugew0KICAgICAgYXJyID0gQXJyYXkobGVuKTsNCiAgICB9DQogICAgd2hpbGUgKCsraSA8IGxlbikgeyBhcnJbaV0gPSBieXRlcy5nZXRJdGVtKGkpLnRvU3RyaW5nKDE2KTsgfQ0KICAgIGlmIChvdmVyZmxvdykgeyBhcnJbNTBdID0gJy4uLic7IH0NCiAgICByZXR1cm4gJzxCdWZmZXIgJyArIGFyci5qb2luKCcgJykgKyAnPic7DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzJDEubGVuZ3RoLmdldCA9IGZ1bmN0aW9uICgpIHsNCiAgICByZXR1cm4gdGhpcy5idWZmZXIudWJvdW5kKCkgKyAxOw0KICB9OwoKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQnVmZmVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTsKCiAgdmFyIFRPX1NUUiA9IHt9LnRvU3RyaW5nOw0KICB2YXIgSEFTX09XTiA9IHt9Lmhhc093blByb3BlcnR5Ow0KDQogIC8vICNyZWdpb24gVXRpbA0KDQogIGZ1bmN0aW9uIGNocihuKSB7DQogICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobik7DQogIH0NCg0KICBmdW5jdGlvbiBvcmQoYykgew0KICAgIHJldHVybiBjLmNoYXJDb2RlQXQoMCk7DQogIH0NCg0KICBmdW5jdGlvbiBoZXgoeCkgew0KICAgIHJldHVybiBOdW1iZXIoeCkudG9TdHJpbmcoMTYpOw0KICB9DQoNCiAgZnVuY3Rpb24gYmluKHgpIHsNCiAgICByZXR1cm4gTnVtYmVyKHgpLnRvU3RyaW5nKDIpOw0KICB9DQoNCiAgZnVuY3Rpb24gb2N0KHgpIHsNCiAgICByZXR1cm4gTnVtYmVyKHgpLnRvU3RyaW5nKDgpOw0KICB9DQoNCiAgZnVuY3Rpb24gaW50KHgsIGJhc2UpIHsNCiAgICByZXR1cm4gcGFyc2VJbnQoeCwgYmFzZSk7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRUYWcodmFsdWUpIHsNCiAgICByZXR1cm4gVE9fU1RSLmNhbGwodmFsdWUpOw0KICB9DQoNCiAgdmFyIFRZUEVfUkVHID0gL1xbb2JqZWN0IChbXlxdXSspXF0vOw0KDQogIGZ1bmN0aW9uIHR5cGVPZihvYmopIHsNCiAgICB2YXIgdHAgPSBvYmogPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2Ygb2JqOw0KICAgIGlmICh0cCA9PSAnb2JqZWN0JykNCiAgICAgIHsgdHAgPSBUT19TVFIuY2FsbChvYmopDQogICAgICAgIC5tYXRjaChUWVBFX1JFRylbMV0NCiAgICAgICAgLnRvTG93ZXJDYXNlKCk7IH0NCiAgICBpZiAodHAgPT0gJ29iamVjdCcgJiYgb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJykNCiAgICAgIHsgdHAgPSBvYmouY29uc3RydWN0b3IubmFtZS50b0xvd2VyQ2FzZSgpIHx8IHRwOyB9DQogICAgcmV0dXJuIHRwOw0KICB9DQoNCiAgdmFyIHR5cGUgPSB0eXBlT2Y7DQoNCiAgZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7DQogICAgcmV0dXJuIG9iaiAhPSBudWxsICYmIEhBU19PV04uY2FsbChvYmosIGtleSk7DQogIH0NCg0KICBmdW5jdGlvbiBpc0FycmF5KG9iaikgew0KICAgIHJldHVybiBBcnJheS5pc0FycmF5KG9iaik7DQogIH0NCg0KICBmdW5jdGlvbiBpc09iamVjdChvYmopIHsNCiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7DQogICAgcmV0dXJuIG9iaiAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7DQogIH0NCg0KICBmdW5jdGlvbiBpc0Z1bmN0aW9uKG9iaikgew0KICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbic7DQogIH0NCg0KICBmdW5jdGlvbiBpc1N0cmluZyhvYmopIHsNCiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PSAnc3RyaW5nJzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgew0KICAgIHJldHVybiB0eXBlb2Ygb2JqID09ICdudW1iZXInOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNCb29sZWFuKG9iaikgew0KICAgIHJldHVybiBvYmogPT09IHRydWUgfHwgb2JqID09PSBmYWxzZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzRGF0ZShvYmopIHsNCiAgICByZXR1cm4gVE9fU1RSLmNhbGwob2JqKSA9PSAnW29iamVjdCBEYXRlXSc7DQogIH0NCg0KICBmdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsNCiAgICByZXR1cm4gVE9fU1RSLmNhbGwob2JqKSA9PSAnW29iamVjdCBSZWdFeHBdJzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7DQogICAgcmV0dXJuIFRPX1NUUi5jYWxsKG9iaikgPT0gJ1tvYmplY3QgRXJyb3JdJzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzTWFwKG9iaikgew0KICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNYXA7DQogIH0NCg0KICBmdW5jdGlvbiBpc1NldChvYmopIHsNCiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgU2V0Ow0KICB9DQoNCiAgZnVuY3Rpb24gaXNXZWFrTWFwKG9iaikgew0KICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBXZWFrTWFwOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7DQogICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSAlIDEgPT0gMDsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzQXJndW1lbnRzKG9iaikgew0KICAgIHJldHVybiBUT19TVFIuY2FsbChvYmopID09ICdbb2JqZWN0IEFyZ3VtZW50c10nOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7DQogICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPSBudWxsOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHsNCiAgICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSAmJiB2YWx1ZSA+IC0xICYmIHZhbHVlIDwgOTAwNzE5OTI1NDc0MDk5MjsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKG9iaikgew0KICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqICE9ICdmdW5jdGlvbicgJiYgaXNMZW5ndGgob2JqLmxlbmd0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBpc0VtcHR5KG9iaikgew0KICAgIGlmIChvYmogPT0gbnVsbCkgeyByZXR1cm4gdHJ1ZTsgfQ0KICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7IHJldHVybiAhb2JqLmxlbmd0aDsgfQ0KICAgIGlmIChpc01hcChvYmopIHx8IGlzU2V0KG9iaikpIHsgcmV0dXJuICFvYmouc2l6ZTsgfQ0KICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsNCiAgICAgIGlmIChIQVNfT1dOLmNhbGwob2JqLCBrZXkpKSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIH0NCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikgew0KICAgIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcGx5KGZuLCB0aGlzQXJnLCBhcmdzKSB7DQogICAgdmFyIGFyZ0NudCA9IChhcmdzICYmIGFyZ3MubGVuZ3RoKSB8fCAwLA0KICAgICAgaGFzVGhpcyA9IHRoaXNBcmcgPT0gbnVsbDsNCiAgICBzd2l0Y2ggKGFyZ0NudCkgew0KICAgICAgY2FzZSAwOg0KICAgICAgICByZXR1cm4gaGFzVGhpcyA/IGZuKCkgOiBmbi5jYWxsKHRoaXNBcmcpOw0KICAgICAgY2FzZSAxOg0KICAgICAgICByZXR1cm4gaGFzVGhpcyA/IGZuKGFyZ3NbMF0pIDogZm4uY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTsNCiAgICAgIGNhc2UgMjoNCiAgICAgICAgcmV0dXJuIGhhc1RoaXMNCiAgICAgICAgICA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pDQogICAgICAgICAgOiBmbi5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pOw0KICAgICAgY2FzZSAzOg0KICAgICAgICByZXR1cm4gaGFzVGhpcw0KICAgICAgICAgID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSkNCiAgICAgICAgICA6IGZuLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7DQogICAgICBkZWZhdWx0Og0KICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkgew0KICAgIHZhciBpID0gLTEsDQogICAgICBsZW4sDQogICAgICByZXN1bHQgPSBbXTsNCiAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyByZXR1cm4gcmVzdWx0OyB9DQogICAgaWYgKGVuZCA9PSBudWxsKSB7IChlbmQgPSBzdGFydCksIChzdGFydCA9IDApOyB9DQogICAgaWYgKHN0ZXAgPT0gbnVsbCkgeyBzdGVwID0gMTsgfQ0KICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKTsNCiAgICBpZiAoc3RhcnQgPiBlbmQpIHsgc3RlcCA9IC1zdGVwOyB9DQogICAgbGVuID0gTWF0aC5tYXgoTWF0aC5jZWlsKChlbmQgLSBzdGFydCkgLyBzdGVwKSwgMCk7DQogICAgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7DQogICAgd2hpbGUgKCsraSA8IGxlbikgeyAocmVzdWx0W2ldID0gc3RhcnQpLCAoc3RhcnQgKz0gc3RlcCk7IH0NCiAgICByZXR1cm4gcmVzdWx0Ow0KICB9DQoNCiAgZnVuY3Rpb24gdG9QYXRoKHB0aCkgew0KICAgIGlmIChpc1N0cmluZyhwdGgpKSB7IHB0aCA9IHB0aC5zcGxpdCgvWy5bXF1dLykuZmlsdGVyKGlkZW50aXR5KTsgfQ0KICAgIGVsc2UgaWYgKGlzTnVtYmVyKHB0aCkpIHsgcHRoID0gW3B0aF07IH0NCiAgICByZXR1cm4gaXNBcnJheShwdGgpID8gcHRoIDogW107DQogIH0NCg0KICBmdW5jdGlvbiBpZGVudGl0eSh4KSB7DQogICAgcmV0dXJuIHg7DQogIH0NCg0KICBmdW5jdGlvbiBpdGVyYXRlZSh4KSB7DQogICAgc3dpdGNoICh0eXBlT2YoeCkpIHsNCiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoNCiAgICAgICAgcmV0dXJuIHg7DQogICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgY2FzZSAnbnVtYmVyJzoNCiAgICAgICAgcmV0dXJuIHByb3BlcnR5KHgpOw0KICAgICAgY2FzZSAnYXJyYXknOg0KICAgICAgICByZXR1cm4gcHJvcGVydGllcyh4KTsNCiAgICAgIGNhc2UgJ29iamVjdCc6DQogICAgICAgIHJldHVybiBtYXRjaGVzKHgpOw0KICAgICAgZGVmYXVsdDoNCiAgICAgICAgcmV0dXJuIGlkZW50aXR5Ow0KICAgIH0NCiAgfQ0KDQogIC8vICNlbmRyZWdpb24NCg0KICAvLyAjcmVnaW9uIENvbGxlY3Rpb24NCg0KICBmdW5jdGlvbiBlYWNoKHgsIGZuKSB7CiAgICBpZiAoIGZuID09PSB2b2lkIDAgKSBmbiA9IGlkZW50aXR5OwoNCiAgICB2YXIgaSwga2V5LCBsZW47DQogICAgaWYgKGlzQXJyYXlMaWtlKHgpKSB7DQogICAgICBmb3IgKGkgPSAwLCBsZW4gPSB4Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7DQogICAgICAgIGlmIChmbih4W2ldLCBpKSA9PT0gZmFsc2UpIHsgYnJlYWs7IH0NCiAgICAgIH0NCiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiBFbnVtZXJhdG9yKSB7DQogICAgICBmb3IgKGkgPSAwOyAheC5hdEVuZCgpOyB4Lm1vdmVOZXh0KCksIGkrKykgew0KICAgICAgICBpZiAoZm4oeC5pdGVtKCksIGkpID09PSBmYWxzZSkgeyBicmVhazsgfQ0KICAgICAgfQ0KICAgIH0gZWxzZSBpZiAoaXNMZW5ndGgoeCkpIHsNCiAgICAgIGZvciAoaSA9IDA7IGkgPCB4OyBpKyspIHsNCiAgICAgICAgaWYgKGZuKGksIGkpID09PSBmYWxzZSkgeyBicmVhazsgfQ0KICAgICAgfQ0KICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoeCkpIHsNCiAgICAgIGZvciAoa2V5IGluIHgpIHsNCiAgICAgICAgaWYgKGhhcyh4LCBrZXkpKSB7DQogICAgICAgICAgaWYgKGZuKHhba2V5XSwga2V5KSA9PT0gZmFsc2UpIHsgYnJlYWs7IH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4geDsNCiAgfQ0KDQogIHZhciBmb3JFYWNoID0gZWFjaDsNCg0KICBmdW5jdGlvbiBtYXAoeCwgZm4pIHsNCiAgICB2YXIgcmVzdWx0ID0gW107DQogICAgZm4gPSBpdGVyYXRlZShmbik7DQogICAgZWFjaCh4LCBmdW5jdGlvbiAodiwgaykgew0KICAgICAgcmVzdWx0LnB1c2goZm4odiwgaykpOw0KICAgIH0pOw0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICB2YXIgc2VsZWN0ID0gbWFwOw0KDQogIGZ1bmN0aW9uIHJlZHVjZSh4LCBmbiwgYWNjdW11bGF0b3IpIHsNCiAgICBlYWNoKHgsIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICBhY2N1bXVsYXRvciA9IGZuKGFjY3VtdWxhdG9yLCB2LCBrKTsNCiAgICB9KTsNCiAgICByZXR1cm4gYWNjdW11bGF0b3I7DQogIH0NCg0KICBmdW5jdGlvbiBmaWx0ZXIoeCwgZm4pIHsNCiAgICB2YXIgZmlsdGVyZWQgPSBbXTsNCiAgICBmbiA9IGl0ZXJhdGVlKGZuKTsNCiAgICBlYWNoKHgsIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICBpZiAoZm4odiwgaykpIHsgZmlsdGVyZWQucHVzaCh2KTsgfQ0KICAgIH0pOw0KICAgIHJldHVybiBmaWx0ZXJlZDsNCiAgfQ0KDQogIHZhciB3aGVyZSA9IGZpbHRlcjsNCg0KICBmdW5jdGlvbiB0b0FycmF5KHgpIHsNCiAgICB2YXIgaSwgbGVuLCBhcnI7DQogICAgaWYgKGlzQXJyYXkoeCkpIHsgcmV0dXJuIHg7IH0NCiAgICBpZiAoaXNBcnJheUxpa2UoeCkpIHsNCiAgICAgIGkgPSAtMTsNCiAgICAgIGxlbiA9IHgubGVuZ3RoOw0KICAgICAgYXJyID0gQXJyYXkobGVuKTsNCiAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHsgYXJyW2ldID0geFtpXTsgfQ0KICAgICAgcmV0dXJuIGFycjsNCiAgICB9DQogICAgaWYgKGlzT2JqZWN0KHgpKSB7IHJldHVybiBtYXAoeCk7IH0NCiAgICByZXR1cm4gW107DQogIH0NCg0KICBmdW5jdGlvbiBiYXNlRmluZCh4LCBmbikgew0KICAgIHZhciBmb3VuZCA9IG51bGwsDQogICAgICBpID0gLTE7DQogICAgZm4gPSBpdGVyYXRlZShmbik7DQogICAgZWFjaCh4LCBmdW5jdGlvbiAodiwgaykgew0KICAgICAgaWYgKGZuKHYpKSB7DQogICAgICAgIGkgPSBrOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIFtmb3VuZCwgaV07DQogIH0NCg0KICBmdW5jdGlvbiBmaW5kKHgsIGZuKSB7DQogICAgcmV0dXJuIGJhc2VGaW5kKHgsIGZuKVswXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGZpbmRJbmRleCh4LCBmbikgew0KICAgIHJldHVybiBiYXNlRmluZCh4LCBmbilbMV07DQogIH0NCg0KICBmdW5jdGlvbiBncm91cEJ5KG9iaiwgZm4pIHsNCiAgICB2YXIgcmVzdWx0ID0ge307DQogICAgZm4gPSBpdGVyYXRlZShmbik7DQogICAgZWFjaChvYmosIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICB2YXIga2V5ID0gZm4odiwgayk7DQogICAgICBoYXMocmVzdWx0LCBrZXkpID8gcmVzdWx0W2tleV0ucHVzaCh2KSA6IChyZXN1bHRba2V5XSA9IFt2XSk7DQogICAgfSk7DQogICAgcmV0dXJuIHJlc3VsdDsNCiAgfQ0KDQogIGZ1bmN0aW9uIGNvdW50QnkoeCwgZm4pIHsNCiAgICBmbiA9IGl0ZXJhdGVlKGZuKTsNCiAgICByZXR1cm4gdG9BcnJheSh4KS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgdiwgaykgew0KICAgICAgdmFyIGtleSA9IGZuKHYsIGspOw0KICAgICAgaGFzKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldKysgOiAocmVzdWx0W2tleV0gPSAxKTsNCiAgICAgIHJldHVybiByZXN1bHQ7DQogICAgfSwge30pOw0KICB9DQoNCiAgZnVuY3Rpb24gc2l6ZShvYmopIHsNCiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDsNCiAgfQ0KDQogIHZhciBsZW4gPSBzaXplOw0KDQogIC8vICNlbmRyZWdpb24NCg0KICAvLyAjcmVnaW9uIEFycmF5DQoNCiAgZnVuY3Rpb24gdW5pcUJ5KHgsIGZuKSB7DQogICAgdmFyIHJlc3VsdCA9IFtdLA0KICAgICAgbWVtbyA9IG5ldyBTZXQoKTsNCiAgICBmbiA9IGl0ZXJhdGVlKGZuKTsNCiAgICBlYWNoKHgsIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICB2YXIga2V5ID0gZm4odiwgayk7DQogICAgICBpZiAoIW1lbW8uaGFzKGtleSkpIHsNCiAgICAgICAgcmVzdWx0LnB1c2godik7DQogICAgICAgIG1lbW8uYWRkKGtleSk7DQogICAgICB9DQogICAgfSk7DQogICAgbWVtby5jbGVhcigpOw0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICBmdW5jdGlvbiB1bmlxKGFycikgew0KICAgIHJldHVybiB1bmlxQnkoYXJyLCBpZGVudGl0eSk7DQogIH0NCg0KICB2YXIgZGlzdGluY3QgPSB1bmlxOw0KDQogIHZhciBkaXN0aW5jdEJ5ID0gdW5pcUJ5Ow0KDQogIGZ1bmN0aW9uIGNodW5rKHgsIG4pIHsNCiAgICBpZiAobiA9PSBudWxsIHx8ICFpc0ludGVnZXIobikgfHwgbiA8IDEpIHsgcmV0dXJuIFtdOyB9DQogICAgdmFyIHJlc3VsdCA9IFtdLA0KICAgICAgdG1wID0gQXJyYXkobiksDQogICAgICBvZmYgPSAwOw0KICAgIGVhY2goeCwgZnVuY3Rpb24gKHYpIHsNCiAgICAgIHRtcFtvZmYrK10gPSB2Ow0KICAgICAgaWYgKG9mZiA9PSAxKSB7DQogICAgICAgIHJlc3VsdC5wdXNoKHRtcCk7DQogICAgICB9IGVsc2UgaWYgKG9mZiA9PSBuKSB7DQogICAgICAgIG9mZiA9IDA7DQogICAgICAgIHRtcCA9IEFycmF5KG4pOw0KICAgICAgfQ0KICAgIH0pOw0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICBmdW5jdGlvbiBjb25jYXQoKSB7CiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgcmV0dXJuIGFyZ3MubWFwKHRvQXJyYXkpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBhcmcpIHsNCiAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KHRvQXJyYXkoYXJnKSk7DQogICAgfSwgW10pOw0KICB9DQoNCiAgZnVuY3Rpb24gc2xpY2UoeCwgYmVnaW4sIGVuZCkgew0KICAgIHJldHVybiB0b0FycmF5KHgpLnNsaWNlKGJlZ2luLCBlbmQpOw0KICB9DQoNCiAgLy8gZHJvcChbMSwgMiwgMywgNCwgNV0sIDIpID0+IFszLCA0LCA1XQ0KICBmdW5jdGlvbiBkcm9wKGFyciwgbikgew0KICAgIHJldHVybiBzbGljZShhcnIsIG4gfHwgMSk7DQogIH0NCg0KICAvLyB0YWlsKFsxLCAyLCAzLCA0XSkgPT4gWzIsIDMsIDRdDQogIGZ1bmN0aW9uIHRhaWwoYXJyKSB7DQogICAgcmV0dXJuIGRyb3AoYXJyLCAxKTsNCiAgfQ0KDQogIC8vIGluaXRhaWwoWzEsIDIsIDMsIDRdKSA9PiBbMSwgMiwgM10NCiAgZnVuY3Rpb24gaW5pdGlhbChhcnIpIHsNCiAgICByZXR1cm4gc2xpY2UoYXJyLCAwLCAtMSk7DQogIH0NCg0KICAvLyB0YWtlKFsxLCAyLCAzLCA0LCA1XSwgMikgPT4gWzEsIDJdDQogIGZ1bmN0aW9uIHRha2UoYXJyLCBuKSB7DQogICAgcmV0dXJuIHNsaWNlKGFyciwgMCwgbik7DQogIH0NCg0KICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyLCBuKSB7DQogICAgcmV0dXJuIHNsaWNlKGFyciwgLW4pOw0KICB9DQoNCiAgZnVuY3Rpb24gY29udGFpbnMoeCwgdmFsLCBwb3MpIHsKICAgIGlmICggcG9zID09PSB2b2lkIDAgKSBwb3MgPSAwOwoNCiAgICByZXR1cm4gdG9BcnJheSh4KS5pbmRleE9mKHZhbCwgcG9zKSAhPSAtMTsNCiAgfQ0KDQogIHZhciBpbmNsdWRlID0gY29udGFpbnM7DQoNCiAgdmFyIGluY2x1ZGVzID0gY29udGFpbnM7DQoNCiAgZnVuY3Rpb24gZmlyc3QoeCkgew0KICAgIHJldHVybiB0b0FycmF5KHgpWzBdOw0KICB9DQoNCiAgdmFyIGhlYWQgPSBmaXJzdDsNCg0KICBmdW5jdGlvbiBsYXN0KHgpIHsNCiAgICB2YXIgYXJyID0gdG9BcnJheSh4KTsNCiAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG50aCh4LCBuKSB7DQogICAgdmFyIGFyciA9IHRvQXJyYXkoeCk7DQogICAgcmV0dXJuIG4gPCAwID8gYXJyW2Fyci5sZW5ndGggKyBuXSA6IGFycltuXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHB1bGxBbGwoYXJyLCB2YWx1ZXMpIHsNCiAgICB2YXIgaSA9IGFyci5sZW5ndGg7DQogICAgd2hpbGUgKGktLSkgew0KICAgICAgaWYgKHZhbHVlcy5pbmNsdWRlcyhhcnJbaV0pKSB7IGFyci5zcGxpY2UoaSwgMSk7IH0NCiAgICB9DQogICAgcmV0dXJuIGFycjsNCiAgfQ0KDQogIGZ1bmN0aW9uIHB1bGwoeCkgewogICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7CiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07Cg0KICAgIHJldHVybiBwdWxsQWxsKHgsIGFyZ3MpOw0KICB9DQoNCiAgZnVuY3Rpb24gcmVtb3ZlKGFyciwgZm4pIHsNCiAgICB2YXIgaSA9IGFyci5sZW5ndGg7DQogICAgZm4gPSBpdGVyYXRlZShmbik7DQogICAgd2hpbGUgKGktLSkgew0KICAgICAgaWYgKGZuKGFycltpXSwgaSkpIHsgYXJyLnNwbGljZShpLCAxKTsgfQ0KICAgIH0NCiAgICByZXR1cm4gYXJyOw0KICB9DQoNCiAgZnVuY3Rpb24gZGlmZmVyZW5jZShhcnIsIHZhbHVlcykgew0KICAgIHJldHVybiBmaWx0ZXIoYXJyLCBmdW5jdGlvbiAoaXQpIHsgcmV0dXJuICFpbmNsdWRlcyh2YWx1ZXMsIGl0KTsgfSk7DQogIH0NCg0KICBmdW5jdGlvbiB1bnppcChhcnIpIHsNCiAgICBpZiAoYXJyID09IG51bGwgfHwgIWFyci5sZW5ndGgpIHsNCiAgICAgIHJldHVybiBbXTsNCiAgICB9DQogICAgdmFyIGxlbiA9IDA7DQogICAgYXJyID0gZmlsdGVyKGFyciwgZnVuY3Rpb24gKGl0KSB7DQogICAgICBpZiAoaGFzKGl0LCAnbGVuZ3RoJykpIHsNCiAgICAgICAgbGVuID0gTWF0aC5tYXgoaXQubGVuZ3RoLCBsZW4pOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0NCiAgICB9KTsNCiAgICB2YXIgaSA9IC0xLA0KICAgICAgcmVzdWx0ID0gQXJyYXkobGVuKTsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICByZXN1bHRbaV0gPSBtYXAoYXJyLCBpKTsNCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdDsNCiAgfQ0KDQogIGZ1bmN0aW9uIHppcCgpIHsNCiAgICByZXR1cm4gdW56aXAoYXJndW1lbnRzKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyKSB7DQogICAgcmV0dXJuIGFyci5yZWR1Y2UoZnVuY3Rpb24gKHJzdCwgaXQpIHsNCiAgICAgIGlmIChpc0FycmF5KGl0KSkgeyByc3QgPSByc3QuY29uY2F0KGl0KTsgfQ0KICAgICAgZWxzZSB7IHJzdC5wdXNoKGl0KTsgfQ0KICAgICAgcmV0dXJuIHJzdDsNCiAgICB9LCBbXSk7DQogIH0NCg0KICAvLyAjZW5kcmVnaW9uDQoNCiAgLy8gI3JlZ2lvbiBPYmplY3QNCg0KICBmdW5jdGlvbiBrZXlzSW4ob2JqKSB7DQogICAgdmFyIGFyciA9IFtdOw0KICAgIGlmIChvYmopIHsNCiAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7DQogICAgICAgIGFyci5wdXNoKGspOw0KICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gYXJyOw0KICB9DQoNCiAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqKSB7DQogICAgcmV0dXJuIG9iaiA/IGtleXNJbihvYmopLm1hcChwcm9wZXJ0eU9mKG9iaikpIDogW107DQogIH0NCg0KICAvLyB6aXBPYmplY3QoWydhJywgJ2InLCAnYyddLCBbMSwgMiwgM10pDQogIC8vID0+IHsgYTogMSwgYjogMiwgYzogM30NCiAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHsNCiAgICB2YXIgaSA9IC0xLA0KICAgICAgbGVuID0gcHJvcHMubGVuZ3RoLA0KICAgICAgdkxlbiA9IHZhbHVlcy5sZW5ndGgsDQogICAgICByZXN1bHQgPSB7fTsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICByZXN1bHRbcHJvcHNbaV1dID0gaSA8IHZMZW4gPyB2YWx1ZXNbaV0gOiB2b2lkIDA7DQogICAgfQ0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICBmdW5jdGlvbiB0b1BhaXJzKG9iaikgew0KICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBba2V5LCBvYmpba2V5XV07IH0pOw0KICB9DQoNCiAgdmFyIGVudHJpZXMgPSB0b1BhaXJzOw0KDQogIGZ1bmN0aW9uIHRvUGFpcnNJbihvYmopIHsNCiAgICB2YXIgcmVzdWx0ID0gW107DQogICAgZm9yICh2YXIga2V5IGluIG9iaikgeyByZXN1bHQucHVzaChba2V5LCBvYmpba2V5XV0pOyB9DQogICAgcmV0dXJuIHJlc3VsdDsNCiAgfQ0KDQogIHZhciBlbnRyaWVzSW4gPSB0b1BhaXJzSW47DQoNCiAgLy8gb2JqZWN0KFsgWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXSBdKQ0KICAvLyA9PiB7IGE6IDEsIGI6IDIsIGM6IDN9DQogIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykgew0KICAgIHJldHVybiBwYWlycy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgaXQpIHsNCiAgICAgIHJlc3VsdFtpdFswXV0gPSBpdFsxXTsNCiAgICAgIHJldHVybiByZXN1bHQ7DQogICAgfSwge30pOw0KICB9DQoNCiAgZnVuY3Rpb24gb2JqZWN0KGFycjEsIGFycjIpIHsNCiAgICByZXR1cm4gYXJyMiA/IHppcE9iamVjdChhcnIxLCBhcnIyKSA6IGZyb21QYWlycyhhcnIxKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldChvYmosIHB0aCwgZGVmVmFsKSB7DQogICAgdmFyIGkgPSAtMSwNCiAgICAgIF9wdGggPSB0b1BhdGgocHRoKSwNCiAgICAgIGxlbiA9IF9wdGgubGVuZ3RoLA0KICAgICAgdmFsID0gb2JqOw0KICAgIHdoaWxlICgrK2kgPCBsZW4pIHsNCiAgICAgIGlmICh2YWwgPT0gbnVsbCkgeyByZXR1cm4gZGVmVmFsOyB9DQogICAgICB2YWwgPSB2YWxbX3B0aFtpXV07DQogICAgfQ0KICAgIHJldHVybiB2YWw7DQogIH0NCg0KICBmdW5jdGlvbiBhdChvYmosIHB0aHMpIHsNCiAgICByZXR1cm4gcHRocy5tYXAoZnVuY3Rpb24gKHB0aCkgeyByZXR1cm4gZ2V0KG9iaiwgcHRoKTsgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iaikgew0KICAgIHJldHVybiBmdW5jdGlvbiAocHRoKSB7IHJldHVybiBnZXQob2JqLCBwdGgpOyB9Ow0KICB9DQoNCiAgZnVuY3Rpb24gcHJvcGVydHkocHRoKSB7DQogICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIGdldChvYmosIHB0aCk7IH07DQogIH0NCg0KICBmdW5jdGlvbiBwcm9wZXJ0aWVzKHB0aHMpIHsNCiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gYXQob2JqLCBwdGhzKTsgfTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHNldChvYmosIHB0aCwgdmFsdWUpIHsNCiAgICB2YXIgX3B0aCA9IHRvUGF0aChwdGgpLA0KICAgICAga2V5ID0gbGFzdChfcHRoKSwNCiAgICAgIF9vYmogPSBnZXQob2JqLCBpbml0aWFsKF9wdGgpKTsNCiAgICBpZiAoX29iaiAhPSBudWxsKSB7DQogICAgICBfb2JqW2tleV0gPSB2YWx1ZTsNCiAgICB9DQogICAgcmV0dXJuIG9iajsNCiAgfQ0KDQogIGZ1bmN0aW9uIHVuc2V0KG9iaiwgcHRoKSB7DQogICAgdmFyIF9wdGggPSB0b1BhdGgocHRoKSwNCiAgICAgIGtleSA9IGxhc3QoX3B0aCksDQogICAgICBfb2JqID0gZ2V0KG9iaiwgaW5pdGlhbChfcHRoKSk7DQogICAgaWYgKF9vYmogIT0gbnVsbCAmJiBoYXMoX29iaiwga2V5KSkgew0KICAgICAgZGVsZXRlIF9vYmpba2V5XTsNCiAgICB9DQogICAgcmV0dXJuIG9iajsNCiAgfQ0KDQogIGZ1bmN0aW9uIHVwZGF0ZShvYmosIHB0aCwgZm4pIHsNCiAgICB2YXIgX3B0aCA9IHRvUGF0aChwdGgpLA0KICAgICAga2V5ID0gbGFzdChfcHRoKSwNCiAgICAgIF9vYmogPSBnZXQob2JqLCBpbml0aWFsKF9wdGgpKTsNCiAgICBpZiAoX29iaiAhPSBudWxsKSB7DQogICAgICBfb2JqW2tleV0gPSBmbihfb2JqW2tleV0pOw0KICAgIH0NCiAgICByZXR1cm4gb2JqOw0KICB9DQoNCiAgZnVuY3Rpb24gcGljayhvYmosIHB0aHMpIHsNCiAgICB2YXIgX3B0aHMgPSBwdGhzLm1hcChmdW5jdGlvbiAoaXQpIHsgcmV0dXJuIHRvUGF0aChpdCk7IH0pOw0KICAgIHJldHVybiBfcHRocy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgcHRoKSB7DQogICAgICB2YXIgdmFsdWUgPSBnZXQob2JqLCBwdGgpOw0KICAgICAgaWYgKHZhbHVlKSB7IHJlc3VsdFtsYXN0KHB0aCldID0gdmFsdWU7IH0NCiAgICAgIHJldHVybiByZXN1bHQ7DQogICAgfSwge30pOw0KICB9DQoNCiAgZnVuY3Rpb24gcGlja0J5KG9iaiwgcHJlZGljYXRlKSB7CiAgICBpZiAoIG9iaiA9PT0gdm9pZCAwICkgb2JqID0ge307CiAgICBpZiAoIHByZWRpY2F0ZSA9PT0gdm9pZCAwICkgcHJlZGljYXRlID0gaWRlbnRpdHk7Cg0KICAgIHJldHVybiBmcm9tUGFpcnMoT2JqZWN0LmVudHJpZXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKGl0KSB7IHJldHVybiBwcmVkaWNhdGUoaXRbMV0pOyB9KSk7DQogIH0NCg0KICBmdW5jdGlvbiBvbWl0Qnkob2JqLCBwcmVkaWNhdGUpIHsKICAgIGlmICggb2JqID09PSB2b2lkIDAgKSBvYmogPSB7fTsKICAgIGlmICggcHJlZGljYXRlID09PSB2b2lkIDAgKSBwcmVkaWNhdGUgPSBpZGVudGl0eTsKDQogICAgcmV0dXJuIGZyb21QYWlycyhPYmplY3QuZW50cmllcyhvYmopLmZpbHRlcihmdW5jdGlvbiAoaXQpIHsgcmV0dXJuICFwcmVkaWNhdGUoaXRbMV0pOyB9KSk7DQogIH0NCg0KICAvLyBpc01hdGNoKHthOiAxLCBiOiAyfSwgeyBiOiAyIH0pID0+IHRydWUNCiAgLy8gaXNNYXRjaCh7YTogMSwgYjogMn0sIHsgYjogMSB9KSA9PiBmYWxzZQ0KICBmdW5jdGlvbiBpc01hdGNoKG9iaiwgYXR0cnMpIHsNCiAgICBpZiAob2JqID09IG51bGwgfHwgYXR0cnMgPT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH0NCiAgICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHsNCiAgICAgIGlmICghaGFzKGF0dHJzLCBrZXkpKSB7IGNvbnRpbnVlOyB9DQogICAgICBpZiAoIWhhcyhvYmosIGtleSkgfHwgYXR0cnNba2V5XSAhPT0gb2JqW2tleV0pIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgLy8gbWF0Y2hlcyh7YjogMn0pKHsgYTogMSwgYjogMn0pID0+IHRydWUNCiAgZnVuY3Rpb24gbWF0Y2hlcyhhdHRycykgew0KICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBpc01hdGNoKG9iaiwgYXR0cnMpOyB9Ow0KICB9DQoNCiAgdmFyIG1hdGNoZXIgPSBtYXRjaGVzOw0KDQogIGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHsKICAgIGlmICggdGFyZ2V0ID09PSB2b2lkIDAgKSB0YXJnZXQgPSB7fTsKICAgIHZhciBzb3VyY2VzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOwogICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdOwoNCiAgICByZXR1cm4gc291cmNlcy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgc3JjKSB7DQogICAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gKHJlc3VsdFtrZXldID0gc3JjW2tleV0pOyB9KTsNCiAgICAgIHJldHVybiByZXN1bHQ7DQogICAgfSwgdGFyZ2V0KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFzc2lnbkluKHRhcmdldCkgewogICAgaWYgKCB0YXJnZXQgPT09IHZvaWQgMCApIHRhcmdldCA9IHt9OwogICAgdmFyIHNvdXJjZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7CiAgICB3aGlsZSAoIGxlbi0tID4gMCApIHNvdXJjZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07Cg0KICAgIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgWyB0YXJnZXQgXS5jb25jYXQoIHNvdXJjZXMgKSk7DQogIH0NCg0KICB2YXIgZXh0ZW5kID0gYXNzaWduSW47DQoNCiAgZnVuY3Rpb24gZGVmYXVsdHModGFyZ2V0KSB7CiAgICBpZiAoIHRhcmdldCA9PT0gdm9pZCAwICkgdGFyZ2V0ID0ge307CiAgICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsKICAgIHdoaWxlICggbGVuLS0gPiAwICkgc291cmNlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTsKDQogICAgcmV0dXJuIHNvdXJjZXMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIHNyYykgew0KICAgICAgT2JqZWN0LmtleXMoc3JjKQ0KICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFoYXMoc3JjLCBrZXkpOyB9KQ0KICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiAocmVzdWx0W2tleV0gPSBzcmNba2V5XSk7IH0pOw0KICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9LCB0YXJnZXQpOw0KICB9DQoNCiAgLy8gI2VuZHJlZ2lvbg0KDQogIC8vICNyZWdpb24gRnVuY3Rpb24NCg0KICBmdW5jdGlvbiBtZW1vaXplKGZuLCByZXNvbHZlcikgew0KICAgIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemVkLmNhY2hlLA0KICAgICAgICBhZGRyID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh2b2lkIDAsIGFyZ3MpIDogYXJnc1swXTsNCiAgICAgIGlmICghY2FjaGUuaGFzKGFkZHIpKSB7DQogICAgICAgIGNhY2hlLnNldChhZGRyLCBhcHBseShmbiwgdGhpcywgYXJncykpOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIGNhY2hlLmdldChhZGRyKTsNCiAgICB9Ow0KICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IE1hcCgpOw0KICAgIHJldHVybiBtZW1vaXplZDsNCiAgfQ0KDQogIGZ1bmN0aW9uIHBhcnRpYWwoZm4pIHsKICAgIHZhciBib3VuZEFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7CiAgICB3aGlsZSAoIGxlbi0tID4gMCApIGJvdW5kQXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTsKDQogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgX2FyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIF9hcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07Cg0KICAgICAgdmFyIGkgPSAwOw0KICAgICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MubWFwKGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIChhcmcgPT09IHBhcnRpYWwuXyA/IF9hcmdzW2krK10gOiBhcmcpOyB9KTsNCiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChfYXJncy5zbGljZShpKSk7DQogICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpOw0KICAgIH07DQogIH0NCiAgcGFydGlhbC5fID0ge307DQoNCiAgZnVuY3Rpb24gYXJ5KGZuLCBuKSB7CiAgICB2YXIgdGhpcyQxID0gdGhpczsKDQogICAgaWYgKG4gPT0gbnVsbCB8fCAhaXNOdW1iZXIobikpIHsgcmV0dXJuIGZuOyB9DQogICAgaWYgKG4gPD0gMCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZm4uY2FsbCh0aGlzJDEpOyB9OyB9DQogICAgaWYgKG4gPj0gZm4ubGVuZ3RoKSB7IHJldHVybiBmbjsgfQ0KICAgIGlmIChuID09IDEpIHsgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGZuLmNhbGwodGhpcyQxLCBhcmcpOyB9OyB9DQogICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncy5zbGljZSgwLCBuKSk7DQogICAgfTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHVuYXJ5KGZuKSB7CiAgICB2YXIgdGhpcyQxID0gdGhpczsKDQogICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHsgcmV0dXJuIGZuLmNhbGwodGhpcyQxLCBhcmcpOyB9Ow0KICB9DQoNCiAgZnVuY3Rpb24gd3JhcChmbiwgd3JhcHBlcikgewogICAgaWYgKCB3cmFwcGVyID09PSB2b2lkIDAgKSB3cmFwcGVyID0gaWRlbnRpdHk7Cg0KICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgICByZXR1cm4gYXBwbHkod3JhcHBlciwgdGhpcywgW2ZuIF0uY29uY2F0KCBhcmdzKSk7DQogICAgfTsNCiAgfQ0KDQogIC8vICNlbmRyZWdpb24NCg0KICAvLyAjcmVnaW9uIE1hdGgNCg0KICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyKSB7DQogICAgaWYgKGxvd2VyID09IG51bGwpIHsgcmV0dXJuIE1hdGgucmFuZG9tKCk7IH0NCiAgICBpZiAodXBwZXIgPT0gbnVsbCkgew0KICAgICAgdXBwZXIgPSBsb3dlcjsNCiAgICAgIGxvd2VyID0gMDsNCiAgICB9DQogICAgaWYgKGxvd2VyID4gdXBwZXIpIHsNCiAgICAgIHZhciB0ZW1wID0gbG93ZXI7DQogICAgICBsb3dlciA9IHVwcGVyOw0KICAgICAgdXBwZXIgPSB0ZW1wOw0KICAgIH0NCiAgICByZXR1cm4gbG93ZXIgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHN1bSgpIHsNCiAgICB2YXIgYXJyID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGFyZ3VtZW50c1swXSA6IGFyZ3VtZW50czsNCiAgICByZXR1cm4gcmVkdWNlKGFyciwgZnVuY3Rpb24gKHJlc3VsdCwgaXQpIHsgcmV0dXJuIChyZXN1bHQgKz0gaXQpOyB9LCAwKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGF2ZXJhZ2UoKSB7DQogICAgdmFyIGFyciA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBhcmd1bWVudHNbMF0gOiBhcmd1bWVudHM7DQogICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7DQogICAgcmV0dXJuIGxlbiA9PT0gMCA/IDAgOiBzdW0oYXJyKSAvIGxlbjsNCiAgfQ0KDQogIHZhciBhdmcgPSBhdmVyYWdlOw0KDQogIGZ1bmN0aW9uIGRlY2ltYWxBZGp1c3QobWV0aG9kTmFtZSwgbnVtYmVyLCBwcmVjaXNpb24pIHsNCiAgICBpZiAocHJlY2lzaW9uKSB7DQogICAgICB2YXIgdmFsdWUgPSBNYXRoW21ldGhvZE5hbWVdKG51bWJlciArICdlJyArIHByZWNpc2lvbik7DQogICAgICByZXR1cm4gKyh2YWx1ZSArICdlJyArIC1wcmVjaXNpb24pOw0KICAgIH0NCiAgICByZXR1cm4gTWF0aFttZXRob2ROYW1lXShudW1iZXIpOw0KICB9DQoNCiAgZnVuY3Rpb24gcm91bmQobnVtLCBwcmVjaXNpb24pIHsNCiAgICByZXR1cm4gZGVjaW1hbEFkanVzdCgncm91bmQnLCBudW0sIHByZWNpc2lvbik7DQogIH0NCg0KICBmdW5jdGlvbiBmbG9vcihudW0sIHByZWNpc2lvbikgew0KICAgIHJldHVybiBkZWNpbWFsQWRqdXN0KCdmbG9vcicsIG51bSwgcHJlY2lzaW9uKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGNlaWwobnVtLCBwcmVjaXNpb24pIHsNCiAgICByZXR1cm4gZGVjaW1hbEFkanVzdCgnY2VpbCcsIG51bSwgcHJlY2lzaW9uKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJhZGlhbnMoeCkgew0KICAgIHJldHVybiAoTWF0aC5QSSAvIDE4MCkgKiB4Ow0KICB9DQoNCiAgLy8gI2VuZHJlZ2lvbg0KDQogIC8vICNyZWdpb24gU3RyaW5nDQoNCiAgZnVuY3Rpb24gZWFjaE1hdGNoKHN0ciwgcGF0dGVybiwgZm4pIHsNCiAgICBpZiAoIWlzU3RyaW5nKHN0cikgfHwgIWlzUmVnRXhwKHBhdHRlcm4pKSB7DQogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlYWNoTWF0Y2g6IHBhdHRlcm4gbXVzdCBiZSByZWdleHAgb3Igc3RyaW5nJyk7DQogICAgfQ0KICAgIGlmICghcGF0dGVybi5nbG9iYWwpIHsNCiAgICAgIHBhdHRlcm4gPSBSZWdFeHAocGF0dGVybi5zb3VyY2UsICdnJyk7DQogICAgfQ0KICAgIHZhciBtYXRjaDsNCiAgICB3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHN0cikpKSB7DQogICAgICBpZiAoYXBwbHkoZm4sIG51bGwsIG1hdGNoKSA9PT0gZmFsc2UpIHsgYnJlYWs7IH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBmaW5kQWxsKHN0ciwgcGF0dGVybikgewogICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzOwoNCiAgICB2YXIgcnN0ID0gW107DQogICAgZWFjaE1hdGNoKHN0ciwgcGF0dGVybiwgZnVuY3Rpb24gKCkgew0KICAgICAgcnN0LnB1c2goYXJndW1lbnRzJDEubGVuZ3RoID09IDEgPyBhcmd1bWVudHMkMVswXSA6IGFyZ3VtZW50cyQxKTsNCiAgICB9KTsNCiAgICByZXR1cm4gcnN0Ow0KICB9DQoNCiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxeJC4qKz8oKVtcXXt9fF0vZzsNCiAgdmFyIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTsNCg0KICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7DQogICAgc3RyICs9ICcnOw0KICAgIHJldHVybiBzdHIgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyKSA/IHN0ci5yZXBsYWNlKHN0ciwgJ1xcJCYnKSA6IHN0cjsNCiAgfQ0KICAvLyAjZW5kcmVnaW9uCgogIHZhciB0b29sID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogICAgY2hyOiBjaHIsCiAgICBvcmQ6IG9yZCwKICAgIGhleDogaGV4LAogICAgYmluOiBiaW4sCiAgICBvY3Q6IG9jdCwKICAgIGludDogaW50LAogICAgZ2V0VGFnOiBnZXRUYWcsCiAgICB0eXBlT2Y6IHR5cGVPZiwKICAgIHR5cGU6IHR5cGUsCiAgICBoYXM6IGhhcywKICAgIGlzQXJyYXk6IGlzQXJyYXksCiAgICBpc09iamVjdDogaXNPYmplY3QsCiAgICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLAogICAgaXNTdHJpbmc6IGlzU3RyaW5nLAogICAgaXNOdW1iZXI6IGlzTnVtYmVyLAogICAgaXNCb29sZWFuOiBpc0Jvb2xlYW4sCiAgICBpc0RhdGU6IGlzRGF0ZSwKICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCwKICAgIGlzRXJyb3I6IGlzRXJyb3IsCiAgICBpc01hcDogaXNNYXAsCiAgICBpc1NldDogaXNTZXQsCiAgICBpc1dlYWtNYXA6IGlzV2Vha01hcCwKICAgIGlzSW50ZWdlcjogaXNJbnRlZ2VyLAogICAgaXNBcmd1bWVudHM6IGlzQXJndW1lbnRzLAogICAgaXNPYmplY3RMaWtlOiBpc09iamVjdExpa2UsCiAgICBpc0xlbmd0aDogaXNMZW5ndGgsCiAgICBpc0FycmF5TGlrZTogaXNBcnJheUxpa2UsCiAgICBpc0VtcHR5OiBpc0VtcHR5LAogICAgaXNCdWZmZXI6IGlzQnVmZmVyLAogICAgYXBwbHk6IGFwcGx5LAogICAgcmFuZ2U6IHJhbmdlLAogICAgdG9QYXRoOiB0b1BhdGgsCiAgICBpZGVudGl0eTogaWRlbnRpdHksCiAgICBpdGVyYXRlZTogaXRlcmF0ZWUsCiAgICBlYWNoOiBlYWNoLAogICAgZm9yRWFjaDogZm9yRWFjaCwKICAgIG1hcDogbWFwLAogICAgc2VsZWN0OiBzZWxlY3QsCiAgICByZWR1Y2U6IHJlZHVjZSwKICAgIGZpbHRlcjogZmlsdGVyLAogICAgd2hlcmU6IHdoZXJlLAogICAgdG9BcnJheTogdG9BcnJheSwKICAgIGZpbmQ6IGZpbmQsCiAgICBmaW5kSW5kZXg6IGZpbmRJbmRleCwKICAgIGdyb3VwQnk6IGdyb3VwQnksCiAgICBjb3VudEJ5OiBjb3VudEJ5LAogICAgc2l6ZTogc2l6ZSwKICAgIGxlbjogbGVuLAogICAgdW5pcUJ5OiB1bmlxQnksCiAgICB1bmlxOiB1bmlxLAogICAgZGlzdGluY3Q6IGRpc3RpbmN0LAogICAgZGlzdGluY3RCeTogZGlzdGluY3RCeSwKICAgIGNodW5rOiBjaHVuaywKICAgIGNvbmNhdDogY29uY2F0LAogICAgc2xpY2U6IHNsaWNlLAogICAgZHJvcDogZHJvcCwKICAgIHRhaWw6IHRhaWwsCiAgICBpbml0aWFsOiBpbml0aWFsLAogICAgdGFrZTogdGFrZSwKICAgIHRha2VSaWdodDogdGFrZVJpZ2h0LAogICAgY29udGFpbnM6IGNvbnRhaW5zLAogICAgaW5jbHVkZTogaW5jbHVkZSwKICAgIGluY2x1ZGVzOiBpbmNsdWRlcywKICAgIGZpcnN0OiBmaXJzdCwKICAgIGhlYWQ6IGhlYWQsCiAgICBsYXN0OiBsYXN0LAogICAgbnRoOiBudGgsCiAgICBwdWxsQWxsOiBwdWxsQWxsLAogICAgcHVsbDogcHVsbCwKICAgIHJlbW92ZTogcmVtb3ZlLAogICAgZGlmZmVyZW5jZTogZGlmZmVyZW5jZSwKICAgIHVuemlwOiB1bnppcCwKICAgIHppcDogemlwLAogICAgZmxhdHRlbjogZmxhdHRlbiwKICAgIGtleXNJbjoga2V5c0luLAogICAgdmFsdWVzSW46IHZhbHVlc0luLAogICAgemlwT2JqZWN0OiB6aXBPYmplY3QsCiAgICB0b1BhaXJzOiB0b1BhaXJzLAogICAgZW50cmllczogZW50cmllcywKICAgIHRvUGFpcnNJbjogdG9QYWlyc0luLAogICAgZW50cmllc0luOiBlbnRyaWVzSW4sCiAgICBmcm9tUGFpcnM6IGZyb21QYWlycywKICAgIG9iamVjdDogb2JqZWN0LAogICAgZ2V0OiBnZXQsCiAgICBhdDogYXQsCiAgICBwcm9wZXJ0eU9mOiBwcm9wZXJ0eU9mLAogICAgcHJvcGVydHk6IHByb3BlcnR5LAogICAgcHJvcGVydGllczogcHJvcGVydGllcywKICAgIHNldDogc2V0LAogICAgdW5zZXQ6IHVuc2V0LAogICAgdXBkYXRlOiB1cGRhdGUsCiAgICBwaWNrOiBwaWNrLAogICAgcGlja0J5OiBwaWNrQnksCiAgICBvbWl0Qnk6IG9taXRCeSwKICAgIGlzTWF0Y2g6IGlzTWF0Y2gsCiAgICBtYXRjaGVzOiBtYXRjaGVzLAogICAgbWF0Y2hlcjogbWF0Y2hlciwKICAgIGFzc2lnbjogYXNzaWduLAogICAgYXNzaWduSW46IGFzc2lnbkluLAogICAgZXh0ZW5kOiBleHRlbmQsCiAgICBkZWZhdWx0czogZGVmYXVsdHMsCiAgICBtZW1vaXplOiBtZW1vaXplLAogICAgcGFydGlhbDogcGFydGlhbCwKICAgIGFyeTogYXJ5LAogICAgdW5hcnk6IHVuYXJ5LAogICAgd3JhcDogd3JhcCwKICAgIHJhbmRvbTogcmFuZG9tLAogICAgc3VtOiBzdW0sCiAgICBhdmVyYWdlOiBhdmVyYWdlLAogICAgYXZnOiBhdmcsCiAgICByb3VuZDogcm91bmQsCiAgICBmbG9vcjogZmxvb3IsCiAgICBjZWlsOiBjZWlsLAogICAgcmFkaWFuczogcmFkaWFucywKICAgIGVhY2hNYXRjaDogZWFjaE1hdGNoLAogICAgZmluZEFsbDogZmluZEFsbCwKICAgIGVzY2FwZVJlZ0V4cDogZXNjYXBlUmVnRXhwCiAgfSk7CgogIGZ1bmN0aW9uIGxvZyhtc2cpIHsKICAgIGlmICggbXNnID09PSB2b2lkIDAgKSBtc2cgPSAnJzsKDQogICAgV1NjcmlwdC5FY2hvKG1zZyk7DQogIH0NCg0KICBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsNCiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjsNCiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwgew0KICAgICAgY29uc3RydWN0b3I6IGN0b3INCiAgICB9KTsNCiAgfQ0KDQogIHZhciBGTVRfUkVHID0gLyVbc2RpZmpvTyVdL2c7DQoNCiAgZnVuY3Rpb24gZm9ybWF0KGYpIHsNCiAgICBpZiAoIWlzU3RyaW5nKGYpKSB7DQogICAgICByZXR1cm4gbWFwKGFyZ3VtZW50cywgZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gaW5zcGVjdChhcmcpOyB9KS5qb2luKCcgJyk7DQogICAgfQ0KDQogICAgdmFyIGkgPSAxLA0KICAgICAgYXJncyA9IGFyZ3VtZW50cywNCiAgICAgIGxlbiA9IGFyZ3MubGVuZ3RoLA0KICAgICAgc3RyID0gZi5yZXBsYWNlKEZNVF9SRUcsIGZ1bmN0aW9uICh4KSB7DQogICAgICAgIGlmICh4ID09PSAnJSUnKSB7IHJldHVybiAnJSc7IH0NCiAgICAgICAgaWYgKGkgPj0gbGVuKSB7IHJldHVybiB4OyB9DQogICAgICAgIHN3aXRjaCAoeCkgew0KICAgICAgICAgIGNhc2UgJyVzJzoNCiAgICAgICAgICBjYXNlICclZCc6DQogICAgICAgICAgY2FzZSAnJWknOg0KICAgICAgICAgIGNhc2UgJyVmJzoNCiAgICAgICAgICAgIHJldHVybiBhcmdzW2krK107DQogICAgICAgICAgY2FzZSAnJWonOg0KICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7DQogICAgICAgICAgY2FzZSAnJW8nOg0KICAgICAgICAgIGNhc2UgJyVPJzoNCiAgICAgICAgICAgIHJldHVybiBpbnNwZWN0KGFyZ3NbaSsrXSk7DQogICAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICAgIHJldHVybiB4Ow0KICAgICAgICB9DQogICAgICB9KTsNCiAgICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkgew0KICAgICAgaWYgKGlzUHJpbWl0aXZlKHgpKSB7IHN0ciArPSAnICcgKyB4OyB9DQogICAgICBlbHNlIHsgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7IH0NCiAgICB9DQogICAgcmV0dXJuIHN0cjsNCiAgfQ0KDQogIC8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuDQogIC8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuDQogIC8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuDQogIGZ1bmN0aW9uIGRlcHJlY2F0ZShmbiwgbXNnKSB7CiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7Cg0KICAgIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuDQogICAgaWYgKGdsb2JhbC5wcm9jZXNzID09PSB2b2lkIDApIHsNCiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBhcHBseShkZXByZWNhdGUoZm4sIG1zZyksIG51bGwsIGFyZ3VtZW50cyQxKTsgfTsNCiAgICB9DQoNCiAgICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7IHJldHVybiBmbjsgfQ0KDQogICAgdmFyIHdhcm5lZCA9IGZhbHNlOw0KDQogICAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHsNCiAgICAgIGlmICghd2FybmVkKSB7DQogICAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHsgdGhyb3cgbmV3IEVycm9yKG1zZyk7IH0NCiAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7IGxvZyhtc2cpOyB9DQogICAgICAgIGVsc2UgeyBsb2cobXNnKTsgfQ0KICAgICAgICB3YXJuZWQgPSB0cnVlOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIGFwcGx5KGZuLCBudWxsLCBhcmd1bWVudHMpOw0KICAgIH0NCg0KICAgIHJldHVybiBkZXByZWNhdGVkOw0KICB9DQoNCiAgdmFyIGRlYnVncyA9IHt9Ow0KICB2YXIgZGVidWdFbnZpcm9uOw0KDQogIGZ1bmN0aW9uIGRlYnVnbG9nKHNldCkgewogICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzOwoNCiAgICBpZiAoZGVidWdFbnZpcm9uID09IG51bGwpIHsgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJzsgfQ0KICAgIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpOw0KICAgIGlmICghZGVidWdzW3NldF0pIHsNCiAgICAgIGlmIChuZXcgUmVnRXhwKCdcXGInICsgc2V0ICsgJ1xcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7DQogICAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDsNCiAgICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgdmFyIG1zZyA9IGFwcGx5KGZvcm1hdCwgbnVsbCwgYXJndW1lbnRzJDEpOw0KICAgICAgICAgIGxvZygoc2V0ICsgIiAiICsgcGlkICsgIjogIiArIG1zZykpOw0KICAgICAgICB9Ow0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9Ow0KICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gZGVidWdzW3NldF07DQogIH0NCg0KICAvKiBvYmosIFsgc2hvd0hpZGRlbi9vcHRpb25zLCBkZXB0aCwgY29sb3JzIF0gKi8NCiAgZnVuY3Rpb24gaW5zcGVjdChvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMpIHsNCiAgICAvLyBkZWZhdWx0IG9wdGlvbnMNCiAgICB2YXIgY3R4ID0gew0KICAgICAgc2VlbjogW10sDQogICAgICAvLyBzdHlsaXplOiBzdHlsaXplTm9Db2xvciwNCiAgICAgIHNob3dIaWRkZW46IGZhbHNlLA0KICAgICAgZGVwdGg6IDIsDQogICAgICBjb2xvcnM6IGZhbHNlLA0KICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsDQogICAgICBtYXhBcnJheUxlbmd0aDogMTAwLA0KICAgICAgYnJlYWtMZW5ndGg6IDYwDQogICAgfTsNCiAgICBpZiAoaXNCb29sZWFuKHNob3dIaWRkZW4pKSB7IGN0eC5zaG93SGlkZGVuID0gc2hvd0hpZGRlbjsgfQ0KICAgIGlmIChpc051bWJlcihkZXB0aCkpIHsgY3R4LmRlcHRoID0gZGVwdGg7IH0NCiAgICBpZiAoaXNCb29sZWFuKGNvbG9ycykpIHsgY3R4LmNvbG9ycyA9IGNvbG9yczsgfQ0KICAgIGlmIChpc09iamVjdChzaG93SGlkZGVuKSkgew0KICAgICAgLy8gZ290IGFuICJvcHRpb25zIiBvYmplY3QNCiAgICAgIE9iamVjdC5hc3NpZ24oY3R4LCBzaG93SGlkZGVuKTsNCiAgICB9DQogICAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCAwKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykgew0KICAgIHZhciByZXN1bHQ7DQogICAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLg0KICAgIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdA0KICAgIGlmICgNCiAgICAgIGN0eC5jdXN0b21JbnNwZWN0ICYmDQogICAgICB2YWx1ZSAmJg0KICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJg0KICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsDQogICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBpbnNwZWN0ICYmDQogICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay4NCiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkNCiAgICApIHsNCiAgICAgIHJlc3VsdCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpOw0KICAgICAgaWYgKCFpc1N0cmluZyhyZXN1bHQpKSB7DQogICAgICAgIHJlc3VsdCA9IGZvcm1hdFZhbHVlKGN0eCwgcmVzdWx0LCByZWN1cnNlVGltZXMpOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9DQoNCiAgICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllcw0KICAgIHJlc3VsdCA9IGZvcm1hdFZhbHVlX3NpbXBsZSh2YWx1ZSk7DQogICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UpIHsgcmV0dXJuIHJlc3VsdDsgfQ0KDQogICAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0Lg0KICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpOw0KICAgIHZhciB2aXNpYmxlS2V5cyA9IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXkpIHsgcmV0dXJuICgobWVtb1trZXldID0gdHJ1ZSksIG1lbW8pOyB9LCB7fSk7DQoNCiAgICBpZiAoY3R4LnNob3dIaWRkZW4pIHsNCiAgICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7DQogICAgfQ0KDQogICAgaWYgKHJlY3Vyc2VUaW1lcyA+IGN0eC5kZXB0aCkgeyByZXR1cm4gZ2V0VGFnKHZhbHVlKTsgfQ0KDQogICAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7DQoNCiAgICB2YXIgb3V0cHV0LA0KICAgICAgdlR5cGUgPSB0eXBlT2YodmFsdWUpOw0KICAgIG91dHB1dCA9IGZvcm1hdE9iamVjdChjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzLCB2VHlwZSk7DQogICAgY3R4LnNlZW4ucG9wKCk7DQoNCiAgICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcoY3R4LCBvdXRwdXQsIHJlY3Vyc2VUaW1lcywgdlR5cGUpOw0KICB9DQoNCiAgdmFyIEVTQ0FQU0VfTUFQID0gew0KICAgICInIjogIiciLA0KICAgICdcXCc6ICdcXCcsDQogICAgJ1xyJzogJ3InLA0KICAgICdcbic6ICduJywNCiAgICAnXHUyMDI4JzogJ3UyMDI4JywNCiAgICAnXHUyMDI5JzogJ3UyMDI5Jw0KICB9Ow0KDQogIHZhciBFU0NBUFNFX1JFRyA9IC8nfFxcfFxyfFxufFx1MjAyOHxcdTIwMjldL2c7DQoNCiAgZnVuY3Rpb24gZXNjYXBlQ2hhcihjKSB7DQogICAgcmV0dXJuICdcXCcgKyBFU0NBUFNFX01BUFtjXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGZvcm1hdFZhbHVlX3NpbXBsZSh2YWx1ZSkgew0KICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7IHJldHVybiAndW5kZWZpbmVkJzsgfQ0KICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgeyByZXR1cm4gJ251bGwnOyB9DQogICAgc3dpdGNoICh0eXBlT2YodmFsdWUpKSB7DQogICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgICByZXR1cm4gIiciICsgdmFsdWUucmVwbGFjZShFU0NBUFNFX1JFRywgZXNjYXBlQ2hhcikgKyAiJyI7DQogICAgICBjYXNlICdudW1iZXInOg0KICAgICAgY2FzZSAnYm9vbGVhbic6DQogICAgICBjYXNlICdyZWdleHAnOg0KICAgICAgY2FzZSAnYnVmZmVyJzoNCiAgICAgICAgcmV0dXJuIHZhbHVlICsgJyc7DQogICAgICBjYXNlICdkYXRlJzoNCiAgICAgICAgcmV0dXJuIHZhbHVlLnRvSlNPTigpOw0KICAgICAgY2FzZSAnZnVuY3Rpb24nOiB7DQogICAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZTsNCiAgICAgICAgcmV0dXJuIG5hbWUgPyAnW0Z1bmN0aW9uOiAnICsgbmFtZSArICddJyA6ICdbRnVuY3Rpb25dJzsNCiAgICAgIH0NCiAgICAgIGNhc2UgJ2Vycm9yJzoNCiAgICAgICAgcmV0dXJuICdbJyArIHZhbHVlICsgJ10nOw0KICAgICAgZGVmYXVsdDoNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGZvcm1hdE9iamVjdChjdHgsIG9iaiwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cywgdlR5cGUpIHsNCiAgICB2YXIgb3V0cHV0ID0gW10sDQogICAgICBpID0gMCwNCiAgICAgIGxlbiwNCiAgICAgIGtleTsNCiAgICBpZiAodlR5cGUgPT0gJ2FycmF5Jykgew0KICAgICAgbGVuID0gb2JqLmxlbmd0aDsNCiAgICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgICAgaWYgKGkgPj0gY3R4Lm1heEFycmF5TGVuZ3RoKSB7DQogICAgICAgICAgb3V0cHV0LnB1c2goJy4uLiAnICsgKGxlbiAtIGN0eC5tYXhBcnJheUxlbmd0aCkgKyAnIG1vcmUgaXRlbXMnKTsNCiAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIG9ialtpXSwgcmVjdXJzZVRpbWVzLCBudWxsLCB0cnVlLCBudWxsKSk7DQogICAgICB9DQogICAgICBpID0gbGVuOw0KICAgIH0gZWxzZSBpZiAodlR5cGUgPT0gJ21hcCcpIHsNCiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7DQogICAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywga2V5LCB0cnVlLCAnID0+ICcpKTsNCiAgICAgIH0pOw0KICAgIH0gZWxzZSBpZiAodlR5cGUgPT0gJ3NldCcpIHsNCiAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgew0KICAgICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIG51bGwsIHRydWUsIG51bGwpKTsNCiAgICAgIH0pOw0KICAgIH0NCg0KICAgIGZvciAobGVuID0ga2V5cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgew0KICAgICAga2V5ID0ga2V5c1tpXTsNCiAgICAgIG91dHB1dC5wdXNoKA0KICAgICAgICBmb3JtYXRQcm9wZXJ0eShjdHgsIG9ialtrZXldLCByZWN1cnNlVGltZXMsIGtleSwgdmlzaWJsZUtleXNba2V5XSwgJzogJykNCiAgICAgICk7DQogICAgfQ0KICAgIHJldHVybiBvdXRwdXQ7DQogIH0NCg0KICBmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIGtleSwgZW51bWVyYWJsZSwgc2VwKSB7DQogICAgdmFyIG5hbWUsIHN0cjsNCg0KICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHsNCiAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcyArIDEpOw0KICAgIH0gZWxzZSB7DQogICAgICBzdHIgPSAnW0NpcmN1bGFyXSc7DQogICAgfQ0KDQogICAgaWYgKGtleSA9PSBudWxsKSB7IHJldHVybiBzdHI7IH0NCg0KICAgIG5hbWUgPSBlbnVtZXJhYmxlID8gU3RyaW5nKGtleSkgOiAnWycgKyBrZXkgKyAnXSc7DQoNCiAgICBpZiAoIS9eXHcrJC8udGVzdChuYW1lKSkgew0KICAgICAgbmFtZSA9ICInIiArIG5hbWUucmVwbGFjZSgvJy9nLCAiXFwnIikgKyAiJyI7DQogICAgfQ0KDQogICAgcmV0dXJuIG5hbWUgKyBzZXAgKyBzdHI7DQogIH0NCg0KICBmdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhjdHgsIG91dHB1dCwgcmVjdXJzZVRpbWVzLCB2VHlwZSkgew0KICAgIHZhciBicmFjZXMsDQogICAgICBpbmRlbnQsDQogICAgICBicmVha0xpbmUgPSBmYWxzZSwNCiAgICAgIGxlbiA9IG91dHB1dC5sZW5ndGgsDQogICAgICBpID0gLTEsDQogICAgICBjb3VudCA9IDA7DQogICAgaWYgKHZUeXBlID09ICdhcnJheScpIHsgYnJhY2VzID0gWydbJywgJ10nXTsgfQ0KICAgIGVsc2UgaWYgKHZUeXBlID09ICdtYXAnKSB7IGJyYWNlcyA9IFsnTWFwIHsnLCAnfSddOyB9DQogICAgZWxzZSBpZiAodlR5cGUgPT0gJ3NldCcpIHsgYnJhY2VzID0gWydTZXQgeycsICd9J107IH0NCiAgICBlbHNlIGlmICh2VHlwZSA9PSAnYXJndW1lbnRzJykgeyBicmFjZXMgPSBbJ1tBcmd1bWVudHNdIHsnLCAnfSddOyB9DQogICAgZWxzZSB7IGJyYWNlcyA9IFsneycsICd9J107IH0NCg0KICAgIGlmIChsZW4gPT0gMCkgeyByZXR1cm4gYnJhY2VzWzBdICsgYnJhY2VzWzFdOyB9DQoNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICBjb3VudCArPSBvdXRwdXRbaV0ubGVuZ3RoICsgMTsNCiAgICAgIGlmIChjb3VudCA+IGN0eC5icmVha0xlbmd0aCkgew0KICAgICAgICBicmVha0xpbmUgPSB0cnVlOw0KICAgICAgICBicmVhazsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBsZW4gPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjdXIpIHsgcmV0dXJuIG1lbW8gKyBjdXIubGVuZ3RoICsgMTsgfSwgMCk7DQogICAgaW5kZW50ID0gJyAgJy5yZXBlYXQocmVjdXJzZVRpbWVzKTsNCiAgICBpZiAoYnJlYWtMaW5lKSB7DQogICAgICByZXR1cm4gdlR5cGUgPT0gJ2FycmF5Jw0KICAgICAgICA/IGJyYWNlc1swXSArICcgJyArIG91dHB1dC5qb2luKCcsXHJcbiAgJyArIGluZGVudCkgKyAnICcgKyBicmFjZXNbMV0NCiAgICAgICAgOiBicmFjZXNbMF0gKw0KICAgICAgICAgICAgJyBcclxuICAnICsNCiAgICAgICAgICAgIGluZGVudCArDQogICAgICAgICAgICBvdXRwdXQuam9pbignLFxyXG4gICcgKyBpbmRlbnQpICsNCiAgICAgICAgICAgICcgJyArDQogICAgICAgICAgICBicmFjZXNbMV07DQogICAgfQ0KICAgIHJldHVybiBicmFjZXNbMF0gKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7DQogICAgcmV0dXJuICFpc09iamVjdCh2YWx1ZSk7DQogIH0KCiAgdmFyIHV0aWwgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBpbmhlcml0czogaW5oZXJpdHMsCiAgICBmb3JtYXQ6IGZvcm1hdCwKICAgIGRlcHJlY2F0ZTogZGVwcmVjYXRlLAogICAgZGVidWdsb2c6IGRlYnVnbG9nLAogICAgaW5zcGVjdDogaW5zcGVjdCwKICAgIGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZQogIH0pOwoKICB2YXIgQ29uc29sZSA9IGZ1bmN0aW9uIENvbnNvbGUoc3Rkb3V0LCBzdGRlcnIpIHsNCiAgICBpZiAoIXN0ZG91dCB8fCAhKCdXcml0ZScgaW4gc3Rkb3V0KSkgew0KICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25zb2xlIGV4cGVjdHMgYSB3cml0YWJsZSBzdHJlYW0gaW5zdGFuY2UnKTsNCiAgICB9DQogICAgaWYgKCFzdGRlcnIpIHsgc3RkZXJyID0gc3Rkb3V0OyB9DQogICAgdGhpcy5fc3Rkb3V0ID0gc3Rkb3V0Ow0KICAgIHRoaXMuX3N0ZGVyciA9IHN0ZGVycjsNCiAgICB0aGlzLl90aW1lcyA9IHt9Ow0KDQogICAgZm9yICh2YXIga2V5IGluIENvbnNvbGUucHJvdG90eXBlKSB7DQogICAgICB0aGlzW2tleV0gPSB0aGlzW2tleV0uYmluZCh0aGlzKTsNCiAgICB9DQogIH07DQoNCiAgQ29uc29sZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gbG9nICgpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgdGhpcy5fc3Rkb3V0LldyaXRlTGluZShmb3JtYXQuYXBwbHkodm9pZCAwLCBhcmdzKSk7DQogIH07DQoNCiAgQ29uc29sZS5wcm90b3R5cGUuaW5mbyA9IGZ1bmN0aW9uIGluZm8gKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICB0aGlzLl9zdGRvdXQuV3JpdGVMaW5lKGZvcm1hdC5hcHBseSh2b2lkIDAsIGFyZ3MpKTsNCiAgfTsNCg0KICBDb25zb2xlLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gd2FybiAoKSB7CiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07Cg0KICAgIHRoaXMuX3N0ZGVyci5Xcml0ZUxpbmUoZm9ybWF0LmFwcGx5KHZvaWQgMCwgYXJncykpOw0KICB9Ow0KDQogIENvbnNvbGUucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IgKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICB0aGlzLl9zdGRlcnIuV3JpdGVMaW5lKGZvcm1hdC5hcHBseSh2b2lkIDAsIGFyZ3MpKTsNCiAgfTsNCg0KICBDb25zb2xlLnByb3RvdHlwZS5kaXIgPSBmdW5jdGlvbiBkaXIgKG9iamVjdCkgew0KICAgIHRoaXMuX3N0ZG91dC5Xcml0ZUxpbmUoDQogICAgICBpbnNwZWN0KG9iamVjdCwgew0KICAgICAgICBjdXN0b21JbnNwZWN0OiBmYWxzZQ0KICAgICAgfSkNCiAgICApOw0KICB9Ow0KDQogIENvbnNvbGUucHJvdG90eXBlLnRpbWUgPSBmdW5jdGlvbiB0aW1lIChsYWJlbCkgew0KICAgIHRoaXMuX3RpbWVzW2xhYmVsXSA9IERhdGUubm93KCk7DQogIH07DQoNCiAgQ29uc29sZS5wcm90b3R5cGUudGltZUVuZCA9IGZ1bmN0aW9uIHRpbWVFbmQgKGxhYmVsKSB7DQogICAgdmFyIHRpbWUgPSB0aGlzLl90aW1lc1tsYWJlbF07DQogICAgaWYgKCF0aW1lKSB7DQogICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1Y2ggbGFiZWw6ICcgKyBsYWJlbCk7DQogICAgfQ0KICAgIHZhciBkdXJhdGlvbiA9IERhdGUubm93KCkgLSB0aW1lOw0KICAgIHRoaXMubG9nKCclczogJWRtcycsIGxhYmVsLCBkdXJhdGlvbik7DQogIH07DQoNCiAgQ29uc29sZS5wcm90b3R5cGUuYXNzZXJ0ID0gZnVuY3Rpb24gYXNzZXJ0ICh2KSB7CiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOwogICAgICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07Cg0KICAgIGlmICghdikgeyB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0LmFwcGx5KHZvaWQgMCwgYXJncykpOyB9DQogIH07DQoNCiAgdmFyIGNvbnNvbGUgPSBuZXcgQ29uc29sZShXU2NyaXB0LlN0ZE91dCwgV1NjcmlwdC5TdGRFcnIpOwoKICB2YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTsKCiAgZnVuY3Rpb24gdW53cmFwRXhwb3J0cyAoeCkgewogIAlyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4OwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkgewogIAlyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7CiAgfQoKICB2YXIgTyA9ICdvYmplY3QnOwogIHZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDsKICB9OwoKICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOAogIHZhciBnbG9iYWxfMSA9CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYKICAgIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09IE8gJiYgZ2xvYmFsVGhpcykgfHwKICAgIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gTyAmJiB3aW5kb3cpIHx8CiAgICBjaGVjayh0eXBlb2Ygc2VsZiA9PSBPICYmIHNlbGYpIHx8CiAgICBjaGVjayh0eXBlb2YgY29tbW9uanNHbG9iYWwgPT0gTyAmJiBjb21tb25qc0dsb2JhbCkgfHwKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYwogICAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKCiAgdmFyIGZhaWxzID0gZnVuY3Rpb24gKGV4ZWMpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiAhIWV4ZWMoKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH07CgogIC8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkKICB2YXIgZGVzY3JpcHRvcnMgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7CiAgfSk7CgogIHZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOwogIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKICAvLyBOYXNob3JuIH4gSkRLOCBidWcKICB2YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpOwoKICAvLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZQogIHZhciBmID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTsKICAgIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlOwogIH0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTsKCiAgdmFyIG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlID0gewogIAlmOiBmCiAgfTsKCiAgdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7CiAgICByZXR1cm4gewogICAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLAogICAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksCiAgICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLAogICAgICB2YWx1ZTogdmFsdWUKICAgIH07CiAgfTsKCiAgdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7CgogIHZhciBjbGFzc29mUmF3ID0gZnVuY3Rpb24gKGl0KSB7CiAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwogIH07CgogIHZhciBzcGxpdCA9ICcnLnNwbGl0OwoKICAvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5ncwogIHZhciBpbmRleGVkT2JqZWN0ID0gZmFpbHMoZnVuY3Rpb24gKCkgewogICAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NgogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucwogICAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTsKICB9KSA/IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGNsYXNzb2ZSYXcoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTsKICB9IDogT2JqZWN0OwoKICAvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZQogIHZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gZnVuY3Rpb24gKGl0KSB7CiAgICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICIgKyBpdCk7CiAgICByZXR1cm4gaXQ7CiAgfTsKCiAgLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3MKCgoKICB2YXIgdG9JbmRleGVkT2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7CiAgICByZXR1cm4gaW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7CiAgfTsKCiAgdmFyIGlzT2JqZWN0JDEgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7CiAgfTsKCiAgLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZQogIC8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlCiAgLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmcKICB2YXIgdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHsKICAgIGlmICghaXNPYmplY3QkMShpbnB1dCkpIHJldHVybiBpbnB1dDsKICAgIHZhciBmbiwgdmFsOwogICAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCQxKHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDsKICAgIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QkMSh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7CiAgICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCQxKHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDsKICAgIHRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIik7CiAgfTsKCiAgdmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7CgogIHZhciBoYXMkMSA9IGZ1bmN0aW9uIChpdCwga2V5KSB7CiAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTsKICB9OwoKICB2YXIgZG9jdW1lbnQkMSA9IGdsb2JhbF8xLmRvY3VtZW50OwogIC8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRQogIHZhciBFWElTVFMgPSBpc09iamVjdCQxKGRvY3VtZW50JDEpICYmIGlzT2JqZWN0JDEoZG9jdW1lbnQkMS5jcmVhdGVFbGVtZW50KTsKCiAgdmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKICB9OwoKICAvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5CiAgdmFyIGllOERvbURlZmluZSA9ICFkZXNjcmlwdG9ycyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHsKICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9CiAgICB9KS5hICE9IDc7CiAgfSk7CgogIHZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcgogIHZhciBmJDEgPSBkZXNjcmlwdG9ycyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7CiAgICBPID0gdG9JbmRleGVkT2JqZWN0KE8pOwogICAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogICAgaWYgKGllOERvbURlZmluZSkgdHJ5IHsKICAgICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICAgIGlmIChoYXMkMShPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighb2JqZWN0UHJvcGVydHlJc0VudW1lcmFibGUuZi5jYWxsKE8sIFApLCBPW1BdKTsKICB9OwoKICB2YXIgb2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gewogIAlmOiBmJDEKICB9OwoKICB2YXIgYW5PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHsKICAgIGlmICghaXNPYmplY3QkMShpdCkpIHsKICAgICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTsKICAgIH0gcmV0dXJuIGl0OwogIH07CgogIHZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5CiAgdmFyIGYkMiA9IGRlc2NyaXB0b3JzID8gbmF0aXZlRGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7CiAgICBhbk9iamVjdChPKTsKICAgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTsKICAgIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOwogICAgaWYgKGllOERvbURlZmluZSkgdHJ5IHsKICAgICAgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogICAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpOwogICAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7CiAgICByZXR1cm4gTzsKICB9OwoKICB2YXIgb2JqZWN0RGVmaW5lUHJvcGVydHkgPSB7CiAgCWY6IGYkMgogIH07CgogIHZhciBoaWRlID0gZGVzY3JpcHRvcnMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gb2JqZWN0RGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7CiAgfSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICAgIG9iamVjdFtrZXldID0gdmFsdWU7CiAgICByZXR1cm4gb2JqZWN0OwogIH07CgogIHZhciBzZXRHbG9iYWwgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogICAgdHJ5IHsKICAgICAgaGlkZShnbG9iYWxfMSwga2V5LCB2YWx1ZSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBnbG9iYWxfMVtrZXldID0gdmFsdWU7CiAgICB9IHJldHVybiB2YWx1ZTsKICB9OwoKICB2YXIgc2hhcmVkID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJzsKICB2YXIgc3RvcmUgPSBnbG9iYWxfMVtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTsKCiAgKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pOwogIH0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHsKICAgIHZlcnNpb246ICczLjEuMycsCiAgICBtb2RlOiAgJ2dsb2JhbCcsCiAgICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJwogIH0pOwogIH0pOwoKICB2YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHNoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTsKCiAgdmFyIFdlYWtNYXAkMSA9IGdsb2JhbF8xLldlYWtNYXA7CgogIHZhciBuYXRpdmVXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAkMSA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKFdlYWtNYXAkMSkpOwoKICB2YXIgaWQgPSAwOwogIHZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTsKCiAgdmFyIHVpZCA9IGZ1bmN0aW9uIChrZXkpIHsKICAgIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7CiAgfTsKCiAgdmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTsKCiAgdmFyIHNoYXJlZEtleSA9IGZ1bmN0aW9uIChrZXkpIHsKICAgIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTsKICB9OwoKICB2YXIgaGlkZGVuS2V5cyA9IHt9OwoKICB2YXIgV2Vha01hcCQyID0gZ2xvYmFsXzEuV2Vha01hcDsKICB2YXIgc2V0JDEsIGdldCQxLCBoYXMkMjsKCiAgdmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBoYXMkMihpdCkgPyBnZXQkMShpdCkgOiBzZXQkMShpdCwge30pOwogIH07CgogIHZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChpdCkgewogICAgICB2YXIgc3RhdGU7CiAgICAgIGlmICghaXNPYmplY3QkMShpdCkgfHwgKHN0YXRlID0gZ2V0JDEoaXQpKS50eXBlICE9PSBUWVBFKSB7CiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpOwogICAgICB9IHJldHVybiBzdGF0ZTsKICAgIH07CiAgfTsKCiAgaWYgKG5hdGl2ZVdlYWtNYXApIHsKICAgIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwJDIoKTsKICAgIHZhciB3bWdldCA9IHN0b3JlLmdldDsKICAgIHZhciB3bWhhcyA9IHN0b3JlLmhhczsKICAgIHZhciB3bXNldCA9IHN0b3JlLnNldDsKICAgIHNldCQxID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkgewogICAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpOwogICAgICByZXR1cm4gbWV0YWRhdGE7CiAgICB9OwogICAgZ2V0JDEgPSBmdW5jdGlvbiAoaXQpIHsKICAgICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTsKICAgIH07CiAgICBoYXMkMiA9IGZ1bmN0aW9uIChpdCkgewogICAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpOwogICAgfTsKICB9IGVsc2UgewogICAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpOwogICAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlOwogICAgc2V0JDEgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7CiAgICAgIGhpZGUoaXQsIFNUQVRFLCBtZXRhZGF0YSk7CiAgICAgIHJldHVybiBtZXRhZGF0YTsKICAgIH07CiAgICBnZXQkMSA9IGZ1bmN0aW9uIChpdCkgewogICAgICByZXR1cm4gaGFzJDEoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9OwogICAgfTsKICAgIGhhcyQyID0gZnVuY3Rpb24gKGl0KSB7CiAgICAgIHJldHVybiBoYXMkMShpdCwgU1RBVEUpOwogICAgfTsKICB9CgogIHZhciBpbnRlcm5hbFN0YXRlID0gewogICAgc2V0OiBzZXQkMSwKICAgIGdldDogZ2V0JDEsCiAgICBoYXM6IGhhcyQyLAogICAgZW5mb3JjZTogZW5mb3JjZSwKICAgIGdldHRlckZvcjogZ2V0dGVyRm9yCiAgfTsKCiAgdmFyIHJlZGVmaW5lID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkgewogIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZS5nZXQ7CiAgdmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZS5lbmZvcmNlOwogIHZhciBURU1QTEFURSA9IFN0cmluZyhmdW5jdGlvblRvU3RyaW5nKS5zcGxpdCgndG9TdHJpbmcnKTsKCiAgc2hhcmVkKCdpbnNwZWN0U291cmNlJywgZnVuY3Rpb24gKGl0KSB7CiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTsKICB9KTsKCiAgKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHsKICAgIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlOwogICAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlOwogICAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlOwogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXMkMSh2YWx1ZSwgJ25hbWUnKSkgaGlkZSh2YWx1ZSwgJ25hbWUnLCBrZXkpOwogICAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpOwogICAgfQogICAgaWYgKE8gPT09IGdsb2JhbF8xKSB7CiAgICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlOwogICAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTsKICAgICAgcmV0dXJuOwogICAgfSBlbHNlIGlmICghdW5zYWZlKSB7CiAgICAgIGRlbGV0ZSBPW2tleV07CiAgICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHsKICAgICAgc2ltcGxlID0gdHJ1ZTsKICAgIH0KICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlOwogICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsdWUpOwogIC8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZQogIH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBmdW5jdGlvblRvU3RyaW5nLmNhbGwodGhpcyk7CiAgfSk7CiAgfSk7CgogIHZhciBwYXRoID0gZ2xvYmFsXzE7CgogIHZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHsKICAgIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkOwogIH07CgogIHZhciBnZXRCdWlsdEluID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7CiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsXzFbbmFtZXNwYWNlXSkKICAgICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsXzFbbmFtZXNwYWNlXSAmJiBnbG9iYWxfMVtuYW1lc3BhY2VdW21ldGhvZF07CiAgfTsKCiAgdmFyIGNlaWwkMSA9IE1hdGguY2VpbDsKICB2YXIgZmxvb3IkMSA9IE1hdGguZmxvb3I7CgogIC8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvbgogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcgogIHZhciB0b0ludGVnZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICAgIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yJDEgOiBjZWlsJDEpKGFyZ3VtZW50KTsKICB9OwoKICB2YXIgbWluID0gTWF0aC5taW47CgogIC8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGgKICB2YXIgdG9MZW5ndGggPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICAgIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCiAgfTsKCiAgdmFyIG1heCA9IE1hdGgubWF4OwogIHZhciBtaW4kMSA9IE1hdGgubWluOwoKICAvLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzoKICAvLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuCiAgLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4obGVuZ3RoLCBsZW5ndGgpLgogIHZhciB0b0Fic29sdXRlSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkgewogICAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpOwogICAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluJDEoaW50ZWdlciwgbGVuZ3RoKTsKICB9OwoKICAvLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvbgogIHZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHsKICAgICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpOwogICAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpOwogICAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpOwogICAgICB2YXIgdmFsdWU7CiAgICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0KICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkgewogICAgICAgIHZhbHVlID0gT1tpbmRleCsrXTsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlCiAgICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTsKICAgICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdAogICAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7CiAgICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTsKICAgIH07CiAgfTsKCiAgdmFyIGFycmF5SW5jbHVkZXMgPSB7CiAgICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2QKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlcwogICAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSwKICAgIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZgogICAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKQogIH07CgogIHZhciBpbmRleE9mID0gYXJyYXlJbmNsdWRlcy5pbmRleE9mOwoKCiAgdmFyIG9iamVjdEtleXNJbnRlcm5hbCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7CiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpOwogICAgdmFyIGkgPSAwOwogICAgdmFyIHJlc3VsdCA9IFtdOwogICAgdmFyIGtleTsKICAgIGZvciAoa2V5IGluIE8pICFoYXMkMShoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyQxKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTsKICAgIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXMKICAgIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzJDEoTywga2V5ID0gbmFtZXNbaSsrXSkpIHsKICAgICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIC8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5cwogIHZhciBlbnVtQnVnS2V5cyA9IFsKICAgICdjb25zdHJ1Y3RvcicsCiAgICAnaGFzT3duUHJvcGVydHknLAogICAgJ2lzUHJvdG90eXBlT2YnLAogICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywKICAgICd0b0xvY2FsZVN0cmluZycsCiAgICAndG9TdHJpbmcnLAogICAgJ3ZhbHVlT2YnCiAgXTsKCiAgdmFyIGhpZGRlbktleXMkMSA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpOwoKICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzCiAgdmFyIGYkMyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykgewogICAgcmV0dXJuIG9iamVjdEtleXNJbnRlcm5hbChPLCBoaWRkZW5LZXlzJDEpOwogIH07CgogIHZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzID0gewogIAlmOiBmJDMKICB9OwoKICB2YXIgZiQ0ID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsKCiAgdmFyIG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyA9IHsKICAJZjogZiQ0CiAgfTsKCiAgLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9scwogIHZhciBvd25LZXlzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkgewogICAgdmFyIGtleXMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eU5hbWVzLmYoYW5PYmplY3QoaXQpKTsKICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZjsKICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7CiAgfTsKCiAgdmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHsKICAgIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpOwogICAgdmFyIGRlZmluZVByb3BlcnR5ID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjsKICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZjsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgewogICAgICB2YXIga2V5ID0ga2V5c1tpXTsKICAgICAgaWYgKCFoYXMkMSh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsKICAgIH0KICB9OwoKICB2YXIgcmVwbGFjZW1lbnQgPSAvI3xcLnByb3RvdHlwZVwuLzsKCiAgdmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikgewogICAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldOwogICAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZQogICAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlCiAgICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKQogICAgICA6ICEhZGV0ZWN0aW9uOwogIH07CgogIHZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpOwogIH07CgogIHZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9OwogIHZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7CiAgdmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7CgogIHZhciBpc0ZvcmNlZF8xID0gaXNGb3JjZWQ7CgogIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mOwoKCgoKCgogIC8qCiAgICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdAogICAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdAogICAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXQKICAgIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0CiAgICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb24KICAgIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlCiAgICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb24KICAgIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb24KICAgIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHkKICAgIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzCiAgICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHkKICAgIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0CiAgKi8KICB2YXIgX2V4cG9ydCA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHsKICAgIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDsKICAgIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDsKICAgIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7CiAgICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yOwogICAgaWYgKEdMT0JBTCkgewogICAgICB0YXJnZXQgPSBnbG9iYWxfMTsKICAgIH0gZWxzZSBpZiAoU1RBVElDKSB7CiAgICAgIHRhcmdldCA9IGdsb2JhbF8xW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pOwogICAgfSBlbHNlIHsKICAgICAgdGFyZ2V0ID0gKGdsb2JhbF8xW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTsKICAgIH0KICAgIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkgewogICAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldOwogICAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkgewogICAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMSh0YXJnZXQsIGtleSk7CiAgICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7CiAgICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldOwogICAgICBGT1JDRUQgPSBpc0ZvcmNlZF8xKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7CiAgICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXQKICAgICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7CiAgICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpOwogICAgICB9CiAgICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHMKICAgICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHsKICAgICAgICBoaWRlKHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpOwogICAgICB9CiAgICAgIC8vIGV4dGVuZCBnbG9iYWwKICAgICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTsKICAgIH0KICB9OwoKICAvLyBgT2JqZWN0LmtleXNgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzCiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHsKICAgIHJldHVybiBvYmplY3RLZXlzSW50ZXJuYWwoTywgZW51bUJ1Z0tleXMpOwogIH07CgogIC8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3QKICB2YXIgdG9PYmplY3QgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICAgIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpOwogIH07CgogIHZhciBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduOwoKICAvLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnbgogIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKQogIHZhciBvYmplY3RBc3NpZ24gPSAhbmF0aXZlQXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIHZhciBBID0ge307CiAgICB2YXIgQiA9IHt9OwogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7CiAgICB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnOwogICAgQVtzeW1ib2xdID0gNzsKICAgIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTsKICAgIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0OwogIH0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTsKICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogICAgdmFyIGluZGV4ID0gMTsKICAgIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMuZjsKICAgIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlLmY7CiAgICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHsKICAgICAgdmFyIFMgPSBpbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7CiAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7CiAgICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICAgICAgdmFyIGogPSAwOwogICAgICB2YXIga2V5OwogICAgICB3aGlsZSAobGVuZ3RoID4gaikgewogICAgICAgIGtleSA9IGtleXNbaisrXTsKICAgICAgICBpZiAoIWRlc2NyaXB0b3JzIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldOwogICAgICB9CiAgICB9IHJldHVybiBUOwogIH0gOiBuYXRpdmVBc3NpZ247CgogIC8vIGBPYmplY3QuYXNzaWduYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduCiAgX2V4cG9ydCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gb2JqZWN0QXNzaWduIH0sIHsKICAgIGFzc2lnbjogb2JqZWN0QXNzaWduCiAgfSk7CgogIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3BlcnR5SXNFbnVtZXJhYmxlLmY7CgogIC8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvbgogIHZhciBjcmVhdGVNZXRob2QkMSA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7CiAgICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTsKICAgICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pOwogICAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgICAgIHZhciBpID0gMDsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICB2YXIga2V5OwogICAgICB3aGlsZSAobGVuZ3RoID4gaSkgewogICAgICAgIGtleSA9IGtleXNbaSsrXTsKICAgICAgICBpZiAoIWRlc2NyaXB0b3JzIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoTywga2V5KSkgewogICAgICAgICAgcmVzdWx0LnB1c2goVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICB9OwoKICB2YXIgb2JqZWN0VG9BcnJheSA9IHsKICAgIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllcwogICAgZW50cmllczogY3JlYXRlTWV0aG9kJDEodHJ1ZSksCiAgICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzCiAgICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZCQxKGZhbHNlKQogIH07CgogIHZhciAkZW50cmllcyA9IG9iamVjdFRvQXJyYXkuZW50cmllczsKCiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllcwogIF9leHBvcnQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHsKICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykgewogICAgICByZXR1cm4gJGVudHJpZXMoTyk7CiAgICB9CiAgfSk7CgogIHZhciBjcmVhdGVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICAgIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7CiAgICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBvYmplY3REZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpOwogICAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7CiAgfTsKCiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycwogIF9leHBvcnQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhZGVzY3JpcHRvcnMgfSwgewogICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHsKICAgICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTsKICAgICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mOwogICAgICB2YXIga2V5cyA9IG93bktleXMoTyk7CiAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgdmFyIGtleSwgZGVzY3JpcHRvcjsKICAgICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHsKICAgICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pOwogICAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH0pOwoKICAvLyBgU2FtZVZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWUKICB2YXIgc2FtZVZhbHVlID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUKICAgIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5OwogIH07CgogIC8vIGBPYmplY3QuaXNgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5pcwogIF9leHBvcnQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHsKICAgIGlzOiBzYW1lVmFsdWUKICB9KTsKCiAgdmFyICR2YWx1ZXMgPSBvYmplY3RUb0FycmF5LnZhbHVlczsKCiAgLy8gYE9iamVjdC52YWx1ZXNgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXMKICBfZXhwb3J0KHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7CiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhPKSB7CiAgICAgIHJldHVybiAkdmFsdWVzKE8pOwogICAgfQogIH0pOwoKICB2YXIgbWluJDIgPSBNYXRoLm1pbjsKCiAgLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2QgaW1wbGVtZW50YXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29weXdpdGhpbgogIHZhciBhcnJheUNvcHlXaXRoaW4gPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7CiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpOwogICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICAgIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7CiAgICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTsKICAgIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgIHZhciBjb3VudCA9IG1pbiQyKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pOwogICAgdmFyIGluYyA9IDE7CiAgICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7CiAgICAgIGluYyA9IC0xOwogICAgICBmcm9tICs9IGNvdW50IC0gMTsKICAgICAgdG8gKz0gY291bnQgLSAxOwogICAgfQogICAgd2hpbGUgKGNvdW50LS0gPiAwKSB7CiAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTsKICAgICAgZWxzZSBkZWxldGUgT1t0b107CiAgICAgIHRvICs9IGluYzsKICAgICAgZnJvbSArPSBpbmM7CiAgICB9IHJldHVybiBPOwogIH07CgogIHZhciBuYXRpdmVTeW1ib2wgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYKICAgIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTsKICB9KTsKCiAgdmFyIFN5bWJvbCQxID0gZ2xvYmFsXzEuU3ltYm9sOwogIHZhciBzdG9yZSQxID0gc2hhcmVkKCd3a3MnKTsKCiAgdmFyIHdlbGxLbm93blN5bWJvbCA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICByZXR1cm4gc3RvcmUkMVtuYW1lXSB8fCAoc3RvcmUkMVtuYW1lXSA9IG5hdGl2ZVN5bWJvbCAmJiBTeW1ib2wkMVtuYW1lXQogICAgICB8fCAobmF0aXZlU3ltYm9sID8gU3ltYm9sJDEgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTsKICB9OwoKICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzCiAgdmFyIG9iamVjdERlZmluZVByb3BlcnRpZXMgPSBkZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7CiAgICBhbk9iamVjdChPKTsKICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTsKICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIga2V5OwogICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBvYmplY3REZWZpbmVQcm9wZXJ0eS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7CiAgICByZXR1cm4gTzsKICB9OwoKICB2YXIgaHRtbCA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpOwoKICB2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7CgogIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKICB2YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07CgogIC8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUKICB2YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHsKICAgIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnCiAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKICAgIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7CiAgICB2YXIgbHQgPSAnPCc7CiAgICB2YXIgc2NyaXB0ID0gJ3NjcmlwdCc7CiAgICB2YXIgZ3QgPSAnPic7CiAgICB2YXIganMgPSAnamF2YScgKyBzY3JpcHQgKyAnOic7CiAgICB2YXIgaWZyYW1lRG9jdW1lbnQ7CiAgICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTsKICAgIGlmcmFtZS5zcmMgPSBTdHJpbmcoanMpOwogICAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDsKICAgIGlmcmFtZURvY3VtZW50Lm9wZW4oKTsKICAgIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgc2NyaXB0ICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnLycgKyBzY3JpcHQgKyBndCk7CiAgICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpOwogICAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7CiAgICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07CiAgICByZXR1cm4gY3JlYXRlRGljdCgpOwogIH07CgogIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlCiAgdmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHsKICAgIHZhciByZXN1bHQ7CiAgICBpZiAoTyAhPT0gbnVsbCkgewogICAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7CiAgICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpOwogICAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDsKICAgICAgLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwKICAgICAgcmVzdWx0W0lFX1BST1RPXSA9IE87CiAgICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpOwogICAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IG9iamVjdERlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTsKICB9OwoKICBoaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7CgogIHZhciBVTlNDT1BBQkxFUyA9IHdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTsKICB2YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7CgogIC8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzCiAgaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHsKICAgIGhpZGUoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCBvYmplY3RDcmVhdGUobnVsbCkpOwogIH0KCiAgLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQogIHZhciBhZGRUb1Vuc2NvcGFibGVzID0gZnVuY3Rpb24gKGtleSkgewogICAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlOwogIH07CgogIC8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW4KICBfZXhwb3J0KHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7CiAgICBjb3B5V2l0aGluOiBhcnJheUNvcHlXaXRoaW4KICB9KTsKCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXMKICBhZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7CgogIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGwKICB2YXIgYXJyYXlGaWxsID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykgewogICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpOwogICAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpOwogICAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7CiAgICByZXR1cm4gTzsKICB9OwoKICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsCiAgX2V4cG9ydCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwgewogICAgZmlsbDogYXJyYXlGaWxsCiAgfSk7CgogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzCiAgYWRkVG9VbnNjb3BhYmxlcygnZmlsbCcpOwoKICB2YXIgYUZ1bmN0aW9uJDEgPSBmdW5jdGlvbiAoaXQpIHsKICAgIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgewogICAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTsKICAgIH0gcmV0dXJuIGl0OwogIH07CgogIC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwogIHZhciBiaW5kQ29udGV4dCA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7CiAgICBhRnVuY3Rpb24kMShmbik7CiAgICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47CiAgICBzd2l0Y2ggKGxlbmd0aCkgewogICAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCk7CiAgICAgIH07CiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7CiAgICAgIH07CiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7CiAgICAgIH07CiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7CiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7CiAgICAgIH07CiAgICB9CiAgICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHsKICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CiAgICB9OwogIH07CgogIC8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2FycmF5CiAgdmFyIGlzQXJyYXkkMSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHsKICAgIHJldHVybiBjbGFzc29mUmF3KGFyZykgPT0gJ0FycmF5JzsKICB9OwoKICB2YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpOwoKICAvLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGUKICB2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkgewogICAgdmFyIEM7CiAgICBpZiAoaXNBcnJheSQxKG9yaWdpbmFsQXJyYXkpKSB7CiAgICAgIEMgPSBvcmlnaW5hbEFycmF5LmNvbnN0cnVjdG9yOwogICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFjawogICAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheSQxKEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7CiAgICAgIGVsc2UgaWYgKGlzT2JqZWN0JDEoQykpIHsKICAgICAgICBDID0gQ1tTUEVDSUVTXTsKICAgICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpOwogIH07CgogIHZhciBwdXNoID0gW10ucHVzaDsKCiAgLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb24KICB2YXIgY3JlYXRlTWV0aG9kJDIgPSBmdW5jdGlvbiAoVFlQRSkgewogICAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTsKICAgIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7CiAgICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMzsKICAgIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDsKICAgIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2OwogICAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7CiAgICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0LCBzcGVjaWZpY0NyZWF0ZSkgewogICAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTsKICAgICAgdmFyIHNlbGYgPSBpbmRleGVkT2JqZWN0KE8pOwogICAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmRDb250ZXh0KGNhbGxiYWNrZm4sIHRoYXQsIDMpOwogICAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpOwogICAgICB2YXIgaW5kZXggPSAwOwogICAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlOwogICAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDsKICAgICAgdmFyIHZhbHVlLCByZXN1bHQ7CiAgICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikgewogICAgICAgIHZhbHVlID0gc2VsZltpbmRleF07CiAgICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pOwogICAgICAgIGlmIChUWVBFKSB7CiAgICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXAKICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7CiAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lCiAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kCiAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXgKICAgICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlcgogICAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAgLy8gZXZlcnkKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDsKICAgIH07CiAgfTsKCiAgdmFyIGFycmF5SXRlcmF0aW9uID0gewogICAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoCiAgICBmb3JFYWNoOiBjcmVhdGVNZXRob2QkMigwKSwKICAgIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2QKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXAKICAgIG1hcDogY3JlYXRlTWV0aG9kJDIoMSksCiAgICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCQyKDIpLAogICAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2QKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lCiAgICBzb21lOiBjcmVhdGVNZXRob2QkMigzKSwKICAgIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5CiAgICBldmVyeTogY3JlYXRlTWV0aG9kJDIoNCksCiAgICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmQKICAgIGZpbmQ6IGNyZWF0ZU1ldGhvZCQyKDUpLAogICAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleAogICAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QkMig2KQogIH07CgogIHZhciAkZmluZEluZGV4ID0gYXJyYXlJdGVyYXRpb24uZmluZEluZGV4OwoKCiAgdmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JzsKICB2YXIgU0tJUFNfSE9MRVMgPSB0cnVlOwoKICAvLyBTaG91bGRuJ3Qgc2tpcCBob2xlcwogIGlmIChGSU5EX0lOREVYIGluIFtdKSBBcnJheSgxKVtGSU5EX0lOREVYXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pOwoKICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleAogIF9leHBvcnQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHsKICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7CiAgICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0KICB9KTsKCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXMKICBhZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpOwoKICB2YXIgJGZpbmQgPSBhcnJheUl0ZXJhdGlvbi5maW5kOwoKCiAgdmFyIEZJTkQgPSAnZmluZCc7CiAgdmFyIFNLSVBTX0hPTEVTJDEgPSB0cnVlOwoKICAvLyBTaG91bGRuJ3Qgc2tpcCBob2xlcwogIGlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTJDEgPSBmYWxzZTsgfSk7CgogIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmQKICBfZXhwb3J0KHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyQxIH0sIHsKICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHsKICAgICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0KICB9KTsKCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXMKICBhZGRUb1Vuc2NvcGFibGVzKEZJTkQpOwoKICAvLyBgRmxhdHRlbkludG9BcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheQogIHZhciBmbGF0dGVuSW50b0FycmF5ID0gZnVuY3Rpb24gKHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykgewogICAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7CiAgICB2YXIgc291cmNlSW5kZXggPSAwOwogICAgdmFyIG1hcEZuID0gbWFwcGVyID8gYmluZENvbnRleHQobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlOwogICAgdmFyIGVsZW1lbnQ7CgogICAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7CiAgICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHsKICAgICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTsKCiAgICAgICAgaWYgKGRlcHRoID4gMCAmJiBpc0FycmF5JDEoZWxlbWVudCkpIHsKICAgICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHRhcmdldEluZGV4ID49IDB4MUZGRkZGRkZGRkZGRkYpIHRocm93IFR5cGVFcnJvcignRXhjZWVkIHRoZSBhY2NlcHRhYmxlIGFycmF5IGxlbmd0aCcpOwogICAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7CiAgICAgICAgfQoKICAgICAgICB0YXJnZXRJbmRleCsrOwogICAgICB9CiAgICAgIHNvdXJjZUluZGV4Kys7CiAgICB9CiAgICByZXR1cm4gdGFyZ2V0SW5kZXg7CiAgfTsKCiAgdmFyIGZsYXR0ZW5JbnRvQXJyYXlfMSA9IGZsYXR0ZW5JbnRvQXJyYXk7CgogIC8vIGBBcnJheS5wcm90b3R5cGUuZmxhdE1hcGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZmxhdE1hcAogIF9leHBvcnQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHsKICAgIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHsKICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICAgICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICAgICAgdmFyIEE7CiAgICAgIGFGdW5jdGlvbiQxKGNhbGxiYWNrZm4pOwogICAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApOwogICAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXlfMShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgICAgcmV0dXJuIEE7CiAgICB9CiAgfSk7CgogIC8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZmxhdE1hcAogIF9leHBvcnQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHsKICAgIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7CiAgICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7CiAgICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApOwogICAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXlfMShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoQXJnKSk7CiAgICAgIHJldHVybiBBOwogICAgfQogIH0pOwoKICAvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yCiAgdmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgRU5UUklFUykgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKICAgIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pCiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddOwogICAgICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7CiAgICAgIHRocm93IGVycm9yOwogICAgfQogIH07CgogIHZhciBpdGVyYXRvcnMgPSB7fTsKCiAgdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwogIHZhciBBcnJheVByb3RvdHlwZSQxID0gQXJyYXkucHJvdG90eXBlOwoKICAvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCiAgdmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKGl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGUkMVtJVEVSQVRPUl0gPT09IGl0KTsKICB9OwoKICB2YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTsKICAvLyBFUzMgd3JvbmcgaGVyZQogIHZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnOwoKICAvLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvcgogIHZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkgewogICAgdHJ5IHsKICAgICAgcmV0dXJuIGl0W2tleV07CiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CiAgfTsKCiAgLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYAogIHZhciBjbGFzc29mID0gZnVuY3Rpb24gKGl0KSB7CiAgICB2YXIgTywgdGFnLCByZXN1bHQ7CiAgICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcKICAgICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlCiAgICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZwogICAgICAvLyBidWlsdGluVGFnIGNhc2UKICAgICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykKICAgICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawogICAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0OwogIH07CgogIHZhciBJVEVSQVRPUiQxID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwoKICB2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHsKICAgIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUiQxXQogICAgICB8fCBpdFsnQEBpdGVyYXRvciddCiAgICAgIHx8IGl0ZXJhdG9yc1tjbGFzc29mKGl0KV07CiAgfTsKCiAgLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvbgogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb20KICB2YXIgYXJyYXlGcm9tID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykgewogICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpOwogICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5OwogICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pOwogICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmRDb250ZXh0KG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTsKICAgIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlCiAgICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkgewogICAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7CiAgICAgIHJlc3VsdCA9IG5ldyBDKCk7CiAgICAgIGZvciAoOyEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykgewogICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcKICAgICAgICAgID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpCiAgICAgICAgICA6IHN0ZXAudmFsdWUKICAgICAgICApOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7CiAgICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgdmFyIElURVJBVE9SJDIgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CiAgdmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlOwoKICB0cnkgewogICAgdmFyIGNhbGxlZCA9IDA7CiAgICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0gewogICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9OwogICAgICB9LAogICAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkgewogICAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7CiAgICAgIH0KICAgIH07CiAgICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1IkMl0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsCiAgICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTsKICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CgogIHZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7CiAgICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTsKICAgIHRyeSB7CiAgICAgIHZhciBvYmplY3QgPSB7fTsKICAgICAgb2JqZWN0W0lURVJBVE9SJDJdID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9OwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgIH07CiAgICAgIGV4ZWMob2JqZWN0KTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICAgIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDsKICB9OwoKICB2YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7CiAgICBBcnJheS5mcm9tKGl0ZXJhYmxlKTsKICB9KTsKCiAgLy8gYEFycmF5LmZyb21gIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LmZyb20KICBfZXhwb3J0KHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwgewogICAgZnJvbTogYXJyYXlGcm9tCiAgfSk7CgogIHZhciAkaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLmluY2x1ZGVzOwoKCiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzCiAgX2V4cG9ydCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwgewogICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykgewogICAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9CiAgfSk7CgogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzCiAgYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTsKCiAgdmFyIElTTlRfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH0KICAgIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTsKICB9KTsKCiAgLy8gYEFycmF5Lm9mYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5vZgogIC8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljCiAgX2V4cG9ydCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU05UX0dFTkVSSUMgfSwgewogICAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHsKICAgICAgdmFyIGluZGV4ID0gMDsKICAgICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFyZ3VtZW50c0xlbmd0aCk7CiAgICAgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTsKICAgICAgcmVzdWx0Lmxlbmd0aCA9IGFyZ3VtZW50c0xlbmd0aDsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9KTsKCiAgdmFyIGRlZmluZVByb3BlcnR5ID0gb2JqZWN0RGVmaW5lUHJvcGVydHkuZjsKCiAgdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlOwogIHZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7CiAgdmFyIG5hbWVSRSA9IC9eXHMqZnVuY3Rpb24gKFteIChdKikvOwogIHZhciBOQU1FID0gJ25hbWUnOwoKICAvLyBGdW5jdGlvbiBpbnN0YW5jZXMgYC5uYW1lYCBwcm9wZXJ0eQogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lCiAgaWYgKGRlc2NyaXB0b3JzICYmICEoTkFNRSBpbiBGdW5jdGlvblByb3RvdHlwZSkpIHsKICAgIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7CiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTsKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQoKICB2YXIgZmxvb3IkMiA9IE1hdGguZmxvb3I7CgogIC8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2QgaW1wbGVtZW50YXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNpbnRlZ2VyCiAgdmFyIGlzSW50ZWdlciQxID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7CiAgICByZXR1cm4gIWlzT2JqZWN0JDEoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vciQyKGl0KSA9PT0gaXQ7CiAgfTsKCiAgLy8gYE51bWJlci5pc0ludGVnZXJgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc2ludGVnZXIKICBfZXhwb3J0KHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7CiAgICBpc0ludGVnZXI6IGlzSW50ZWdlciQxCiAgfSk7CgogIC8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hbgogIF9leHBvcnQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHsKICAgIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZQogICAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjsKICAgIH0KICB9KTsKCiAgdmFyIGFicyA9IE1hdGguYWJzOwoKICAvLyBgTnVtYmVyLmlzU2FmZUludGVnZXJgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyCiAgX2V4cG9ydCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwgewogICAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHsKICAgICAgcmV0dXJuIGlzSW50ZWdlciQxKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxRkZGRkZGRkZGRkZGRjsKICAgIH0KICB9KTsKCiAgLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXMKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlbgogIHZhciB3aGl0ZXNwYWNlcyA9ICdcdTAwMDlcdTAwMEFcdTAwMEJcdTAwMENcdTAwMERcdTAwMjBcdTAwQTBcdTE2ODBcdTIwMDBcdTIwMDFcdTIwMDJcdTIwMDNcdTIwMDRcdTIwMDVcdTIwMDZcdTIwMDdcdTIwMDhcdTIwMDlcdTIwMEFcdTIwMkZcdTIwNUZcdTMwMDBcdTIwMjhcdTIwMjlcdUZFRkYnOwoKICB2YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nOwogIHZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7CiAgdmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7CgogIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb24KICB2YXIgY3JlYXRlTWV0aG9kJDMgPSBmdW5jdGlvbiAoVFlQRSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykgewogICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTsKICAgICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpOwogICAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7CiAgICAgIHJldHVybiBzdHJpbmc7CiAgICB9OwogIH07CgogIHZhciBzdHJpbmdUcmltID0gewogICAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHMKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0CiAgICBzdGFydDogY3JlYXRlTWV0aG9kJDMoMSksCiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmQKICAgIGVuZDogY3JlYXRlTWV0aG9kJDMoMiksCiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2QKICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbQogICAgdHJpbTogY3JlYXRlTWV0aG9kJDMoMykKICB9OwoKICB2YXIgdHJpbSA9IHN0cmluZ1RyaW0udHJpbTsKCgogIHZhciBuYXRpdmVQYXJzZUZsb2F0ID0gZ2xvYmFsXzEucGFyc2VGbG9hdDsKICB2YXIgRk9SQ0VEID0gMSAvIG5hdGl2ZVBhcnNlRmxvYXQod2hpdGVzcGFjZXMgKyAnLTAnKSAhPT0gLUluZmluaXR5OwoKICAvLyBgcGFyc2VGbG9hdGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmcKICB2YXIgX3BhcnNlRmxvYXQgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykgewogICAgdmFyIHRyaW1tZWRTdHJpbmcgPSB0cmltKFN0cmluZyhzdHJpbmcpKTsKICAgIHZhciByZXN1bHQgPSBuYXRpdmVQYXJzZUZsb2F0KHRyaW1tZWRTdHJpbmcpOwogICAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiB0cmltbWVkU3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDsKICB9IDogbmF0aXZlUGFyc2VGbG9hdDsKCiAgLy8gYE51bWJlci5wYXJzZUZsb2F0YCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1udW1iZXIucGFyc2VGbG9hdAogIF9leHBvcnQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUZsb2F0ICE9IF9wYXJzZUZsb2F0IH0sIHsKICAgIHBhcnNlRmxvYXQ6IF9wYXJzZUZsb2F0CiAgfSk7CgogIHZhciB0cmltJDEgPSBzdHJpbmdUcmltLnRyaW07CgoKICB2YXIgbmF0aXZlUGFyc2VJbnQgPSBnbG9iYWxfMS5wYXJzZUludDsKICB2YXIgaGV4JDEgPSAvXlsrLV0/MFtYeF0vOwogIHZhciBGT1JDRUQkMSA9IG5hdGl2ZVBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgbmF0aXZlUGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMjsKCiAgLy8gYHBhcnNlSW50YCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXgKICB2YXIgX3BhcnNlSW50ID0gRk9SQ0VEJDEgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7CiAgICB2YXIgUyA9IHRyaW0kMShTdHJpbmcoc3RyaW5nKSk7CiAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4JDEudGVzdChTKSA/IDE2IDogMTApKTsKICB9IDogbmF0aXZlUGFyc2VJbnQ7CgogIC8vIGBOdW1iZXIucGFyc2VJbnRgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZWludAogIF9leHBvcnQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUludCAhPSBfcGFyc2VJbnQgfSwgewogICAgcGFyc2VJbnQ6IF9wYXJzZUludAogIH0pOwoKICAvLyBgdGhpc051bWJlclZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10aGlzbnVtYmVydmFsdWUKICB2YXIgdGhpc051bWJlclZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICBpZiAodHlwZW9mIHZhbHVlICE9ICdudW1iZXInICYmIGNsYXNzb2ZSYXcodmFsdWUpICE9ICdOdW1iZXInKSB7CiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTsKICAgIH0KICAgIHJldHVybiArdmFsdWU7CiAgfTsKCiAgdmFyIG5hdGl2ZVRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uOwoKICB2YXIgRk9SQ0VEJDIgPSBmYWlscyhmdW5jdGlvbiAoKSB7CiAgICAvLyBJRTctCiAgICByZXR1cm4gbmF0aXZlVG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7CiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIC8vIFY4IH4gQW5kcm9pZCA0LjMtCiAgICBuYXRpdmVUb1ByZWNpc2lvbi5jYWxsKHt9KTsKICB9KTsKCiAgLy8gYE51bWJlci5wcm90b3R5cGUudG9QcmVjaXNpb25gIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW51bWJlci5wcm90b3R5cGUudG9wcmVjaXNpb24KICBfZXhwb3J0KHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEJDIgfSwgewogICAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikgewogICAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQKICAgICAgICA/IG5hdGl2ZVRvUHJlY2lzaW9uLmNhbGwodGhpc051bWJlclZhbHVlKHRoaXMpKQogICAgICAgIDogbmF0aXZlVG9QcmVjaXNpb24uY2FsbCh0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7CiAgICB9CiAgfSk7CgogIC8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFncwogIHZhciByZWdleHBGbGFncyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7CiAgICB2YXIgcmVzdWx0ID0gJyc7CiAgICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7CiAgICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knOwogICAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nOwogICAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnOwogICAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JzsKICAgIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JzsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlcgogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzCiAgaWYgKGRlc2NyaXB0b3JzICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSB7CiAgICBvYmplY3REZWZpbmVQcm9wZXJ0eS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHsKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICBnZXQ6IHJlZ2V4cEZsYWdzCiAgICB9KTsKICB9CgogIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgY29kZVBvaW50QXQsIGF0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb24KICB2YXIgY3JlYXRlTWV0aG9kJDQgPSBmdW5jdGlvbiAoQ09OVkVSVF9UT19TVFJJTkcpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykgewogICAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7CiAgICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpOwogICAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoOwogICAgICB2YXIgZmlyc3QsIHNlY29uZDsKICAgICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsKICAgICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pOwogICAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplCiAgICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYKICAgICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdAogICAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwOwogICAgfTsKICB9OwoKICB2YXIgc3RyaW5nTXVsdGlieXRlID0gewogICAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdAogICAgY29kZUF0OiBjcmVhdGVNZXRob2QkNChmYWxzZSksCiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kCiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0CiAgICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCQ0KHRydWUpCiAgfTsKCiAgdmFyIGNvZGVBdCA9IHN0cmluZ011bHRpYnl0ZS5jb2RlQXQ7CgogIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0CiAgX2V4cG9ydCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHsKICAgIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHsKICAgICAgcmV0dXJuIGNvZGVBdCh0aGlzLCBwb3MpOwogICAgfQogIH0pOwoKICB2YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7CgogIC8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNyZWdleHAKICB2YXIgaXNSZWdleHAgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHZhciBpc1JlZ0V4cDsKICAgIHJldHVybiBpc09iamVjdCQxKGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2ZSYXcoaXQpID09ICdSZWdFeHAnKTsKICB9OwoKICB2YXIgbm90QVJlZ2V4cCA9IGZ1bmN0aW9uIChpdCkgewogICAgaWYgKGlzUmVnZXhwKGl0KSkgewogICAgICB0aHJvdyBUeXBlRXJyb3IoIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9ucyIpOwogICAgfSByZXR1cm4gaXQ7CiAgfTsKCiAgdmFyIE1BVENIJDEgPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7CgogIHZhciBjb3JyZWN0SXNSZWdleHBMb2dpYyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkgewogICAgdmFyIHJlZ2V4cCA9IC8uLzsKICAgIHRyeSB7CiAgICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApOwogICAgfSBjYXRjaCAoZSkgewogICAgICB0cnkgewogICAgICAgIHJlZ2V4cFtNQVRDSCQxXSA9IGZhbHNlOwogICAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTsKICAgICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9CiAgICB9IHJldHVybiBmYWxzZTsKICB9OwoKICAvLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcwogIF9leHBvcnQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnZXhwTG9naWMoJ2luY2x1ZGVzJykgfSwgewogICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykgewogICAgICByZXR1cm4gISF+U3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpCiAgICAgICAgLmluZGV4T2Yobm90QVJlZ2V4cChzZWFyY2hTdHJpbmcpLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9CiAgfSk7CgogIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXQKICB2YXIgc3RyaW5nUmVwZWF0ID0gJycucmVwZWF0IHx8IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkgewogICAgdmFyIHN0ciA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTsKICAgIHZhciByZXN1bHQgPSAnJzsKICAgIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTsKICAgIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTsKICAgIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZAoKCgoKICB2YXIgY2VpbCQyID0gTWF0aC5jZWlsOwoKICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvbgogIHZhciBjcmVhdGVNZXRob2QkNSA9IGZ1bmN0aW9uIChJU19FTkQpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykgewogICAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7CiAgICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDsKICAgICAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7CiAgICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpOwogICAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyOwogICAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUzsKICAgICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDsKICAgICAgc3RyaW5nRmlsbGVyID0gc3RyaW5nUmVwZWF0LmNhbGwoZmlsbFN0ciwgY2VpbCQyKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpOwogICAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTsKICAgICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTOwogICAgfTsKICB9OwoKICB2YXIgc3RyaW5nUGFkID0gewogICAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZAogICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydAogICAgc3RhcnQ6IGNyZWF0ZU1ldGhvZCQ1KGZhbHNlKSwKICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kCiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZAogICAgZW5kOiBjcmVhdGVNZXRob2QkNSh0cnVlKQogIH07CgogIHZhciB1c2VyQWdlbnQgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7CgogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODAKCgogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXVuc2FmZS1yZWdleAogIHZhciB3ZWJraXRTdHJpbmdQYWRCdWcgPSAvVmVyc2lvblwvMTBcLlxkKyhcLlxkKyk/KCBNb2JpbGVcL1x3Kyk/IFNhZmFyaVwvLy50ZXN0KHVzZXJBZ2VudCk7CgogIHZhciAkcGFkU3RhcnQgPSBzdHJpbmdQYWQuc3RhcnQ7CgoKICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRzdGFydAogIF9leHBvcnQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiB3ZWJraXRTdHJpbmdQYWRCdWcgfSwgewogICAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHsKICAgICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0KICB9KTsKCiAgdmFyICRwYWRFbmQgPSBzdHJpbmdQYWQuZW5kOwoKCiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZAogIF9leHBvcnQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiB3ZWJraXRTdHJpbmdQYWRCdWcgfSwgewogICAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykgewogICAgICByZXR1cm4gJHBhZEVuZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0KICB9KTsKCiAgLy8gYFN0cmluZy5yYXdgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXcKICBfZXhwb3J0KHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSB9LCB7CiAgICByYXc6IGZ1bmN0aW9uIHJhdyh0ZW1wbGF0ZSkgewogICAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodGVtcGxhdGUucmF3KTsKICAgICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IHRvTGVuZ3RoKHJhd1RlbXBsYXRlLmxlbmd0aCk7CiAgICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB2YXIgZWxlbWVudHMgPSBbXTsKICAgICAgdmFyIGkgPSAwOwogICAgICB3aGlsZSAobGl0ZXJhbFNlZ21lbnRzID4gaSkgewogICAgICAgIGVsZW1lbnRzLnB1c2goU3RyaW5nKHJhd1RlbXBsYXRlW2krK10pKTsKICAgICAgICBpZiAoaSA8IGFyZ3VtZW50c0xlbmd0aCkgZWxlbWVudHMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7CiAgICAgIH0gcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpOwogICAgfQogIH0pOwoKICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0CiAgX2V4cG9ydCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHsKICAgIHJlcGVhdDogc3RyaW5nUmVwZWF0CiAgfSk7CgogIHZhciBuYXRpdmVTdGFydHNXaXRoID0gJycuc3RhcnRzV2l0aDsKICB2YXIgbWluJDMgPSBNYXRoLm1pbjsKCiAgLy8gYFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoCiAgX2V4cG9ydCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdleHBMb2dpYygnc3RhcnRzV2l0aCcpIH0sIHsKICAgIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7CiAgICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpOwogICAgICBub3RBUmVnZXhwKHNlYXJjaFN0cmluZyk7CiAgICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKG1pbiQzKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpOwogICAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7CiAgICAgIHJldHVybiBuYXRpdmVTdGFydHNXaXRoCiAgICAgICAgPyBuYXRpdmVTdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkKICAgICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDsKICAgIH0KICB9KTsKCiAgdmFyIG5hdGl2ZUVuZHNXaXRoID0gJycuZW5kc1dpdGg7CiAgdmFyIG1pbiQ0ID0gTWF0aC5taW47CgogIC8vIGBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoCiAgX2V4cG9ydCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdleHBMb2dpYygnZW5kc1dpdGgnKSB9LCB7CiAgICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7CiAgICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpOwogICAgICBub3RBUmVnZXhwKHNlYXJjaFN0cmluZyk7CiAgICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogICAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpOwogICAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbiQ0KHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTsKICAgICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgICByZXR1cm4gbmF0aXZlRW5kc1dpdGgKICAgICAgICA/IG5hdGl2ZUVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpCiAgICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDsKICAgIH0KICB9KTsKCiAgdmFyIG5vbiA9ICdcdTIwMEJcdTAwODVcdTE4MEUnOwoKICAvLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdAogIC8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWUKICB2YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkgewogICAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKCkgfHwgbm9uW01FVEhPRF9OQU1FXSgpICE9IG5vbiB8fCB3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0ubmFtZSAhPT0gTUVUSE9EX05BTUU7CiAgICB9KTsKICB9OwoKICB2YXIgJHRyaW1TdGFydCA9IHN0cmluZ1RyaW0uc3RhcnQ7CgoKICB2YXIgRk9SQ0VEJDMgPSBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltU3RhcnQnKTsKCiAgdmFyIHRyaW1TdGFydCA9IEZPUkNFRCQzID8gZnVuY3Rpb24gdHJpbVN0YXJ0KCkgewogICAgcmV0dXJuICR0cmltU3RhcnQodGhpcyk7CiAgfSA6ICcnLnRyaW1TdGFydDsKCiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltU3RhcnQsIHRyaW1MZWZ0IH1gIG1ldGhvZHMKICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0KICBfZXhwb3J0KHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEJDMgfSwgewogICAgdHJpbVN0YXJ0OiB0cmltU3RhcnQsCiAgICB0cmltTGVmdDogdHJpbVN0YXJ0CiAgfSk7CgogIHZhciAkdHJpbUVuZCA9IHN0cmluZ1RyaW0uZW5kOwoKCiAgdmFyIEZPUkNFRCQ0ID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbUVuZCcpOwoKICB2YXIgdHJpbUVuZCA9IEZPUkNFRCQ0ID8gZnVuY3Rpb24gdHJpbUVuZCgpIHsKICAgIHJldHVybiAkdHJpbUVuZCh0aGlzKTsKICB9IDogJycudHJpbUVuZDsKCiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kcwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbQogIF9leHBvcnQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQkNCB9LCB7CiAgICB0cmltRW5kOiB0cmltRW5kLAogICAgdHJpbVJpZ2h0OiB0cmltRW5kCiAgfSk7CgogIHZhciBuYXRpdmVBcHBseSA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnYXBwbHknKTsKICB2YXIgZnVuY3Rpb25BcHBseSA9IEZ1bmN0aW9uLmFwcGx5OwoKICAvLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWwKICB2YXIgT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgbmF0aXZlQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTsKICB9KTsKCiAgLy8gYFJlZmxlY3QuYXBwbHlgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuYXBwbHkKICBfZXhwb3J0KHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgfSwgewogICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7CiAgICAgIGFGdW5jdGlvbiQxKHRhcmdldCk7CiAgICAgIGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpOwogICAgICByZXR1cm4gbmF0aXZlQXBwbHkKICAgICAgICA/IG5hdGl2ZUFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KQogICAgICAgIDogZnVuY3Rpb25BcHBseS5jYWxsKHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KTsKICAgIH0KICB9KTsKCiAgdmFyIHNsaWNlJDEgPSBbXS5zbGljZTsKICB2YXIgZmFjdG9yaWVzID0ge307CgogIHZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykgewogICAgaWYgKCEoYXJnc0xlbmd0aCBpbiBmYWN0b3JpZXMpKSB7CiAgICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJzsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jCiAgICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9IEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBsaXN0LmpvaW4oJywnKSArICcpJyk7CiAgICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7CiAgfTsKCiAgLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb24KICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZAogIHZhciBmdW5jdGlvbkJpbmQgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHsKICAgIHZhciBmbiA9IGFGdW5jdGlvbiQxKHRoaXMpOwogICAgdmFyIHBhcnRBcmdzID0gc2xpY2UkMS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGZ1bmN0aW9uIGJvdW5kKC8qIGFyZ3MuLi4gKi8pIHsKICAgICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoc2xpY2UkMS5jYWxsKGFyZ3VtZW50cykpOwogICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGZuLmFwcGx5KHRoYXQsIGFyZ3MpOwogICAgfTsKICAgIGlmIChpc09iamVjdCQxKGZuLnByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlOwogICAgcmV0dXJuIGJvdW5kRnVuY3Rpb247CiAgfTsKCiAgdmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7CgogIC8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3QKICAvLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWwKICAvLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0CiAgdmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfQogICAgcmV0dXJuICEobmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7CiAgfSk7CiAgdmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pOwogIH0pOwogIHZhciBGT1JDRUQkNSA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHOwoKICBfZXhwb3J0KHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEJDUsIHNoYW06IEZPUkNFRCQ1IH0sIHsKICAgIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykgewogICAgICBhRnVuY3Rpb24kMShUYXJnZXQpOwogICAgICBhbk9iamVjdChhcmdzKTsKICAgICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uJDEoYXJndW1lbnRzWzJdKTsKICAgICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7CiAgICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7CiAgICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHMKICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7CiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pOwogICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pOwogICAgICAgIH0KICAgICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZQogICAgICAgIHZhciAkYXJncyA9IFtudWxsXTsKICAgICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTsKICAgICAgICByZXR1cm4gbmV3IChmdW5jdGlvbkJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7CiAgICAgIH0KICAgICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzCiAgICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7CiAgICAgIHZhciBpbnN0YW5jZSA9IG9iamVjdENyZWF0ZShpc09iamVjdCQxKHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7CiAgICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpOwogICAgICByZXR1cm4gaXNPYmplY3QkMShyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7CiAgICB9CiAgfSk7CgogIC8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2UKICB2YXIgRVJST1JfSU5TVEVBRF9PRl9GQUxTRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3REZWZpbmVQcm9wZXJ0eS5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pOwogIH0pOwoKICAvLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5kZWZpbmVwcm9wZXJ0eQogIF9leHBvcnQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhZGVzY3JpcHRvcnMgfSwgewogICAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHsKICAgICAgYW5PYmplY3QodGFyZ2V0KTsKICAgICAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTsKICAgICAgYW5PYmplY3QoYXR0cmlidXRlcyk7CiAgICAgIHRyeSB7CiAgICAgICAgb2JqZWN0RGVmaW5lUHJvcGVydHkuZih0YXJnZXQsIGtleSwgYXR0cmlidXRlcyk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSk7CgogIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IkMiA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mOwoKICAvLyBgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eWAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5kZWxldGVwcm9wZXJ0eQogIF9leHBvcnQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7CiAgICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkgewogICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciQyKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTsKICAgICAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTsKICAgIH0KICB9KTsKCiAgdmFyIGNvcnJlY3RQcm90b3R5cGVHZXR0ZXIgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfQogICAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsOwogICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7CiAgfSk7CgogIHZhciBJRV9QUk9UTyQxID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpOwogIHZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlOwoKICAvLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2YKICB2YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSBjb3JyZWN0UHJvdG90eXBlR2V0dGVyID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHsKICAgIE8gPSB0b09iamVjdChPKTsKICAgIGlmIChoYXMkMShPLCBJRV9QUk9UTyQxKSkgcmV0dXJuIE9bSUVfUFJPVE8kMV07CiAgICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3RvcikgewogICAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDsKICB9OwoKICAvLyBgUmVmbGVjdC5nZXRgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZ2V0CiAgZnVuY3Rpb24gZ2V0JDIodGFyZ2V0LCBwcm9wZXJ0eUtleSAvKiAsIHJlY2VpdmVyICovKSB7CiAgICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTsKICAgIHZhciBkZXNjcmlwdG9yLCBwcm90b3R5cGU7CiAgICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldOwogICAgaWYgKGRlc2NyaXB0b3IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyQxKGRlc2NyaXB0b3IsICd2YWx1ZScpCiAgICAgID8gZGVzY3JpcHRvci52YWx1ZQogICAgICA6IGRlc2NyaXB0b3IuZ2V0ID09PSB1bmRlZmluZWQKICAgICAgICA/IHVuZGVmaW5lZAogICAgICAgIDogZGVzY3JpcHRvci5nZXQuY2FsbChyZWNlaXZlcik7CiAgICBpZiAoaXNPYmplY3QkMShwcm90b3R5cGUgPSBvYmplY3RHZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldCQyKHByb3RvdHlwZSwgcHJvcGVydHlLZXksIHJlY2VpdmVyKTsKICB9CgogIF9leHBvcnQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7CiAgICBnZXQ6IGdldCQyCiAgfSk7CgogIC8vIGBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IKICBfZXhwb3J0KHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFkZXNjcmlwdG9ycyB9LCB7CiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7CiAgICAgIHJldHVybiBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7CiAgICB9CiAgfSk7CgogIC8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldHByb3RvdHlwZW9mCiAgX2V4cG9ydCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhY29ycmVjdFByb3RvdHlwZUdldHRlciB9LCB7CiAgICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7CiAgICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTsKICAgIH0KICB9KTsKCiAgLy8gYFJlZmxlY3QuaGFzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmhhcwogIF9leHBvcnQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7CiAgICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7CiAgICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7CiAgICB9CiAgfSk7CgogIHZhciBvYmplY3RJc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwoKICAvLyBgUmVmbGVjdC5pc0V4dGVuc2libGVgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZmxlY3QuaXNleHRlbnNpYmxlCiAgX2V4cG9ydCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHsKICAgIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkgewogICAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgICByZXR1cm4gb2JqZWN0SXNFeHRlbnNpYmxlID8gb2JqZWN0SXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlOwogICAgfQogIH0pOwoKICAvLyBgUmVmbGVjdC5vd25LZXlzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXMKICBfZXhwb3J0KHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwgewogICAgb3duS2V5czogb3duS2V5cwogIH0pOwoKICB2YXIgZnJlZXppbmcgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7CiAgfSk7CgogIC8vIGBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnByZXZlbnRleHRlbnNpb25zCiAgX2V4cG9ydCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhZnJlZXppbmcgfSwgewogICAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkgewogICAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgICB0cnkgewogICAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpOwogICAgICAgIGlmIChvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucykgb2JqZWN0UHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9KTsKCiAgLy8gYFJlZmxlY3Quc2V0YCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldAogIGZ1bmN0aW9uIHNldCQyKHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykgewogICAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107CiAgICB2YXIgb3duRGVzY3JpcHRvciA9IG9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvci5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTsKICAgIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvdHlwZTsKICAgIGlmICghb3duRGVzY3JpcHRvcikgewogICAgICBpZiAoaXNPYmplY3QkMShwcm90b3R5cGUgPSBvYmplY3RHZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgewogICAgICAgIHJldHVybiBzZXQkMihwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7CiAgICAgIH0KICAgICAgb3duRGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwKTsKICAgIH0KICAgIGlmIChoYXMkMShvd25EZXNjcmlwdG9yLCAndmFsdWUnKSkgewogICAgICBpZiAob3duRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0JDEocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7CiAgICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjsKICAgICAgICBvYmplY3REZWZpbmVQcm9wZXJ0eS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTsKICAgICAgfSBlbHNlIG9iamVjdERlZmluZVByb3BlcnR5LmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgVikpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBvd25EZXNjcmlwdG9yLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzY3JpcHRvci5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpOwogIH0KCiAgX2V4cG9ydCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHsKICAgIHNldDogc2V0JDIKICB9KTsKCiAgdmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChpdCkgewogICAgaWYgKCFpc09iamVjdCQxKGl0KSAmJiBpdCAhPT0gbnVsbCkgewogICAgICB0aHJvdyBUeXBlRXJyb3IoIkNhbid0IHNldCAiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTsKICAgIH0gcmV0dXJuIGl0OwogIH07CgogIC8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZAogIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZgogIC8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLgogIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCiAgdmFyIG9iamVjdFNldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHsKICAgIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlOwogICAgdmFyIHRlc3QgPSB7fTsKICAgIHZhciBzZXR0ZXI7CiAgICB0cnkgewogICAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7CiAgICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTsKICAgICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7CiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CiAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHsKICAgICAgYW5PYmplY3QoTyk7CiAgICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7CiAgICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pOwogICAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87CiAgICAgIHJldHVybiBPOwogICAgfTsKICB9KCkgOiB1bmRlZmluZWQpOwoKICAvLyBgUmVmbGVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVmbGVjdC5zZXRwcm90b3R5cGVvZgogIGlmIChvYmplY3RTZXRQcm90b3R5cGVPZikgX2V4cG9ydCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHsKICAgIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7CiAgICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7CiAgICAgIHRyeSB7CiAgICAgICAgb2JqZWN0U2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90byk7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfSk7CgogIHZhciByZWZsZWN0ID0gcGF0aC5SZWZsZWN0OwoKICB2YXIgUk9PVF9SRUdFWFAgPSAvXihbQS16XTp8KVsvXFxdLzsNCiAgdmFyIFNFUF9SRUdFWFAgPSAvWy9cXF0rLzsNCiAgdmFyIFNFUF9SRUdFWFBfRU5EID0gL1svXFxdJC87DQogIHZhciBMTktfUkVHRVhQID0gLyhcLmxua3xcLnVybCkkLzsNCg0KICB2YXIgU0VQID0gJ1xcJzsNCiAgdmFyIHNlcCA9IFNFUDsNCg0KICBmdW5jdGlvbiBpc2FicyhwdGgpIHsNCiAgICByZXR1cm4gcHRoICYmIFJPT1RfUkVHRVhQLnRlc3QocHRoKTsNCiAgfQ0KDQogIHZhciBpc0Fic29sdXRlID0gaXNhYnM7DQoNCiAgZnVuY3Rpb24gZGlybmFtZShwdGgpIHsNCiAgICByZXR1cm4gX19GU08uR2V0UGFyZW50Rm9sZGVyTmFtZShwdGgpOw0KICB9DQoNCiAgZnVuY3Rpb24gYmFzZW5hbWUocHRoLCBleHQpIHsNCiAgICByZXR1cm4gZXh0ID8gX19GU08uR2V0QmFzZU5hbWUocHRoKSA6IF9fRlNPLkdldEZpbGVOYW1lKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBleHRuYW1lKHB0aCkgew0KICAgIHJldHVybiBfX0ZTTy5HZXRFeHRlbnNpb25OYW1lKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBhYnNwYXRoKHB0aCkgew0KICAgIGlmICghaXNhYnMocHRoKSkgeyBwdGggPSBfX2Rpcm5hbWUgKyBTRVAgKyBwdGg7IH0NCiAgICByZXR1cm4gX19GU08uR2V0QWJzb2x1dGVQYXRoTmFtZShwdGgpOw0KICB9DQoNCiAgZnVuY3Rpb24gbm9ybXBhdGgocHRoKSB7DQogICAgdmFyIHBhcnRzID0gcHRoLnNwbGl0KFNFUF9SRUdFWFApLA0KICAgICAgbm9ybVBhcnRzID0gW10sDQogICAgICBsZW4gPSBwYXJ0cy5sZW5ndGgsDQogICAgICBwYXJ0Ow0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgIHBhcnQgPSBwYXJ0c1tpXTsNCiAgICAgIGlmIChwYXJ0ID09PSAnLi4nKSB7IG5vcm1QYXJ0cy5wb3AoKTsgfQ0KICAgICAgZWxzZSBpZiAocGFydCA9PT0gJy4nKSB7IGNvbnRpbnVlOyB9DQogICAgICBlbHNlIHsgbm9ybVBhcnRzLnB1c2gocGFydCk7IH0NCiAgICB9DQogICAgcmV0dXJuIG5vcm1QYXJ0cy5qb2luKFNFUCk7DQogIH0NCg0KICB2YXIgbm9ybWFsaXplJDEgPSBub3JtcGF0aDsNCg0KICBmdW5jdGlvbiBqb2luKCkgewogICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzOwoNCiAgICB2YXIgcCwNCiAgICAgIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGgsDQogICAgICBwYXJ0cyA9IFtdOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgIHAgPSBhcmd1bWVudHMkMVtpXTsNCiAgICAgIGlmICh0eXBlb2YgcCA9PT0gJ3N0cmluZycpIHsgcGFydHMucHVzaChwKTsgfQ0KICAgIH0NCiAgICByZXR1cm4gbm9ybXBhdGgocGFydHMuam9pbihTRVApKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlc29sdmUoKSB7CiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7Cg0KICAgIHZhciBwLA0KICAgICAgbGVuID0gYXJndW1lbnRzLmxlbmd0aCwNCiAgICAgIHBhcnRzID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgew0KICAgICAgcCA9IGFyZ3VtZW50cyQxW2ldOw0KICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJykgew0KICAgICAgICBpZiAoUk9PVF9SRUdFWFAudGVzdChwKSkgew0KICAgICAgICAgIHBhcnRzLmxlbmd0aCA9IDA7DQogICAgICAgICAgcGFydHNbMF0gPSBwOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHBhcnRzLnB1c2gocCk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIGFic3BhdGgocGFydHMuam9pbihTRVApKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlbGF0aXZlKGZyb20sIHRvKSB7DQogICAgdmFyIGZyb21fID0gYWJzcGF0aChmcm9tKS50b0xvd2VyQ2FzZSgpLA0KICAgICAgdG9fID0gYWJzcGF0aCh0bykudG9Mb3dlckNhc2UoKSwNCiAgICAgIGZyb21QYXJ0cyA9IGZyb21fLnNwbGl0KFNFUF9SRUdFWFApLA0KICAgICAgdG9QYXJ0cyA9IHRvXy5zcGxpdChTRVBfUkVHRVhQKSwNCiAgICAgIGxlbiA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKSwNCiAgICAgIHNhbWVQYXJ0c0xlbiA9IGxlbiwNCiAgICAgIGkgPSAtMTsNCg0KICAgIHdoaWxlICgrK2kgPCBsZW4pIHsNCiAgICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHsNCiAgICAgICAgc2FtZVBhcnRzTGVuID0gaTsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQogICAgfQ0KDQogICAgaWYgKHNhbWVQYXJ0c0xlbiA9PSAwKSB7IHJldHVybiB0bzsgfQ0KDQogICAgdmFyIG91dHB1dFBhcnRzID0gW107DQogICAgZm9yIChpID0gc2FtZVBhcnRzTGVuOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7DQogICAgICBvdXRwdXRQYXJ0cy5wdXNoKCcuLicpOw0KICAgIH0NCg0KICAgIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuKSk7DQoNCiAgICByZXR1cm4gb3V0cHV0UGFydHMuam9pbihTRVApOw0KICB9DQoNCiAgZnVuY3Rpb24gaXNmaWxlKHB0aCkgew0KICAgIHJldHVybiBfX0ZTTy5GaWxlRXhpc3RzKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBpc2RpcihwdGgpIHsNCiAgICByZXR1cm4gX19GU08uRm9sZGVyRXhpc3RzKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBleGlzdHMocHRoKSB7DQogICAgcmV0dXJuIGlzZmlsZShwdGgpIHx8IGlzZGlyKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBjcmVhdGVTaG9ydGN1dChwdGgsIG9wdGlvbnMpIHsNCiAgICB2YXIgc2hvcnRjdXQgPSBfX1dTaGVsbC5DcmVhdGVTaG9ydGN1dChwdGgpOw0KICAgIGlmIChvcHRpb25zLnRhcmdldCkgeyBzaG9ydGN1dC5UYXJnZXRQYXRoID0gb3B0aW9ucy50YXJnZXQ7IH0NCiAgICBpZiAob3B0aW9ucy5ydW5TdHlsZSkgeyBzaG9ydGN1dC5XaW5kb3dTdHlsZSA9IG9wdGlvbnMucnVuU3R5bGU7IH0gLy9OT1JNQUwoMSksTUFYKDMpLE1JTig3KQ0KICAgIGlmIChvcHRpb25zLmRlc2MpIHsgc2hvcnRjdXQuRGVzY3JpcHRpb24gPSBvcHRpb25zLmRlc2M7IH0NCiAgICBzaG9ydGN1dC5TYXZlKCk7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRTaG9ydGN1dFRhcmdldChwdGgpIHsNCiAgICB2YXIgc2hvcnRjdXQgPSBfX1dTaGVsbC5DcmVhdGVTaG9ydGN1dChwdGgpOw0KICAgIHJldHVybiBzaG9ydGN1dC5UYXJnZXRQYXRoOw0KICB9DQoNCiAgdmFyIEZJTEVfUFJPVE8gPSB7DQogICAgaXNmaWxlOiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiAodGhpcy5fZmlsZS5BdHRyaWJ1dGVzICYgMTYpID09IDA7DQogICAgfSwNCiAgICBpc0ZpbGU6IGZ1bmN0aW9uKCkgew0KICAgICAgcmV0dXJuICh0aGlzLl9maWxlLkF0dHJpYnV0ZXMgJiAxNikgPT0gMDsNCiAgICB9LA0KICAgIGlzZGlyOiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiAodGhpcy5fZmlsZS5BdHRyaWJ1dGVzICYgMTYpID09IDE2Ow0KICAgIH0sDQogICAgaXNEaXJlY3Rvcnk6IGZ1bmN0aW9uKCkgew0KICAgICAgcmV0dXJuICh0aGlzLl9maWxlLkF0dHJpYnV0ZXMgJiAxNikgPT0gMTY7DQogICAgfSwNCiAgICBpc1Nob3J0Y3V0OiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiB0aGlzLmlzRmlsZSgpICYmIExOS19SRUdFWFAudGVzdCh0aGlzLnBhdGgpOw0KICAgIH0sDQogICAgY3JlYXRlU2hvcnRjdXQ6IGZ1bmN0aW9uKHB0aCwgb3B0aW9ucykgew0KICAgICAgb3B0aW9ucy50YXJnZXQgPSB0aGlzLnBhdGg7DQogICAgICBjcmVhdGVTaG9ydGN1dChwdGgsIG9wdGlvbnMpOw0KICAgIH0sDQogICAgY29weTogZnVuY3Rpb24oZHN0LCBvdykgew0KICAgICAgaWYgKCFpc2Ficyhkc3QpKSB7IGRzdCA9IGFic3BhdGgoZHN0KTsgfQ0KICAgICAgaWYgKCFTRVBfUkVHRVhQX0VORC50ZXN0KGRzdCkpIHsgZHN0ICs9IFNFUDsgfQ0KICAgICAgaWYgKCFpc2Rpcihkc3QpKSB7IG1rZGlycyhkc3QpOyB9DQogICAgICByZXR1cm4gdGhpcy5fZmlsZS5Db3B5KGRzdCwgb3cgPT0gbnVsbCA/IHRydWUgOiAhIW93KTsNCiAgICB9LA0KICAgIGRlbGV0ZTogZnVuY3Rpb24oZm9yY2UpIHsNCiAgICAgIHJldHVybiB0aGlzLl9maWxlLkRlbGV0ZSghIWZvcmNlKTsNCiAgICB9LA0KICAgIG1vdmU6IGZ1bmN0aW9uKGRzdCkgew0KICAgICAgaWYgKCFpc2Ficyhkc3QpKSB7IGRzdCA9IGFic3BhdGgoZHN0KTsgfQ0KICAgICAgaWYgKCFTRVBfUkVHRVhQX0VORC50ZXN0KGRzdCkpIHsgZHN0ICs9IFNFUDsgfQ0KICAgICAgaWYgKCFpc2Rpcihkc3QpKSB7IG1rZGlycyhkc3QpOyB9DQogICAgICByZXR1cm4gdGhpcy5fZmlsZS5Nb3ZlKGRzdCk7DQogICAgfSwNCiAgICBnZXRDaGlsZHJlbjogZnVuY3Rpb24oKSB7DQogICAgICB2YXIgc2VsZiA9IHRoaXMuaXNTaG9ydGN1dCgpID8gZ2V0U3RhdHModGhpcy50YXJnZXQpIDogdGhpczsNCiAgICAgIGlmIChzZWxmLmlzRmlsZSgpKSB7IHJldHVybiBudWxsOyB9DQogICAgICB2YXIgX2VudW0gPSBuZXcgRW51bWVyYXRvcihzZWxmLl9maWxlLkZpbGVzKTsNCiAgICAgIHZhciByc3QgPSBbXTsNCiAgICAgIGZvciAoOyAhX2VudW0uYXRFbmQoKTsgX2VudW0ubW92ZU5leHQoKSkgew0KICAgICAgICByc3QucHVzaChnZXRTdGF0cyhfZW51bS5pdGVtKCkpKTsNCiAgICAgIH0NCiAgICAgIF9lbnVtID0gbmV3IEVudW1lcmF0b3Ioc2VsZi5fZmlsZS5TdWJGb2xkZXJzKTsNCiAgICAgIGZvciAoOyAhX2VudW0uYXRFbmQoKTsgX2VudW0ubW92ZU5leHQoKSkgew0KICAgICAgICByc3QucHVzaChnZXRTdGF0cyhfZW51bS5pdGVtKCkpKTsNCiAgICAgIH0NCiAgICAgIHJldHVybiByc3Q7DQogICAgfQ0KICB9Ow0KDQogIHZhciBGSUxFX1BST1BTID0gew0KICAgIF9maWxlOiB7DQogICAgICB2YWx1ZTogbnVsbCwNCiAgICAgIHdyaXRhYmxlOiB0cnVlDQogICAgfSwNCiAgICBuYW1lOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGUuTmFtZTsNCiAgICAgIH0sDQogICAgICBzZXQ6IGZ1bmN0aW9uKHYpIHsNCiAgICAgICAgdGhpcy5fZmlsZS5OYW1lID0gdjsNCiAgICAgIH0NCiAgICB9LA0KICAgIHBhdGg6IHsNCiAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICBnZXQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5fZmlsZS5QYXRoOw0KICAgICAgfQ0KICAgIH0sDQogICAgZGlybmFtZTogew0KICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9maWxlLlBhcmVudEZvbGRlci5QYXRoOw0KICAgICAgfQ0KICAgIH0sDQogICAgc2l6ZTogew0KICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLl9maWxlLlNpemU7DQogICAgICB9DQogICAgfSwNCiAgICB0eXBlOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbGUuVHlwZTsNCiAgICAgIH0NCiAgICB9LA0KICAgIHRhcmdldDogew0KICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLmlzU2hvcnRjdXQoKSA/IGdldFNob3J0Y3V0VGFyZ2V0KHRoaXMucGF0aCkgOiBudWxsOw0KICAgICAgfQ0KICAgIH0sDQogICAgYXRpbWU6IHsNCiAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICBnZXQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5fZmlsZS5EYXRlTGFzdEFjY2Vzc2VkKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIG10aW1lOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuX2ZpbGUuRGF0ZUxhc3RNb2RpZmllZCk7DQogICAgICB9DQogICAgfSwNCiAgICBjdGltZTogew0KICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLl9maWxlLkRhdGVDcmVhdGVkKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIGF0aW1lTXM6IHsNCiAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICBnZXQ6IGZ1bmN0aW9uKCkgew0KICAgICAgICByZXR1cm4gdGhpcy5hdGltZS5nZXRUaW1lKCk7DQogICAgICB9DQogICAgfSwNCiAgICBtdGltZU1zOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMubXRpbWUuZ2V0VGltZSgpOw0KICAgICAgfQ0KICAgIH0sDQogICAgY3RpbWVNczogew0KICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICAgIHJldHVybiB0aGlzLmN0aW1lLmdldFRpbWUoKTsNCiAgICAgIH0NCiAgICB9LA0KICAgIHJlYWRvbmx5OiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuICEhKHRoaXMuX2ZpbGUuQXR0cmlidXRlcyAmIDEpOw0KICAgICAgfQ0KICAgIH0sDQogICAgaGlkZGVuOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuICEhKHRoaXMuX2ZpbGUuQXR0cmlidXRlcyAmIDIpOw0KICAgICAgfQ0KICAgIH0sDQogICAgc3lzdGVtOiB7DQogICAgICBlbnVtZXJhYmxlOiB0cnVlLA0KICAgICAgZ2V0OiBmdW5jdGlvbigpIHsNCiAgICAgICAgcmV0dXJuICEhKHRoaXMuX2ZpbGUuQXR0cmlidXRlcyAmIDQpOw0KICAgICAgfQ0KICAgIH0NCiAgfTsNCg0KICBmdW5jdGlvbiBnZXRTdGF0cyhwdGgpIHsNCiAgICB2YXIgZiwNCiAgICAgIGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShGSUxFX1BST1RPLCBGSUxFX1BST1BTKTsNCiAgICBpZiAodHlwZW9mIHB0aCA9PSAnb2JqZWN0Jykgew0KICAgICAgZiA9IHB0aDsNCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwdGggPT0gJ3N0cmluZycpIHsNCiAgICAgIGlmICghaXNhYnMocHRoKSkgeyBwdGggPSBhYnNwYXRoKHB0aCk7IH0NCiAgICAgIGlmIChpc2ZpbGUocHRoKSkgew0KICAgICAgICBmID0gX19GU08uR2V0RmlsZShwdGgpOw0KICAgICAgfSBlbHNlIGlmIChpc2RpcihwdGgpKSB7DQogICAgICAgIGYgPSBfX0ZTTy5HZXRGb2xkZXIocHRoKTsNCiAgICAgIH0NCiAgICB9DQogICAgaWYgKCFmKSB7IHRocm93IG5ldyBFcnJvcigoIkVOT0VOVCwgbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeSAoIiArIHB0aCArICIpIikpOyB9DQogICAgaW5zdGFuY2UuX2ZpbGUgPSBmOw0KICAgIHJldHVybiBpbnN0YW5jZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHNjYW5kaXIocHRoKSB7DQogICAgcmV0dXJuIGdldFN0YXRzKHB0aCkuZ2V0Q2hpbGRyZW4oKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1rZGlyKHB0aCkgew0KICAgIHJldHVybiBfX0ZTTy5DcmVhdGVGb2xkZXIocHRoKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1rZGlycyhwdGgpIHsNCiAgICB2YXIgZGlyID0gcHRoLA0KICAgICAgZGlycyA9IFtdOw0KICAgIHdoaWxlIChkaXIpIHsNCiAgICAgIGlmIChpc2RpcihkaXIpKSB7IGJyZWFrOyB9DQogICAgICBkaXJzLnB1c2goZGlyKTsNCiAgICAgIGRpciA9IGRpcm5hbWUoZGlyKTsNCiAgICB9DQogICAgdmFyIGkgPSBkaXJzLmxlbmd0aDsNCiAgICB3aGlsZSAoaS0tKSB7IG1rZGlyKGRpcnNbaV0pOyB9DQogIH0NCg0KICBmdW5jdGlvbiBybWRpcihwdGgpIHsNCiAgICByZXR1cm4gaXNkaXIocHRoKSAmJiBfX0ZTTy5EZWxldGVGb2xkZXIocHRoKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlbW92ZSQxKHB0aCkgew0KICAgIHJldHVybiBpc2ZpbGUocHRoKSAmJiBfX0ZTTy5EZWxldGVGaWxlKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBjb3B5ZmlsZShwdGgsIGRzdCwgb3cpIHsNCiAgICBpZiAoIWlzYWJzKGRzdCkpIHsgZHN0ID0gYWJzcGF0aChkaXJuYW1lKHB0aCkgKyBTRVAgKyBkc3QpOyB9DQogICAgaWYgKCFTRVBfUkVHRVhQX0VORC50ZXN0KGRzdCkpIHsgZHN0ICs9IFNFUDsgfQ0KICAgIGlmICghaXNkaXIoZHN0KSkgeyBta2RpcnMoZHN0KTsgfQ0KICAgIF9fRlNPLkNvcHlGaWxlKHB0aCwgZHN0LCBvdyB8fCBmYWxzZSk7DQogIH0NCg0KICBmdW5jdGlvbiByZXBsKHB0aCwgZHN0KSB7DQogICAgaWYgKCFpc2Ficyhkc3QpKSB7IGRzdCA9IGFic3BhdGgoZGlybmFtZShwdGgpICsgU0VQICsgZHN0KTsgfQ0KICAgIHZhciBkaXIgPSBkaXJuYW1lKGRzdCk7DQogICAgdmFyIG5hbWUgPSBiYXNlbmFtZShkc3QpOw0KICAgIGlmIChpc2ZpbGUoZHN0KSkgeyB0aHJvdyBuZXcgRXJyb3IoZHN0ICsgJyBpcyBleGlzdHMuIHJlcGwgZmFpZC4nKTsgfQ0KICAgIGlmICghaXNkaXIoZGlyKSkgeyBta2RpcnMoZGlyKTsgfQ0KICAgIGVsc2UgaWYgKGlzZGlyKGRzdCkpIHsgcm1kaXIoZHN0KTsgfQ0KICAgIHZhciBmID0gZ2V0U3RhdHMocHRoKTsNCiAgICBpZiAoZi5uYW1lICE9IG5hbWUpIHsgZi5uYW1lID0gbmFtZTsgfQ0KICAgIGlmIChmLmRpcm5hbWUgIT0gZGlyKSB7IGYubW92ZShkaXIpOyB9DQogIH0KCiAgZnVuY3Rpb24gc3RhdFN5bmMocHRoKSB7DQogICAgcmV0dXJuIGdldFN0YXRzKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiByZWFkZGlyU3luYyhwdGgpIHsNCiAgICByZXR1cm4gc2NhbmRpcihwdGgpLm1hcChmdW5jdGlvbiAoaXQpIHsgcmV0dXJuIGl0Lm5hbWU7IH0pOw0KICB9DQoNCiAgZnVuY3Rpb24gd2l0aFN0cmVhbShvcHRpb25zLCBmbikgew0KICAgIHZhciBzdCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdBRE9EQi5TdHJlYW0nKSwNCiAgICAgIGZpbGUgPSBvcHRpb25zLmZpbGUsDQogICAgICBlbmNvZGluZyA9IG9wdGlvbnMuZW5jb2RpbmcsDQogICAgICBmbGFnID0gb3B0aW9ucy5mbGFnLA0KICAgICAgcnN0Ow0KICAgIHRyeSB7DQogICAgICBpZiAoZW5jb2RpbmcgPT0gJ2JpbmFyeScpIHsgc3QuVHlwZSA9IDE7IH0NCiAgICAgIGVsc2UgeyBzdC5DaGFyc2V0ID0gZW5jb2Rpbmc7IH0NCiAgICAgIHN0Lk9wZW4oKTsNCiAgICAgIGlmIChmbGFnID09ICdyJyB8fCBmbGFnID09ICdhJykgew0KICAgICAgICBpZiAoIWlzZmlsZShmaWxlKSkNCiAgICAgICAgICB7IHRocm93IG5ldyBFcnJvcigoIndpdGhTdHJlYW06IGZpbGUgbm90IGV4aXN0cy4gKCIgKyBmaWxlICsgIikiKSk7IH0NCiAgICAgICAgc3QuTG9hZEZyb21GaWxlKGZpbGUpOw0KICAgICAgfQ0KICAgICAgaWYgKGZsYWcgPT0gJ2EnKSB7IHN0LlBvc2l0aW9uID0gc3QuU2l6ZTsgfQ0KICAgICAgcnN0ID0gZm4oc3QpOw0KICAgIH0gZmluYWxseSB7DQogICAgICBzdCAmJiBzdC5TdGF0ZSA9PSAxICYmIHN0LmNsb3NlKCk7DQogICAgfQ0KICAgIHJldHVybiByc3Q7DQogIH0NCg0KICBmdW5jdGlvbiBzYXZlU3RyZWFtKHN0LCBvcHRpb25zKSB7DQogICAgdmFyIHNraXBMZW4gPSAwLA0KICAgICAgZmlsZSA9IG9wdGlvbnMuZmlsZSwNCiAgICAgIGVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZy5yZXBsYWNlKCctJywgJycpLnRvTG93ZXJDYXNlKCk7DQogICAgaWYgKGVuY29kaW5nID09ICd1dGY4JyB8fCBlbmNvZGluZyA9PSAndW5pY29kZScpIHsgc2tpcExlbiA9IDM7IH0NCiAgICBlbHNlIGlmIChlbmNvZGluZyA9PSAndWZ0MTYnKSB7IHNraXBMZW4gPSAyOyB9DQogICAgc3QuU2V0RU9TKCk7DQogICAgaWYgKHNraXBMZW4pIHsNCiAgICAgIHN0LlBvc2l0aW9uID0gMDsNCiAgICAgIHN0LlR5cGUgPSAxOw0KICAgICAgc3QuUG9zaXRpb24gPSBza2lwTGVuOw0KICAgICAgdmFyIGJpbkRhdGEgPSBzdC5SZWFkKC0xKTsNCiAgICAgIHN0LlBvc2l0aW9uID0gMDsNCiAgICAgIHN0LldyaXRlKGJpbkRhdGEpOw0KICAgICAgc3QuU2V0RU9TKCk7DQogICAgfQ0KICAgIHN0LlNhdmVUb0ZpbGUoZmlsZSwgMik7DQogIH0NCg0KICBmdW5jdGlvbiBpbml0QXJncyhmaWxlLCBvcHRpb25zKSB7DQogICAgdmFyIHRwLCBlbmNvZGluZywgZmxhZzsNCiAgICBpZiAoIWlzYWJzKGZpbGUpKSB7IHRocm93IG5ldyBFcnJvcignZnM6IHJlbGF0aXZlIHBhdGggaXMgbm90IHN1cHBvcnRlZCcpOyB9DQogICAgdHAgPSB0eXBlb2Ygb3B0aW9uczsNCiAgICBpZiAodHAgPT0gJ3N0cmluZycpIHsNCiAgICAgIGVuY29kaW5nID0gb3B0aW9uczsNCiAgICB9IGVsc2UgaWYgKHRwID09ICdvYmplY3QnKSB7DQogICAgICBpZiAob3B0aW9ucy5lbmNvZGluZykgeyBlbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7IH0NCiAgICAgIGlmIChvcHRpb25zLmZsYWcpIHsgZmxhZyA9IG9wdGlvbnMuZmxhZzsgfQ0KICAgICAgZWxzZSBpZiAob3B0aW9ucy5mbGFncykgeyBmbGFnID0gb3B0aW9ucy5mbGFnczsgfQ0KICAgIH0NCiAgICBpZiAoZmxhZyAmJiBmbGFnLmxlbmd0aCA+IDEpIHsgZmxhZyA9IGZsYWcuY2hhckF0KDApOyB9DQogICAgcmV0dXJuIHsgZmlsZTogZmlsZSwgZW5jb2Rpbmc6IGVuY29kaW5nLCBmbGFnOiBmbGFnIH07DQogIH0NCg0KICBmdW5jdGlvbiByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucykgew0KICAgIHZhciBvcHRzID0gaW5pdEFyZ3MoZmlsZSwgb3B0aW9ucyk7DQogICAgb3B0cy5mbGFnID0gJ3InOw0KICAgIGlmICghb3B0cy5lbmNvZGluZykgeyBvcHRzLmVuY29kaW5nID0gJ2JpbmFyeSc7IH0NCiAgICByZXR1cm4gd2l0aFN0cmVhbShvcHRzLCBmdW5jdGlvbihzdCkgew0KICAgICAgcmV0dXJuIG9wdHMuZW5jb2RpbmcgPT0gJ2JpbmFyeScNCiAgICAgICAgPyBCdWZmZXIuZnJvbShzdC5SZWFkKC0xKSkNCiAgICAgICAgOiBzdC5SZWFkVGV4dCgtMSk7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiB3cml0ZUZpbGVTeW5jKGZpbGUsIGRhdGEsIG9wdGlvbnMpIHsNCiAgICB2YXIgb3B0cyA9IGluaXRBcmdzKGZpbGUsIG9wdGlvbnMpLA0KICAgICAgaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIoZGF0YSk7DQogICAgb3B0cy5mbGFnID0gJ3cnOw0KICAgIGlmIChpc0J1ZmZlcikgeyBvcHRzLmVuY29kaW5nID0gJ2JpbmFyeSc7IH0NCiAgICBlbHNlIGlmICghb3B0cy5lbmNvZGluZykgeyBvcHRzLmVuY29kaW5nID0gJ1VURi04JzsgfQ0KICAgIHdpdGhTdHJlYW0ob3B0cywgZnVuY3Rpb24gKHN0KSB7DQogICAgICBpc0J1ZmZlciA/IHN0LldyaXRlKGRhdGEuYnVmZmVyKSA6IHN0LldyaXRlVGV4dChkYXRhKTsNCiAgICAgIHNhdmVTdHJlYW0oc3QsIG9wdHMpOw0KICAgIH0pOw0KICB9DQoNCiAgZnVuY3Rpb24gYXBwZW5kRmlsZVN5bmMoZmlsZSwgZGF0YSwgb3B0aW9ucykgew0KICAgIHZhciBvcHRzID0gaW5pdEFyZ3MoZmlsZSwgb3B0aW9ucyksDQogICAgICBpc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcihkYXRhKTsNCiAgICBvcHRzLmZsYWcgPSAnYSc7DQogICAgaWYgKGlzQnVmZmVyKSB7IG9wdHMuZW5jb2RpbmcgPSAnYmluYXJ5JzsgfQ0KICAgIGVsc2UgaWYgKCFvcHRzLmVuY29kaW5nKSB7IG9wdHMuZW5jb2RpbmcgPSAnVVRGLTgnOyB9DQogICAgd2l0aFN0cmVhbShvcHRzLCBmdW5jdGlvbiAoc3QpIHsNCiAgICAgIGlzQnVmZmVyID8gc3QuV3JpdGUoZGF0YS5idWZmZXIpIDogc3QuV3JpdGVUZXh0KGRhdGEpOw0KICAgICAgc2F2ZVN0cmVhbShzdCwgb3B0cyk7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBta2RpclN5bmMocHRoLCBvcHRpb25zKSB7DQogICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWN1cnNpdmUpIHsgbWtkaXJzKHB0aCk7IH0NCiAgICBta2RpcihwdGgpOw0KICB9DQoNCiAgZnVuY3Rpb24gY29weUZpbGVTeW5jKHNyYywgZGVzdCkgew0KICAgIGNvcHlmaWxlKHNyYywgZGVzdCwgdHJ1ZSk7DQogIH0NCg0KICAvLyBmcy1leHRyYQ0KDQogIGZ1bmN0aW9uIG1rZGlyc1N5bmMocHRoKSB7DQogICAgbWtkaXJzKHB0aCk7DQogIH0NCg0KICBmdW5jdGlvbiBlbnN1cmVEaXJTeW5jKHB0aCkgew0KICAgIGlmICghaXNkaXIocHRoKSkgeyBta2RpcnMocHRoKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gZW5zdXJlRmlsZVN5bmMoZmlsZSkgew0KICAgIGlmICghaXNhYnMoZmlsZSkpIHsgZmlsZSA9IGFic3BhdGgoZmlsZSk7IH0NCiAgICB2YXIgZGlyID0gZGlybmFtZShmaWxlKTsNCiAgICBpZiAoIWlzZGlyKGRpcikpIHsgbWtkaXJzKGRpcik7IH0NCiAgfQ0KDQogIGZ1bmN0aW9uIG91dHB1dEZpbGVTeW5jKGZpbGUsIGRhdGEsIG9wdGlvbnMpIHsNCiAgICBpZiAoIWlzYWJzKGZpbGUpKSB7IGZpbGUgPSBhYnNwYXRoKGZpbGUpOyB9DQogICAgZW5zdXJlRmlsZVN5bmMoZmlsZSk7DQogICAgd3JpdGVGaWxlU3luYyhmaWxlLCBkYXRhLCBvcHRpb25zKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG91dHB1dEpzb25TeW5jKGZpbGUsIG9iaiwgb3B0aW9ucykgew0KICAgIGlmICghaXNhYnMoZmlsZSkpIHsgZmlsZSA9IGFic3BhdGgoZmlsZSk7IH0NCiAgICBlbnN1cmVGaWxlU3luYyhmaWxlKTsNCiAgICB3cml0ZUZpbGVTeW5jKGZpbGUsIEpTT04uc3RyaW5naWZ5KG9iaiksIG9wdGlvbnMpOw0KICB9DQoNCiAgdmFyIG91dHB1dEpTT05TeW5jID0gb3V0cHV0SnNvblN5bmM7DQoNCiAgZnVuY3Rpb24gcmVhZEpzb25TeW5jKGZpbGUsIG9wdGlvbnMpIHsNCiAgICBpZiAoIWlzYWJzKGZpbGUpKSB7IGZpbGUgPSBhYnNwYXRoKGZpbGUpOyB9DQogICAgaWYgKCFvcHRpb25zIHx8ICh0eXBlb2Ygb3B0aW9ucyA9PSAnb2JqZWN0JyAmJiAhb3B0aW9ucy5lbmNvZGluZykpDQogICAgICB7IG9wdGlvbnMgPSAnVVRGLTgnOyB9DQogICAgdmFyIGRhdGEgPSByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucyk7DQogICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7DQogIH0NCg0KICB2YXIgcmVhZEpTT05TeW5jID0gcmVhZEpzb25TeW5jOw0KDQogIGZ1bmN0aW9uIGVtcHR5RGlyU3luYyhkaXIpIHsNCiAgICBzY2FuZGlyKGRpcikuZm9yRWFjaChmdW5jdGlvbiAoaXQpIHsgcmV0dXJuIGl0LmRlbGV0ZSh0cnVlKTsgfSk7DQogIH0NCg0KICBmdW5jdGlvbiByZWFkTGluZXNTeW5jKGZpbGUsIG9wdGlvbnMpIHsNCiAgICBpZiAoIWlzYWJzKGZpbGUpKSB7IGZpbGUgPSBhYnNwYXRoKGZpbGUpOyB9DQogICAgdmFyIG9wdHMgPSBpbml0QXJncyhmaWxlLCBvcHRpb25zKTsNCiAgICBvcHRzLmZsYWcgPSAncic7DQogICAgaWYgKCFvcHRzLmVuY29kaW5nKSB7IG9wdHMuZW5jb2RpbmcgPSAnVVRGLTgnOyB9DQogICAgcmV0dXJuIHdpdGhTdHJlYW0ob3B0cywgZnVuY3Rpb24oc3QpIHsNCiAgICAgIHZhciBsaW5lcyA9IFtdOw0KICAgICAgd2hpbGUgKCFzdC5FT1MpIHsgbGluZXMucHVzaChzdC5SZWFkVGV4dCgtMikpOyB9DQogICAgICByZXR1cm4gbGluZXM7DQogICAgfSk7DQogIH0KCiAgdmFyIGZzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogICAgc3RhdFN5bmM6IHN0YXRTeW5jLAogICAgcmVhZGRpclN5bmM6IHJlYWRkaXJTeW5jLAogICAgcmVhZEZpbGVTeW5jOiByZWFkRmlsZVN5bmMsCiAgICB3cml0ZUZpbGVTeW5jOiB3cml0ZUZpbGVTeW5jLAogICAgYXBwZW5kRmlsZVN5bmM6IGFwcGVuZEZpbGVTeW5jLAogICAgbWtkaXJTeW5jOiBta2RpclN5bmMsCiAgICBjb3B5RmlsZVN5bmM6IGNvcHlGaWxlU3luYywKICAgIG1rZGlyc1N5bmM6IG1rZGlyc1N5bmMsCiAgICBlbnN1cmVEaXJTeW5jOiBlbnN1cmVEaXJTeW5jLAogICAgZW5zdXJlRmlsZVN5bmM6IGVuc3VyZUZpbGVTeW5jLAogICAgb3V0cHV0RmlsZVN5bmM6IG91dHB1dEZpbGVTeW5jLAogICAgb3V0cHV0SnNvblN5bmM6IG91dHB1dEpzb25TeW5jLAogICAgb3V0cHV0SlNPTlN5bmM6IG91dHB1dEpTT05TeW5jLAogICAgcmVhZEpzb25TeW5jOiByZWFkSnNvblN5bmMsCiAgICByZWFkSlNPTlN5bmM6IHJlYWRKU09OU3luYywKICAgIGVtcHR5RGlyU3luYzogZW1wdHlEaXJTeW5jLAogICAgcmVhZExpbmVzU3luYzogcmVhZExpbmVzU3luYywKICAgIGV4aXN0c1N5bmM6IGV4aXN0cywKICAgIHJlbmFtZVN5bmM6IHJlcGwsCiAgICBybWRpclN5bmM6IHJtZGlyLAogICAgdW5saW5rU3luYzogcmVtb3ZlJDEKICB9KTsKCiAgdmFyIFBBUlNFX1JFRyA9IC9eKFtBLVphLXpdOlsvXFxdfFsvXFxdfCkoPzooW14/I10qKVsvXFxdfCkoW14vXFw/I10qPykoWy5dW14uPyNdK3wpJC87DQogIHZhciBDQVBUVVJFID0gWydwYXRoJywgJ3Jvb3QnLCAnZGlyJywgJ25hbWUnLCAnZXh0J107DQoNCiAgZnVuY3Rpb24gcGFyc2UocHRoKSB7DQogICAgcHRoIHx8IChwdGggPSAnJyk7DQogICAgdmFyIG1hdGNoID0gcHRoLm1hdGNoKFBBUlNFX1JFRyk7DQogICAgdmFyIHJlc3VsdCA9IENBUFRVUkUucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIG5hbWUsIGluZGV4KSB7DQogICAgICBtZW1vW25hbWVdID0gbWF0Y2hbaW5kZXhdOw0KICAgICAgcmV0dXJuIG1lbW87DQogICAgfSwge30pOw0KICAgIHJlc3VsdC5iYXNlID0gcmVzdWx0Lm5hbWUgKyByZXN1bHQuZXh0Ow0KICAgIHJlc3VsdC5kaXJuYW1lID0gcmVzdWx0LnJvb3QgKyByZXN1bHQuZGlyOw0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICB2YXIgZGVsaW1pdGVyID0gJzsnOwoKICB2YXIgUGF0aCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHsKICAgIHBhcnNlOiBwYXJzZSwKICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLAogICAgc2VwOiBzZXAsCiAgICBkaXJuYW1lOiBkaXJuYW1lLAogICAgYmFzZW5hbWU6IGJhc2VuYW1lLAogICAgZXh0bmFtZTogZXh0bmFtZSwKICAgIGlzQWJzb2x1dGU6IGlzQWJzb2x1dGUsCiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSQxLAogICAgam9pbjogam9pbiwKICAgIHJlc29sdmU6IHJlc29sdmUsCiAgICByZWxhdGl2ZTogcmVsYXRpdmUKICB9KTsKCiAgd2luZG93Ll9fZmlsZW5hbWUgPSBXU2NyaXB0LlNjcmlwdEZ1bGxOYW1lOw0KICB3aW5kb3cuX19kaXJuYW1lID0gX19maWxlbmFtZS5tYXRjaCgvKC4qKVtcXC9dLylbMV07DQoNCiAgZnVuY3Rpb24gZGVmaW5lR2V0dGVyKHRhcmdldCwgZnVuY0RpY3QpIHsNCiAgICB2YXIgcHJvcHMgPSB7fTsNCiAgICBmb3IgKHZhciBrZXkgaW4gZnVuY0RpY3QpIHsNCiAgICAgIGlmICghdGFyZ2V0W2tleV0pIHsNCiAgICAgICAgcHJvcHNba2V5XSA9IHsNCiAgICAgICAgICBnZXQ6IGZ1bmNEaWN0W2tleV0NCiAgICAgICAgfTsNCiAgICAgIH0NCiAgICB9DQogICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcyk7DQogIH0NCg0KICB2YXIgX3ZicywgX3NoZWxsLCBfZnNvLCBfc2hlbGxfYXBwOw0KDQogIGRlZmluZUdldHRlcih3aW5kb3csIHsNCiAgICBfX1ZCUzogZnVuY3Rpb24oKSB7DQogICAgICBpZiAoIV92YnMpIHsNCiAgICAgICAgX3ZicyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdTY3JpcHRDb250cm9sJyk7DQogICAgICAgIF92YnMuTGFuZ3VhZ2UgPSAnVkJTY3JpcHQnOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIF92YnM7DQogICAgfSwNCiAgICBfX1dTaGVsbDogZnVuY3Rpb24oKSB7DQogICAgICByZXR1cm4gX3NoZWxsIHx8IChfc2hlbGwgPSBuZXcgQWN0aXZlWE9iamVjdCgnV1NjcmlwdC5TaGVsbCcpKTsNCiAgICB9LA0KICAgIF9fRlNPOiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiBfZnNvIHx8IChfZnNvID0gbmV3IEFjdGl2ZVhPYmplY3QoJ1NjcmlwdGluZy5GaWxlU3lzdGVtT2JqZWN0JykpOw0KICAgIH0sDQogICAgX19TaGVsbEFwcDogZnVuY3Rpb24oKSB7DQogICAgICByZXR1cm4gX3NoZWxsX2FwcCB8fCAoX3NoZWxsX2FwcCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdTaGVsbC5BcHBsaWNhdGlvbicpKTsNCiAgICB9DQogIH0pOw0KDQogIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uKCkgew0KICAgIHZhciBzY3JpcHRzID0gZG9jdW1lbnQuc2NyaXB0czsNCiAgICB2YXIgaSA9IC0xLA0KICAgICAgbGVuID0gc2NyaXB0cy5sZW5ndGg7DQogICAgdmFyIG5hbWUgPSBiYXNlbmFtZShfX2ZpbGVuYW1lKS5yZXBsYWNlKC9cLlteLl0rJC8sICcnKTsNCiAgICB2YXIgZmlsZSwgZm9sZGVyOw0KICAgIGZvbGRlciA9IGpvaW4oX19kaXJuYW1lLCBuYW1lICsgJ19zcmMnKTsNCiAgICBpZiAoIWlzZGlyKGZvbGRlcikpIHsgbWtkaXJzU3luYyhmb2xkZXIpOyB9DQogICAgV1NjcmlwdC5FY2hvKCcnKTsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICBmaWxlID0gam9pbihmb2xkZXIsIGkgKyAnLmpzJyk7DQogICAgICBvdXRwdXRGaWxlU3luYyhmaWxlLCBzY3JpcHRzW2ldLnRleHQpOw0KICAgICAgV1NjcmlwdC5FY2hvKCgic291cmNlICIgKyBpICsgIjogIiArIGZpbGUpKTsNCiAgICB9DQogIH0pOwoKICB2YXIganNUb2tlbnMgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7CiAgLy8gQ29weXJpZ2h0IDIwMTQsIDIwMTUsIDIwMTYsIDIwMTcsIDIwMTggU2ltb24gTHlkZWxsCiAgLy8gTGljZW5zZTogTUlULiAoU2VlIExJQ0VOU0UuKQoKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICB2YWx1ZTogdHJ1ZQogIH0pOwoKICAvLyBUaGlzIHJlZ2V4IGNvbWVzIGZyb20gcmVnZXguY29mZmVlLCBhbmQgaXMgaW5zZXJ0ZWQgaGVyZSBieSBnZW5lcmF0ZS1pbmRleC5qcwogIC8vIChydW4gYG5wbSBydW4gYnVpbGRgKS4KICBleHBvcnRzLmRlZmF1bHQgPSAvKChbJyJdKSg/Oig/IVwyKVteXFxcblxyXXxcXCg/OlxyXG58W1xzXFNdKSkqKFwyKT98YCg/OlteYFxcJF18XFxbXHNcU118XCQoPyFceyl8XCRceyg/Oltee31dfFx7W159XSpcfT8pKlx9PykqKGApPyl8KFwvXC8uKil8KFwvXCooPzpbXipdfFwqKD8hXC8pKSooXCpcLyk/KXwoXC8oPyFcKikoPzpcWyg/Oig/IVtcXVxcXSkufFxcLikqXF18KD8hW1wvXF1cXF0pLnxcXC4pK1wvKD86KD8hXHMqKD86XGJ8W1x1MDA4MC1cdUZGRkYkXFwnIn4oe118WytcLSFdKD8hPSl8XC4/XGQpKXxbZ21peXVzXXsxLDZ9XGIoPyFbXHUwMDgwLVx1RkZGRiRcXF18XHMqKD86WytcLSolJnxePD4hPT8oe118XC8oPyFbXC8qXSkpKSkpfCgwW3hYXVtcZGEtZkEtRl0rfDBbb09dWzAtN10rfDBbYkJdWzAxXSt8KD86XGQqXC5cZCt8XGQrXC4/KSg/OltlRV1bKy1dP1xkKyk/KXwoKD8hXGQpKD86KD8hXHMpWyRcd1x1MDA4MC1cdUZGRkZdfFxcdVtcZGEtZkEtRl17NH18XFx1XHtbXGRhLWZBLUZdK1x9KSspfCgtLXxcK1wrfCYmfFx8XHx8PT58XC57M318KD86WytcLVwvJSZ8Xl18XCp7MSwyfXw8ezEsMn18PnsxLDN9fCE9P3w9ezEsMn0pPT98Wz9+Liw6O1tcXSgpe31dKXwoXHMrKXwoXiR8W1xzXFNdKS9nOwoKICBleHBvcnRzLm1hdGNoVG9Ub2tlbiA9IGZ1bmN0aW9uKG1hdGNoKSB7CiAgICB2YXIgdG9rZW4gPSB7dHlwZTogImludmFsaWQiLCB2YWx1ZTogbWF0Y2hbMF0sIGNsb3NlZDogdW5kZWZpbmVkfTsKICAgICAgICAgaWYgKG1hdGNoWyAxXSkgdG9rZW4udHlwZSA9ICJzdHJpbmciICwgdG9rZW4uY2xvc2VkID0gISEobWF0Y2hbM10gfHwgbWF0Y2hbNF0pOwogICAgZWxzZSBpZiAobWF0Y2hbIDVdKSB0b2tlbi50eXBlID0gImNvbW1lbnQiOwogICAgZWxzZSBpZiAobWF0Y2hbIDZdKSB0b2tlbi50eXBlID0gImNvbW1lbnQiLCB0b2tlbi5jbG9zZWQgPSAhIW1hdGNoWzddOwogICAgZWxzZSBpZiAobWF0Y2hbIDhdKSB0b2tlbi50eXBlID0gInJlZ2V4IjsKICAgIGVsc2UgaWYgKG1hdGNoWyA5XSkgdG9rZW4udHlwZSA9ICJudW1iZXIiOwogICAgZWxzZSBpZiAobWF0Y2hbMTBdKSB0b2tlbi50eXBlID0gIm5hbWUiOwogICAgZWxzZSBpZiAobWF0Y2hbMTFdKSB0b2tlbi50eXBlID0gInB1bmN0dWF0b3IiOwogICAgZWxzZSBpZiAobWF0Y2hbMTJdKSB0b2tlbi50eXBlID0gIndoaXRlc3BhY2UiOwogICAgcmV0dXJuIHRva2VuCiAgfTsKICB9KTsKCiAgdmFyIGpzVG9rZW5zJDEgPSB1bndyYXBFeHBvcnRzKGpzVG9rZW5zKTsKICB2YXIganNUb2tlbnNfMSA9IGpzVG9rZW5zLm1hdGNoVG9Ub2tlbjsKCiAgZnVuY3Rpb24gZ2V0VG9rZW5zKHNyYykgew0KICAgIHZhciB0b2tlbnMgPSBbXSwNCiAgICAgIG1hdGNoLA0KICAgICAgdG9rZW47DQogICAgZm9yICg7Oykgew0KICAgICAgbWF0Y2ggPSBqc1Rva2VucyQxLmV4ZWMoc3JjKTsNCiAgICAgIGlmICghbWF0Y2gpIHsgYnJlYWs7IH0NCiAgICAgIHRva2VuID0ganNUb2tlbnNfMShtYXRjaCk7DQogICAgICB0b2tlbnMucHVzaCh0b2tlbik7DQogICAgfQ0KICAgIHJldHVybiB0b2tlbnM7DQogIH0NCg0KICB2YXIgRVNDQVBTRV9NQVAkMSA9IHsNCiAgICAiJyI6ICInIiwNCiAgICAnIic6ICciJywNCiAgICAnXHInOiAncicsDQogICAgJ1xuJzogJ24nLA0KICAgICdcdCc6ICd0JywNCiAgICAnXHUyMDI4JzogJ3UyMDI4JywNCiAgICAnXHUyMDI5JzogJ3UyMDI5Jw0KICB9Ow0KDQogIHZhciBFU0NBUFNFX1JFRyQxID0gLyd8InxccnxcbnxcdHxcdTIwMjh8XHUyMDI5XS9nOw0KDQogIGZ1bmN0aW9uIGVzY2FwZUNoYXIkMShjKSB7DQogICAgcmV0dXJuICdcXCcgKyBFU0NBUFNFX01BUCQxW2NdOw0KICB9DQoNCiAgdmFyIFNVQl9SRUcgPSAvXCRceygoPzpbXnt9XXxce1tefV0qXH0/KSopXH0/L2c7DQogIHZhciBTVUJfU0VQID0gJyRUTVAkJzsNCiAgdmFyIFNVQl9TRVBfUkVHID0gL1wkVE1QXCQvZzsNCg0KICBmdW5jdGlvbiByZXBsVG1wU3RyKHRva2VuLCB0b2tlbnMsIGluZGV4KSB7DQogICAgdmFyIHN0ciA9IHRva2VuLnZhbHVlOw0KICAgIGlmICh0b2tlbi50eXBlICE9ICdzdHJpbmcnIHx8IHN0clswXSAhPSAnYCcpIHsgcmV0dXJuIGZhbHNlOyB9DQogICAgdmFyIHJhd19hcmdzID0gW251bGxdOw0KICAgIHN0ciA9IHN0ci5zbGljZSgxLCBzdHIubGVuZ3RoIC0gMSk7DQogICAgc3RyID0gc3RyLnJlcGxhY2UoU1VCX1JFRywgZnVuY3Rpb24gKGcwLCBnMSkgew0KICAgICAgcmF3X2FyZ3MucHVzaChnMSk7DQogICAgICByZXR1cm4gU1VCX1NFUDsNCiAgICB9KTsNCiAgICB2YXIgc3RyUmF3ID0gaW5kZXggPiAyICYmIHRva2Vuc1tpbmRleCAtIDFdLnZhbHVlOw0KICAgIGlmIChzdHJSYXcgPT0gJ3JhdycpIHsNCiAgICAgIHJhd19hcmdzWzBdID0gSlNPTi5zdHJpbmdpZnkoeyByYXc6IHN0ci5zcGxpdChTVUJfU0VQKSB9KTsNCiAgICAgIHRva2VuLnZhbHVlID0gJygnICsgcmF3X2FyZ3Muam9pbigpICsgJyknOw0KICAgIH0gZWxzZSB7DQogICAgICBzdHIgPSBzdHIucmVwbGFjZShFU0NBUFNFX1JFRyQxLCBlc2NhcGVDaGFyJDEpOw0KICAgICAgcmF3X2FyZ3NbMF0gPSAie3JhdzogWyciICsgc3RyLnJlcGxhY2UoU1VCX1NFUF9SRUcsICInLCciKSArICInXX0iOw0KICAgICAgdG9rZW4udmFsdWUgPSAnU3RyaW5nLnJhdygnICsgcmF3X2FyZ3Muam9pbigpICsgJyknOw0KICAgIH0NCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJlcGxBcnJvdyh0b2tlbiwgdG9rZW5zLCBpbmRleCkgew0KICAgIGlmICh0b2tlbi50eXBlICE9ICdwdW5jdHVhdG9yJyB8fCB0b2tlbi52YWx1ZSAhPSAnPT4nKSB7IHJldHVybiBmYWxzZTsgfQ0KICAgIHZhciBpID0gaW5kZXgsDQogICAgICBsZW4gPSB0b2tlbnMubGVuZ3RoLA0KICAgICAgZGVwdGggPSAwLA0KICAgICAgaGFzQnJhY2tldCA9IGZhbHNlLA0KICAgICAgaGFzVGhpcyA9IGZhbHNlLA0KICAgICAgdG9rZW5JdDsNCiAgICB3aGlsZSAoLS1pKSB7DQogICAgICB0b2tlbkl0ID0gdG9rZW5zW2ldOw0KICAgICAgaWYgKHRva2VuSXQudHlwZSA9PSAncHVuY3R1YXRvcicpIHsNCiAgICAgICAgc3dpdGNoICh0b2tlbkl0LnZhbHVlKSB7DQogICAgICAgICAgY2FzZSAnKSc6DQogICAgICAgICAgICBoYXNCcmFja2V0ID0gdHJ1ZTsNCiAgICAgICAgICAgIGRlcHRoKys7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgICBjYXNlICcoJzoNCiAgICAgICAgICAgIGRlcHRoLS07DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgaWYgKGRlcHRoID09IDApIHsgZGVwdGgtLTsgfQ0KICAgICAgICB9DQogICAgICB9IGVsc2UgaWYgKHRva2VuSXQudHlwZSA9PSAnbmFtZScgJiYgdG9rZW5JdC52YWx1ZSA9PSAncmV0dXJuJykgew0KICAgICAgICBkZXB0aC0tOw0KICAgICAgfQ0KICAgICAgaWYgKGRlcHRoIDwgMCkgew0KICAgICAgICBpZiAoaGFzQnJhY2tldCkgew0KICAgICAgICAgIHRva2VuSXQudmFsdWUgKz0gJyBmdW5jdGlvbic7DQogICAgICAgICAgdG9rZW4udmFsdWUgPSAnJzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB0b2tlbkl0LnZhbHVlICs9ICcgZnVuY3Rpb24oJzsNCiAgICAgICAgICB0b2tlbi52YWx1ZSA9ICcpJzsNCiAgICAgICAgfQ0KICAgICAgICBicmVhazsNCiAgICAgIH0NCiAgICB9DQogICAgaSA9IGluZGV4Ow0KICAgIHdoaWxlICgrK2kgPCBsZW4pIHsNCiAgICAgIHRva2VuSXQgPSB0b2tlbnNbaV07DQogICAgICBpZiAodG9rZW5JdC50eXBlICE9ICd3aGl0ZXNwYWNlJykgeyBicmVhazsgfQ0KICAgIH0NCiAgICBoYXNCcmFja2V0ID0gZmFsc2U7DQogICAgaWYgKHRva2VuSXQudmFsdWUgPT0gJ3snKSB7IGhhc0JyYWNrZXQgPSB0cnVlOyB9DQogICAgaS0tOw0KICAgIGRlcHRoID0gMDsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICB0b2tlbkl0ID0gdG9rZW5zW2ldOw0KICAgICAgaWYgKHRva2VuSXQudHlwZSA9PSAncHVuY3R1YXRvcicpIHsNCiAgICAgICAgc3dpdGNoICh0b2tlbkl0LnZhbHVlKSB7DQogICAgICAgICAgY2FzZSAneyc6DQogICAgICAgICAgY2FzZSAnKCc6DQogICAgICAgICAgY2FzZSAnWyc6DQogICAgICAgICAgICBkZXB0aCsrOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgY2FzZSAnfSc6DQogICAgICAgICAgY2FzZSAnKSc6DQogICAgICAgICAgY2FzZSAnXSc6DQogICAgICAgICAgICBkZXB0aC0tOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgY2FzZSAnLCc6DQogICAgICAgICAgY2FzZSAnOyc6DQogICAgICAgICAgICBpZiAoZGVwdGggPT0gMCkgeyBkZXB0aC0tOyB9DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmICh0b2tlbkl0LnR5cGUgPT0gJ3doaXRlc3BhY2UnKSB7DQogICAgICAgIGlmIChkZXB0aCA9PSAwICYmIHRva2VuSXQudmFsdWUuaW5jbHVkZXMoJ1xyXG4nKSkgew0KICAgICAgICAgIGRlcHRoLS07DQogICAgICAgIH0NCiAgICAgIH0gZWxzZSBpZiAodG9rZW5JdC50eXBlID09ICduYW1lJykgew0KICAgICAgICBpZiAodG9rZW5JdC52YWx1ZSA9PSAndGhpcycpIHsgaGFzVGhpcyA9IHRydWU7IH0NCiAgICAgIH0NCiAgICAgIGlmIChkZXB0aCA8IDApIHsNCiAgICAgICAgaWYgKGhhc0JyYWNrZXQpIHsNCiAgICAgICAgICBpZiAoaGFzVGhpcykgeyB0b2tlbkl0LnZhbHVlID0gJy5iaW5kKHRoaXMpJyArIHRva2VuSXQudmFsdWU7IH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB0b2tlbi52YWx1ZSArPSAne3JldHVybiAnOw0KICAgICAgICAgIGlmIChoYXNUaGlzKSB7IHRva2VuSXQudmFsdWUgPSAnfS5iaW5kKHRoaXMpJyArIHRva2VuSXQudmFsdWU7IH0NCiAgICAgICAgICBlbHNlIHsgdG9rZW5JdC52YWx1ZSA9ICd9JyArIHRva2VuSXQudmFsdWU7IH0NCiAgICAgICAgfQ0KICAgICAgICBicmVhazsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHRydWU7DQogIH0NCg0KICBmdW5jdGlvbiBybUNvbW1lbnQodG9rZW4pIHsNCiAgICBpZiAodG9rZW4udHlwZSA9PSAnY29tbWVudCcpIHsNCiAgICAgIHRva2VuLnZhbHVlID0gJyc7DQogICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQogICAgcmV0dXJuIGZhbHNlOw0KICB9DQoNCiAgZnVuY3Rpb24gcmVwbEltcG9ydCh0b2tlbiwgdG9rZW5zLCBpbmRleCkgew0KICAgIHZhciBpbXBvcnRNYXAgPSB7fSwNCiAgICAgIGJ1ZiA9IFtdLA0KICAgICAgaW5zaWRlLA0KICAgICAgYkFsaWFzLA0KICAgICAgdHlwZSwNCiAgICAgIHZhbHVlLA0KICAgICAgaSwNCiAgICAgIGxlbiwNCiAgICAgIHRva2VuSXQsDQogICAgICBuYW1lLA0KICAgICAgbW9kdWxlTmFtZSwNCiAgICAgIG1vZHVsZUFsaWFzOw0KICAgIGlmICh0b2tlbi50eXBlICE9ICduYW1lJyB8fCB0b2tlbi52YWx1ZSAhPSAnaW1wb3J0JykgeyByZXR1cm4gZmFsc2U7IH0NCiAgICB0b2tlbi52YWx1ZSA9ICcnOw0KICAgIGkgPSBpbmRleDsNCiAgICBsZW4gPSB0b2tlbnMubGVuZ3RoOw0KICAgIHRva2VuSXQgPSB0b2tlbjsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICB0b2tlbkl0LnZhbHVlID0gJyc7DQogICAgICB0b2tlbkl0ID0gdG9rZW5zW2ldOw0KICAgICAgdHlwZSA9IHRva2VuSXQudHlwZTsNCiAgICAgIHZhbHVlID0gdG9rZW5JdC52YWx1ZTsNCiAgICAgIGlmICh0eXBlID09ICduYW1lJykgew0KICAgICAgICBpZiAodmFsdWUgPT0gJ2Zyb20nKSB7DQogICAgICAgICAgY29udGludWU7DQogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gJ2FzJykgew0KICAgICAgICAgIGJBbGlhcyA9IHRydWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgaWYgKGJBbGlhcykgew0KICAgICAgICAgICAgaW1wb3J0TWFwW25hbWVdID0gdmFsdWU7DQogICAgICAgICAgICBiQWxpYXMgPSBmYWxzZTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgbmFtZSA9IHZhbHVlOw0KICAgICAgICAgICAgaWYgKGluc2lkZSkgew0KICAgICAgICAgICAgICBpbXBvcnRNYXBbbmFtZV0gPSBuYW1lOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgaW1wb3J0TWFwWydkZWZhdWx0J10gPSBuYW1lOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdwdW5jdHVhdG9yJykgew0KICAgICAgICBpZiAodmFsdWUgPT0gJyonKSB7DQogICAgICAgICAgbmFtZSA9ICcqJzsNCiAgICAgICAgICBpbXBvcnRNYXBbJyonXSA9IDA7DQogICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gJ3snKSB7DQogICAgICAgICAgaW5zaWRlID0gdHJ1ZTsNCiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSAnfScpIHsNCiAgICAgICAgICBpbnNpZGUgPSBmYWxzZTsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdzdHJpbmcnKSB7DQogICAgICAgIG1vZHVsZU5hbWUgPSB2YWx1ZS5zbGljZSgxLCB2YWx1ZS5sZW5ndGggLSAxKTsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQogICAgfQ0KDQogICAgbW9kdWxlQWxpYXMgPSBtb2R1bGVOYW1lLnJlcGxhY2UoL1tcXC8uLUBdL2csICdfJyk7DQogICAgbW9kdWxlQWxpYXMgKz0NCiAgICAgICdfJyArDQogICAgICBNYXRoLnJhbmRvbSgpDQogICAgICAgIC50b1N0cmluZygxNikNCiAgICAgICAgLnNsaWNlKDIpOw0KICAgIGJ1Zi5wdXNoKG1vZHVsZUFsaWFzICsgIj1yZXF1aXJlKCciICsgbW9kdWxlTmFtZSArICInKSIpOw0KICAgIGlmIChpbXBvcnRNYXBbJyonXSkgew0KICAgICAgYnVmLnB1c2goaW1wb3J0TWFwWycqJ10gKyAnPScgKyBtb2R1bGVBbGlhcyk7DQogICAgICBkZWxldGUgaW1wb3J0TWFwWycqJ107DQogICAgfQ0KICAgIGlmIChpbXBvcnRNYXBbJ2RlZmF1bHQnXSkgew0KICAgICAgYnVmLnB1c2goaW1wb3J0TWFwWydkZWZhdWx0J10gKyAnPScgKyBtb2R1bGVBbGlhcyArICJbJ2RlZmF1bHQnXSIpOw0KICAgICAgZGVsZXRlIGltcG9ydE1hcFsnZGVmYXVsdCddOw0KICAgIH0NCiAgICBmb3IgKG5hbWUgaW4gaW1wb3J0TWFwKSB7DQogICAgICBidWYucHVzaChpbXBvcnRNYXBbbmFtZV0gKyAnPScgKyBtb2R1bGVBbGlhcyArICcuJyArIG5hbWUpOw0KICAgIH0NCiAgICB0b2tlbkl0LnZhbHVlID0gJ2xldCAnICsgYnVmLmpvaW4oKTsNCiAgICByZXR1cm4gdHJ1ZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHRyYW5zcGlsZShjb2RlKSB7DQogICAgdmFyIHRva2VucyA9IGdldFRva2Vucyhjb2RlKSwNCiAgICAgIHRva2VuLA0KICAgICAgc291cmNlOw0KICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgIHRva2VuID0gdG9rZW5zW2ldOw0KICAgICAgaWYgKHJlcGxUbXBTdHIodG9rZW4sIHRva2VucywgaSkpIHsgY29udGludWU7IH0NCiAgICAgIGlmIChyZXBsQXJyb3codG9rZW4sIHRva2VucywgaSkpIHsgY29udGludWU7IH0NCiAgICAgIGlmIChyZXBsSW1wb3J0KHRva2VuLCB0b2tlbnMsIGkpKSB7IGNvbnRpbnVlOyB9DQogICAgICBybUNvbW1lbnQodG9rZW4pOw0KICAgIH0NCiAgICBzb3VyY2UgPSB0b2tlbnMubWFwKGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gaXQudmFsdWU7IH0pLmpvaW4oJycpOw0KDQogICAgcmV0dXJuIHNvdXJjZTsNCiAgfQoKICBmdW5jdGlvbiBleGVjU3luYyhjbWQpIHsNCiAgICB2YXIgcHJvYyA9IF9fV1NoZWxsLkV4ZWMoY21kKTsNCiAgICBmb3IgKDs7KSB7DQogICAgICBpZiAocHJvYy5TdGF0ZXMgIT09IDApIHsgYnJlYWs7IH0NCiAgICB9DQogICAgaWYgKCFwcm9jLlN0ZE91dC5BdEVuZE9mU3RyZWFtKSB7DQogICAgICByZXR1cm4gcHJvYy5TdGRPdXQuUmVhZEFsbCgpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGV4ZWMoY21kLCBmdW5jKSB7DQogICAgdmFyIHByb2MsIHN0ZG91dCwgc3RkZXJyOw0KICAgIHRyeSB7DQogICAgICBwcm9jID0gX19XU2hlbGwuRXhlYyhjbWQpOw0KICAgICAgZm9yICg7Oykgew0KICAgICAgICBpZiAocHJvYy5TdGF0ZXMgIT09IDApIHsgYnJlYWs7IH0NCiAgICAgIH0NCiAgICAgIGlmIChpc0Z1bmN0aW9uKGZ1bmMpKSB7DQogICAgICAgIGlmICghcHJvYy5TdGRPdXQuQXRFbmRPZlN0cmVhbSkgew0KICAgICAgICAgIHN0ZG91dCA9IHByb2MuU3RkT3V0LlJlYWRBbGwoKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIXByb2MuU3RkRXJyLkF0RW5kT2ZTdHJlYW0pIHsNCiAgICAgICAgICBzdGRlcnIgPSBwcm9jLlN0ZEVyci5SZWFkQWxsKCk7DQogICAgICAgIH0NCiAgICAgICAgZnVuYyhudWxsLCBzdGRvdXQsIHN0ZGVycik7DQogICAgICB9DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgaWYgKGlzRnVuY3Rpb24oZnVuYykpIHsNCiAgICAgICAgZnVuYyhlLCBudWxsLCBudWxsKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRocm93IGU7DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcnVuKGNtZCwgb3B0aW9ucykgew0KICAgIHZhciBpbnRXaW5kb3dTdHlsZSA9IDEsDQogICAgICBiV2FpdE9uUmV0dXJuID0gdHJ1ZTsNCiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pOw0KICAgIGlmIChvcHRpb25zLmhpZGUgPT09IGZhbHNlIHx8IG9wdGlvbnMuaGlkZGVuID09PSBmYWxzZSkgeyBpbnRXaW5kb3dTdHlsZSA9IDA7IH0NCiAgICBpZiAob3B0aW9ucy53YWl0ID09PSBmYWxzZSkgeyBiV2FpdE9uUmV0dXJuID0gZmFsc2U7IH0NCiAgICByZXR1cm4gX19XU2hlbGwuUnVuKGNtZCwgaW50V2luZG93U3R5bGUsIGJXYWl0T25SZXR1cm4pOw0KICB9CgogIHZhciBjaGlsZF9wcm9jZXNzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogICAgZXhlY1N5bmM6IGV4ZWNTeW5jLAogICAgZXhlYzogZXhlYywKICAgIHJ1bjogcnVuCiAgfSk7CgogIHZhciBoYXMkMyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CiAgdmFyIGlzQXJyYXkkMiA9IEFycmF5LmlzQXJyYXk7CgogIHZhciBoZXhUYWJsZSA9IChmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBhcnJheSA9IFtdOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7CiAgICAgICAgICBhcnJheS5wdXNoKCclJyArICgoaSA8IDE2ID8gJzAnIDogJycpICsgaS50b1N0cmluZygxNikpLnRvVXBwZXJDYXNlKCkpOwogICAgICB9CgogICAgICByZXR1cm4gYXJyYXk7CiAgfSgpKTsKCiAgdmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkgewogICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMSkgewogICAgICAgICAgdmFyIGl0ZW0gPSBxdWV1ZS5wb3AoKTsKICAgICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdOwoKICAgICAgICAgIGlmIChpc0FycmF5JDIob2JqKSkgewogICAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTsKCiAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmpbal0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpdGVtLm9ialtpdGVtLnByb3BdID0gY29tcGFjdGVkOwogICAgICAgICAgfQogICAgICB9CiAgfTsKCiAgdmFyIGFycmF5VG9PYmplY3QgPSBmdW5jdGlvbiBhcnJheVRvT2JqZWN0KHNvdXJjZSwgb3B0aW9ucykgewogICAgICB2YXIgb2JqID0gb3B0aW9ucyAmJiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2ldICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgIG9ialtpXSA9IHNvdXJjZVtpXTsKICAgICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIG9iajsKICB9OwoKICB2YXIgbWVyZ2UgPSBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykgewogICAgICBpZiAoIXNvdXJjZSkgewogICAgICAgICAgcmV0dXJuIHRhcmdldDsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7CiAgICAgICAgICBpZiAoaXNBcnJheSQyKHRhcmdldCkpIHsKICAgICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpOwogICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICBpZiAoKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHwgIWhhcyQzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc291cmNlKSkgewogICAgICAgICAgICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gW3RhcmdldCwgc291cmNlXTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gdGFyZ2V0OwogICAgICB9CgogICAgICBpZiAoIXRhcmdldCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JykgewogICAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChzb3VyY2UpOwogICAgICB9CgogICAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7CiAgICAgIGlmIChpc0FycmF5JDIodGFyZ2V0KSAmJiAhaXNBcnJheSQyKHNvdXJjZSkpIHsKICAgICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpOwogICAgICB9CgogICAgICBpZiAoaXNBcnJheSQyKHRhcmdldCkgJiYgaXNBcnJheSQyKHNvdXJjZSkpIHsKICAgICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7CiAgICAgICAgICAgICAgaWYgKGhhcyQzLmNhbGwodGFyZ2V0LCBpKSkgewogICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0SXRlbSA9IHRhcmdldFtpXTsKICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdGFyZ2V0W2ldID0gaXRlbTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiB0YXJnZXQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHsKICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtrZXldOwoKICAgICAgICAgIGlmIChoYXMkMy5jYWxsKGFjYywga2V5KSkgewogICAgICAgICAgICAgIGFjY1trZXldID0gbWVyZ2UoYWNjW2tleV0sIHZhbHVlLCBvcHRpb25zKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIG1lcmdlVGFyZ2V0KTsKICB9OwoKICB2YXIgYXNzaWduJDEgPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHsKICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkgewogICAgICAgICAgYWNjW2tleV0gPSBzb3VyY2Vba2V5XTsKICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIHRhcmdldCk7CiAgfTsKCiAgdmFyIGRlY29kZSQxID0gZnVuY3Rpb24gKHN0ciwgZGVjb2RlciwgY2hhcnNldCkgewogICAgICB2YXIgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXCsvZywgJyAnKTsKICAgICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykgewogICAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6CiAgICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXMucmVwbGFjZSgvJVswLTlhLWZdezJ9L2dpLCB1bmVzY2FwZSk7CiAgICAgIH0KICAgICAgLy8gdXRmLTgKICAgICAgdHJ5IHsKICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyV2l0aG91dFBsdXMpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZXR1cm4gc3RyV2l0aG91dFBsdXM7CiAgICAgIH0KICB9OwoKICB2YXIgZW5jb2RlJDEgPSBmdW5jdGlvbiBlbmNvZGUoc3RyLCBkZWZhdWx0RW5jb2RlciwgY2hhcnNldCkgewogICAgICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSAobXNjZGV4KSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS4KICAgICAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODYKICAgICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJldHVybiBzdHI7CiAgICAgIH0KCiAgICAgIHZhciBzdHJpbmcgPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHN0ciA6IFN0cmluZyhzdHIpOwoKICAgICAgaWYgKGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykgewogICAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkgewogICAgICAgICAgICAgIHJldHVybiAnJTI2JTIzJyArIHBhcnNlSW50KCQwLnNsaWNlKDIpLCAxNikgKyAnJTNCJzsKICAgICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgb3V0ID0gJyc7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICB2YXIgYyA9IHN0cmluZy5jaGFyQ29kZUF0KGkpOwoKICAgICAgICAgIGlmICgKICAgICAgICAgICAgICBjID09PSAweDJEIC8vIC0KICAgICAgICAgICAgICB8fCBjID09PSAweDJFIC8vIC4KICAgICAgICAgICAgICB8fCBjID09PSAweDVGIC8vIF8KICAgICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH4KICAgICAgICAgICAgICB8fCAoYyA+PSAweDMwICYmIGMgPD0gMHgzOSkgLy8gMC05CiAgICAgICAgICAgICAgfHwgKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIC8vIGEtegogICAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVoKICAgICAgICAgICkgewogICAgICAgICAgICAgIG91dCArPSBzdHJpbmcuY2hhckF0KGkpOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjIDwgMHg4MCkgewogICAgICAgICAgICAgIG91dCA9IG91dCArIGhleFRhYmxlW2NdOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjIDwgMHg4MDApIHsKICAgICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhDMCB8IChjID4+IDYpXSArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXSk7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHsKICAgICAgICAgICAgICBvdXQgPSBvdXQgKyAoaGV4VGFibGVbMHhFMCB8IChjID4+IDEyKV0gKyBoZXhUYWJsZVsweDgwIHwgKChjID4+IDYpICYgMHgzRildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpICs9IDE7CiAgICAgICAgICBjID0gMHgxMDAwMCArICgoKGMgJiAweDNGRikgPDwgMTApIHwgKHN0cmluZy5jaGFyQ29kZUF0KGkpICYgMHgzRkYpKTsKICAgICAgICAgIG91dCArPSBoZXhUYWJsZVsweEYwIHwgKGMgPj4gMTgpXQogICAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8ICgoYyA+PiAxMikgJiAweDNGKV0KICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0KICAgICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoYyAmIDB4M0YpXTsKICAgICAgfQoKICAgICAgcmV0dXJuIG91dDsKICB9OwoKICB2YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHsKICAgICAgdmFyIHF1ZXVlID0gW3sgb2JqOiB7IG86IHZhbHVlIH0sIHByb3A6ICdvJyB9XTsKICAgICAgdmFyIHJlZnMgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07CiAgICAgICAgICB2YXIgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTsKCiAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7CiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMubGVuZ3RoOyArK2opIHsKICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTsKICAgICAgICAgICAgICB2YXIgdmFsID0gb2JqW2tleV07CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7CiAgICAgICAgICAgICAgICAgIHJlZnMucHVzaCh2YWwpOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgfQoKICAgICAgY29tcGFjdFF1ZXVlKHF1ZXVlKTsKCiAgICAgIHJldHVybiB2YWx1ZTsKICB9OwoKICB2YXIgaXNSZWdFeHAkMSA9IGZ1bmN0aW9uIGlzUmVnRXhwKG9iaikgewogICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nOwogIH07CgogIHZhciBpc0J1ZmZlciQxID0gZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7CiAgICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIHJldHVybiAhIShvYmouY29uc3RydWN0b3IgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopKTsKICB9OwoKICB2YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikgewogICAgICByZXR1cm4gW10uY29uY2F0KGEsIGIpOwogIH07CgogIHZhciB1dGlscyA9IHsKICAgICAgYXJyYXlUb09iamVjdDogYXJyYXlUb09iamVjdCwKICAgICAgYXNzaWduOiBhc3NpZ24kMSwKICAgICAgY29tYmluZTogY29tYmluZSwKICAgICAgY29tcGFjdDogY29tcGFjdCwKICAgICAgZGVjb2RlOiBkZWNvZGUkMSwKICAgICAgZW5jb2RlOiBlbmNvZGUkMSwKICAgICAgaXNCdWZmZXI6IGlzQnVmZmVyJDEsCiAgICAgIGlzUmVnRXhwOiBpc1JlZ0V4cCQxLAogICAgICBtZXJnZTogbWVyZ2UKICB9OwoKICB2YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTsKICB2YXIgcGVyY2VudFR3ZW50aWVzID0gLyUyMC9nOwoKICB2YXIgZm9ybWF0cyA9IHsKICAgICAgJ2RlZmF1bHQnOiAnUkZDMzk4NicsCiAgICAgIGZvcm1hdHRlcnM6IHsKICAgICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIHJldHVybiByZXBsYWNlLmNhbGwodmFsdWUsIHBlcmNlbnRUd2VudGllcywgJysnKTsKICAgICAgICAgIH0sCiAgICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICB9CiAgICAgIH0sCiAgICAgIFJGQzE3Mzg6ICdSRkMxNzM4JywKICAgICAgUkZDMzk4NjogJ1JGQzM5ODYnCiAgfTsKCiAgdmFyIGhhcyQ0ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCiAgdmFyIGFycmF5UHJlZml4R2VuZXJhdG9ycyA9IHsKICAgICAgYnJhY2tldHM6IGZ1bmN0aW9uIGJyYWNrZXRzKHByZWZpeCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZwogICAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7CiAgICAgIH0sCiAgICAgIGNvbW1hOiAnY29tbWEnLAogICAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lLW1hdGNoaW5nCiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsga2V5ICsgJ10nOwogICAgICB9LAogICAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmcKICAgICAgICAgIHJldHVybiBwcmVmaXg7CiAgICAgIH0KICB9OwoKICB2YXIgaXNBcnJheSQzID0gQXJyYXkuaXNBcnJheTsKICB2YXIgcHVzaCQxID0gQXJyYXkucHJvdG90eXBlLnB1c2g7CiAgdmFyIHB1c2hUb0FycmF5ID0gZnVuY3Rpb24gKGFyciwgdmFsdWVPckFycmF5KSB7CiAgICAgIHB1c2gkMS5hcHBseShhcnIsIGlzQXJyYXkkMyh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pOwogIH07CgogIHZhciB0b0lTTyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nOwoKICB2YXIgZGVmYXVsdHMkMSA9IHsKICAgICAgYWRkUXVlcnlQcmVmaXg6IGZhbHNlLAogICAgICBhbGxvd0RvdHM6IGZhbHNlLAogICAgICBjaGFyc2V0OiAndXRmLTgnLAogICAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLAogICAgICBkZWxpbWl0ZXI6ICcmJywKICAgICAgZW5jb2RlOiB0cnVlLAogICAgICBlbmNvZGVyOiB1dGlscy5lbmNvZGUsCiAgICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLAogICAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tmb3JtYXRzWydkZWZhdWx0J11dLAogICAgICAvLyBkZXByZWNhdGVkCiAgICAgIGluZGljZXM6IGZhbHNlLAogICAgICBzZXJpYWxpemVEYXRlOiBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmcKICAgICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpOwogICAgICB9LAogICAgICBza2lwTnVsbHM6IGZhbHNlLAogICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlCiAgfTsKCiAgdmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSggLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmcKICAgICAgb2JqZWN0LAogICAgICBwcmVmaXgsCiAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsCiAgICAgIHN0cmljdE51bGxIYW5kbGluZywKICAgICAgc2tpcE51bGxzLAogICAgICBlbmNvZGVyLAogICAgICBmaWx0ZXIsCiAgICAgIHNvcnQsCiAgICAgIGFsbG93RG90cywKICAgICAgc2VyaWFsaXplRGF0ZSwKICAgICAgZm9ybWF0dGVyLAogICAgICBlbmNvZGVWYWx1ZXNPbmx5LAogICAgICBjaGFyc2V0CiAgKSB7CiAgICAgIHZhciBvYmogPSBvYmplY3Q7CiAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopOwogICAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHsKICAgICAgICAgIG9iaiA9IHNlcmlhbGl6ZURhdGUob2JqKTsKICAgICAgfSBlbHNlIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkkMyhvYmopKSB7CiAgICAgICAgICBvYmogPSBvYmouam9pbignLCcpOwogICAgICB9CgogICAgICBpZiAob2JqID09PSBudWxsKSB7CiAgICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMkMS5lbmNvZGVyLCBjaGFyc2V0KSA6IHByZWZpeDsKICAgICAgICAgIH0KCiAgICAgICAgICBvYmogPSAnJzsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBvYmogPT09ICdudW1iZXInIHx8IHR5cGVvZiBvYmogPT09ICdib29sZWFuJyB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7CiAgICAgICAgICBpZiAoZW5jb2RlcikgewogICAgICAgICAgICAgIHZhciBrZXlWYWx1ZSA9IGVuY29kZVZhbHVlc09ubHkgPyBwcmVmaXggOiBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMkMS5lbmNvZGVyLCBjaGFyc2V0KTsKICAgICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyBmb3JtYXR0ZXIoZW5jb2RlcihvYmosIGRlZmF1bHRzJDEuZW5jb2RlciwgY2hhcnNldCkpXTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTsKICAgICAgfQoKICAgICAgdmFyIHZhbHVlcyA9IFtdOwoKICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICByZXR1cm4gdmFsdWVzOwogICAgICB9CgogICAgICB2YXIgb2JqS2V5czsKICAgICAgaWYgKGlzQXJyYXkkMyhmaWx0ZXIpKSB7CiAgICAgICAgICBvYmpLZXlzID0gZmlsdGVyOwogICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopOwogICAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzOwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2ldOwoKICAgICAgICAgIGlmIChza2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaXNBcnJheSQzKG9iaikpIHsKICAgICAgICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeSgKICAgICAgICAgICAgICAgICAgb2JqW2tleV0sCiAgICAgICAgICAgICAgICAgIHR5cGVvZiBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnZnVuY3Rpb24nID8gZ2VuZXJhdGVBcnJheVByZWZpeChwcmVmaXgsIGtleSkgOiBwcmVmaXgsCiAgICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsCiAgICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZywKICAgICAgICAgICAgICAgICAgc2tpcE51bGxzLAogICAgICAgICAgICAgICAgICBlbmNvZGVyLAogICAgICAgICAgICAgICAgICBmaWx0ZXIsCiAgICAgICAgICAgICAgICAgIHNvcnQsCiAgICAgICAgICAgICAgICAgIGFsbG93RG90cywKICAgICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSwKICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyLAogICAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LAogICAgICAgICAgICAgICAgICBjaGFyc2V0CiAgICAgICAgICAgICAgKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KAogICAgICAgICAgICAgICAgICBvYmpba2V5XSwKICAgICAgICAgICAgICAgICAgcHJlZml4ICsgKGFsbG93RG90cyA/ICcuJyArIGtleSA6ICdbJyArIGtleSArICddJyksCiAgICAgICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsCiAgICAgICAgICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZywKICAgICAgICAgICAgICAgICAgc2tpcE51bGxzLAogICAgICAgICAgICAgICAgICBlbmNvZGVyLAogICAgICAgICAgICAgICAgICBmaWx0ZXIsCiAgICAgICAgICAgICAgICAgIHNvcnQsCiAgICAgICAgICAgICAgICAgIGFsbG93RG90cywKICAgICAgICAgICAgICAgICAgc2VyaWFsaXplRGF0ZSwKICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyLAogICAgICAgICAgICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5LAogICAgICAgICAgICAgICAgICBjaGFyc2V0CiAgICAgICAgICAgICAgKSk7CiAgICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZXM7CiAgfTsKCiAgdmFyIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zKG9wdHMpIHsKICAgICAgaWYgKCFvcHRzKSB7CiAgICAgICAgICByZXR1cm4gZGVmYXVsdHMkMTsKICAgICAgfQoKICAgICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiBvcHRzLmVuY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpOwogICAgICB9CgogICAgICB2YXIgY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCBkZWZhdWx0cyQxLmNoYXJzZXQ7CiAgICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHsKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7CiAgICAgIH0KCiAgICAgIHZhciBmb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107CiAgICAgIGlmICh0eXBlb2Ygb3B0cy5mb3JtYXQgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICBpZiAoIWhhcyQ0LmNhbGwoZm9ybWF0cy5mb3JtYXR0ZXJzLCBvcHRzLmZvcm1hdCkpIHsKICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7CiAgICAgICAgICB9CiAgICAgICAgICBmb3JtYXQgPSBvcHRzLmZvcm1hdDsKICAgICAgfQogICAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07CgogICAgICB2YXIgZmlsdGVyID0gZGVmYXVsdHMkMS5maWx0ZXI7CiAgICAgIGlmICh0eXBlb2Ygb3B0cy5maWx0ZXIgPT09ICdmdW5jdGlvbicgfHwgaXNBcnJheSQzKG9wdHMuZmlsdGVyKSkgewogICAgICAgICAgZmlsdGVyID0gb3B0cy5maWx0ZXI7CiAgICAgIH0KCiAgICAgIHJldHVybiB7CiAgICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cyQxLmFkZFF1ZXJ5UHJlZml4LAogICAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMkMS5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzLAogICAgICAgICAgY2hhcnNldDogY2hhcnNldCwKICAgICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzJDEuY2hhcnNldFNlbnRpbmVsLAogICAgICAgICAgZGVsaW1pdGVyOiB0eXBlb2Ygb3B0cy5kZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMkMS5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlciwKICAgICAgICAgIGVuY29kZTogdHlwZW9mIG9wdHMuZW5jb2RlID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZSA6IGRlZmF1bHRzJDEuZW5jb2RlLAogICAgICAgICAgZW5jb2RlcjogdHlwZW9mIG9wdHMuZW5jb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZW5jb2RlciA6IGRlZmF1bHRzJDEuZW5jb2RlciwKICAgICAgICAgIGVuY29kZVZhbHVlc09ubHk6IHR5cGVvZiBvcHRzLmVuY29kZVZhbHVlc09ubHkgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlVmFsdWVzT25seSA6IGRlZmF1bHRzJDEuZW5jb2RlVmFsdWVzT25seSwKICAgICAgICAgIGZpbHRlcjogZmlsdGVyLAogICAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXR0ZXIsCiAgICAgICAgICBzZXJpYWxpemVEYXRlOiB0eXBlb2Ygb3B0cy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0cy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMkMS5zZXJpYWxpemVEYXRlLAogICAgICAgICAgc2tpcE51bGxzOiB0eXBlb2Ygb3B0cy5za2lwTnVsbHMgPT09ICdib29sZWFuJyA/IG9wdHMuc2tpcE51bGxzIDogZGVmYXVsdHMkMS5za2lwTnVsbHMsCiAgICAgICAgICBzb3J0OiB0eXBlb2Ygb3B0cy5zb3J0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5zb3J0IDogbnVsbCwKICAgICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzJDEuc3RyaWN0TnVsbEhhbmRsaW5nCiAgICAgIH07CiAgfTsKCiAgdmFyIHN0cmluZ2lmeV8xID0gZnVuY3Rpb24gKG9iamVjdCwgb3B0cykgewogICAgICB2YXIgb2JqID0gb2JqZWN0OwogICAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cyk7CgogICAgICB2YXIgb2JqS2V5czsKICAgICAgdmFyIGZpbHRlcjsKCiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5maWx0ZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyOwogICAgICAgICAgb2JqID0gZmlsdGVyKCcnLCBvYmopOwogICAgICB9IGVsc2UgaWYgKGlzQXJyYXkkMyhvcHRpb25zLmZpbHRlcikpIHsKICAgICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyOwogICAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjsKICAgICAgfQoKICAgICAgdmFyIGtleXMgPSBbXTsKCiAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHsKICAgICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIGFycmF5Rm9ybWF0OwogICAgICBpZiAob3B0cyAmJiBvcHRzLmFycmF5Rm9ybWF0IGluIGFycmF5UHJlZml4R2VuZXJhdG9ycykgewogICAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmFycmF5Rm9ybWF0OwogICAgICB9IGVsc2UgaWYgKG9wdHMgJiYgJ2luZGljZXMnIGluIG9wdHMpIHsKICAgICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJzsKICAgICAgfQoKICAgICAgdmFyIGdlbmVyYXRlQXJyYXlQcmVmaXggPSBhcnJheVByZWZpeEdlbmVyYXRvcnNbYXJyYXlGb3JtYXRdOwoKICAgICAgaWYgKCFvYmpLZXlzKSB7CiAgICAgICAgICBvYmpLZXlzID0gT2JqZWN0LmtleXMob2JqKTsKICAgICAgfQoKICAgICAgaWYgKG9wdGlvbnMuc29ydCkgewogICAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07CgogICAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoCiAgICAgICAgICAgICAgb2JqW2tleV0sCiAgICAgICAgICAgICAga2V5LAogICAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsCiAgICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3ROdWxsSGFuZGxpbmcsCiAgICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsCiAgICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGUgPyBvcHRpb25zLmVuY29kZXIgOiBudWxsLAogICAgICAgICAgICAgIG9wdGlvbnMuZmlsdGVyLAogICAgICAgICAgICAgIG9wdGlvbnMuc29ydCwKICAgICAgICAgICAgICBvcHRpb25zLmFsbG93RG90cywKICAgICAgICAgICAgICBvcHRpb25zLnNlcmlhbGl6ZURhdGUsCiAgICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXR0ZXIsCiAgICAgICAgICAgICAgb3B0aW9ucy5lbmNvZGVWYWx1ZXNPbmx5LAogICAgICAgICAgICAgIG9wdGlvbnMuY2hhcnNldAogICAgICAgICAgKSk7CiAgICAgIH0KCiAgICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpOwogICAgICB2YXIgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnOwoKICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7CiAgICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHsKICAgICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSAibnVtZXJpYyBlbnRpdHkiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrCiAgICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJic7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJykKICAgICAgICAgICAgICBwcmVmaXggKz0gJ3V0Zjg9JUUyJTlDJTkzJic7CiAgICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnOwogIH07CgogIHZhciBoYXMkNSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CgogIHZhciBkZWZhdWx0cyQyID0gewogICAgICBhbGxvd0RvdHM6IGZhbHNlLAogICAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLAogICAgICBhcnJheUxpbWl0OiAyMCwKICAgICAgY2hhcnNldDogJ3V0Zi04JywKICAgICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSwKICAgICAgY29tbWE6IGZhbHNlLAogICAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsCiAgICAgIGRlbGltaXRlcjogJyYnLAogICAgICBkZXB0aDogNSwKICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLAogICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IGZhbHNlLAogICAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCwKICAgICAgcGFyc2VBcnJheXM6IHRydWUsCiAgICAgIHBsYWluT2JqZWN0czogZmFsc2UsCiAgICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2UKICB9OwoKICB2YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikgewogICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYjKFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7CiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChudW1iZXJTdHIsIDEwKSk7CiAgICAgIH0pOwogIH07CgogIC8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhbgogIC8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCBib2R5IGFuZCB0aGUgZW5jb2Rpbmcgb2YgdGhlIHBhZ2UgY29udGFpbmluZwogIC8vIHRoZSBmb3JtIGlzIGlzby04ODU5LTEsIG9yIHdoZW4gdGhlIHN1Ym1pdHRlZCBmb3JtIGhhcyBhbiBhY2NlcHQtY2hhcnNldAogIC8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluCiAgLy8gdGhlIOKckyBjaGFyYWN0ZXIsIHN1Y2ggYXMgdXMtYXNjaWkuCiAgdmFyIGlzb1NlbnRpbmVsID0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0InOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JykKCiAgLy8gVGhlc2UgYXJlIHRoZSBwZXJjZW50LWVuY29kZWQgdXRmLTggb2N0ZXRzIHJlcHJlc2VudGluZyBhIGNoZWNrbWFyaywgaW5kaWNhdGluZyB0aGF0IHRoZSByZXF1ZXN0IGFjdHVhbGx5IGlzIHV0Zi04IGVuY29kZWQuCiAgdmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJykKCiAgdmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHsKICAgICAgdmFyIG9iaiA9IHt9OwogICAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cPy8sICcnKSA6IHN0cjsKICAgICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0OwogICAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpOwogICAgICB2YXIgc2tpcEluZGV4ID0gLTE7IC8vIEtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIHV0Zjggc2VudGluZWwgd2FzIGZvdW5kCiAgICAgIHZhciBpOwoKICAgICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7CiAgICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkgewogICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHsKICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHsKICAgICAgICAgICAgICAgICAgICAgIGNoYXJzZXQgPSAndXRmLTgnOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkgewogICAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJzsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpOwogICAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgaWYgKGkgPT09IHNraXBJbmRleCkgewogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTsKCiAgICAgICAgICB2YXIgYnJhY2tldEVxdWFsc1BvcyA9IHBhcnQuaW5kZXhPZignXT0nKTsKICAgICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7CgogICAgICAgICAgdmFyIGtleSwgdmFsOwogICAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHsKICAgICAgICAgICAgICBrZXkgPSBvcHRpb25zLmRlY29kZXIocGFydCwgZGVmYXVsdHMkMi5kZWNvZGVyLCBjaGFyc2V0KTsKICAgICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMkMi5kZWNvZGVyLCBjaGFyc2V0KTsKICAgICAgICAgICAgICB2YWwgPSBvcHRpb25zLmRlY29kZXIocGFydC5zbGljZShwb3MgKyAxKSwgZGVmYXVsdHMkMi5kZWNvZGVyLCBjaGFyc2V0KTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykgewogICAgICAgICAgICAgIHZhbCA9IGludGVycHJldE51bWVyaWNFbnRpdGllcyh2YWwpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh2YWwgJiYgb3B0aW9ucy5jb21tYSAmJiB2YWwuaW5kZXhPZignLCcpID4gLTEpIHsKICAgICAgICAgICAgICB2YWwgPSB2YWwuc3BsaXQoJywnKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaGFzJDUuY2FsbChvYmosIGtleSkpIHsKICAgICAgICAgICAgICBvYmpba2V5XSA9IHV0aWxzLmNvbWJpbmUob2JqW2tleV0sIHZhbCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG9ialtrZXldID0gdmFsOwogICAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gb2JqOwogIH07CgogIHZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zKSB7CiAgICAgIHZhciBsZWFmID0gdmFsOwoKICAgICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgICB2YXIgb2JqOwogICAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTsKCiAgICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7CiAgICAgICAgICAgICAgb2JqID0gW10uY29uY2F0KGxlYWYpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTsKICAgICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7CiAgICAgICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoY2xlYW5Sb290LCAxMCk7CiAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGNsZWFuUm9vdCA9PT0gJycpIHsKICAgICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07CiAgICAgICAgICAgICAgfSBlbHNlIGlmICgKICAgICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KQogICAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3QKICAgICAgICAgICAgICAgICAgJiYgU3RyaW5nKGluZGV4KSA9PT0gY2xlYW5Sb290CiAgICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDAKICAgICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KQogICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICBvYmogPSBbXTsKICAgICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgb2JqW2NsZWFuUm9vdF0gPSBsZWFmOwogICAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBsZWFmID0gb2JqOwogICAgICB9CgogICAgICByZXR1cm4gbGVhZjsKICB9OwoKICB2YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucykgewogICAgICBpZiAoIWdpdmVuS2V5KSB7CiAgICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvbgogICAgICB2YXIga2V5ID0gb3B0aW9ucy5hbGxvd0RvdHMgPyBnaXZlbktleS5yZXBsYWNlKC9cLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTsKCiAgICAgIC8vIFRoZSByZWdleCBjaHVua3MKCiAgICAgIHZhciBicmFja2V0cyA9IC8oXFtbXltcXV0qXSkvOwogICAgICB2YXIgY2hpbGQgPSAvKFxbW15bXF1dKl0pL2c7CgogICAgICAvLyBHZXQgdGhlIHBhcmVudAoKICAgICAgdmFyIHNlZ21lbnQgPSBicmFja2V0cy5leGVjKGtleSk7CiAgICAgIHZhciBwYXJlbnQgPSBzZWdtZW50ID8ga2V5LnNsaWNlKDAsIHNlZ21lbnQuaW5kZXgpIDoga2V5OwoKICAgICAgLy8gU3Rhc2ggdGhlIHBhcmVudCBpZiBpdCBleGlzdHMKCiAgICAgIHZhciBrZXlzID0gW107CiAgICAgIGlmIChwYXJlbnQpIHsKICAgICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllcwogICAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMkNS5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHsKICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAga2V5cy5wdXNoKHBhcmVudCk7CiAgICAgIH0KCiAgICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aAoKICAgICAgdmFyIGkgPSAwOwogICAgICB3aGlsZSAoKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7CiAgICAgICAgICBpICs9IDE7CiAgICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcyQ1LmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgc2VnbWVudFsxXS5zbGljZSgxLCAtMSkpKSB7CiAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykgewogICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pOwogICAgICB9CgogICAgICAvLyBJZiB0aGVyZSdzIGEgcmVtYWluZGVyLCBqdXN0IGFkZCB3aGF0ZXZlciBpcyBsZWZ0CgogICAgICBpZiAoc2VnbWVudCkgewogICAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMpOwogIH07CgogIHZhciBub3JtYWxpemVQYXJzZU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cykgewogICAgICBpZiAoIW9wdHMpIHsKICAgICAgICAgIHJldHVybiBkZWZhdWx0cyQyOwogICAgICB9CgogICAgICBpZiAob3B0cy5kZWNvZGVyICE9PSBudWxsICYmIG9wdHMuZGVjb2RlciAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRzLmRlY29kZXIgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTsKICAgICAgfQogICAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMkMi5jaGFyc2V0IDogb3B0cy5jaGFyc2V0OwoKICAgICAgcmV0dXJuIHsKICAgICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzJDIuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cywKICAgICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzJDIuYWxsb3dQcm90b3R5cGVzLAogICAgICAgICAgYXJyYXlMaW1pdDogdHlwZW9mIG9wdHMuYXJyYXlMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLmFycmF5TGltaXQgOiBkZWZhdWx0cyQyLmFycmF5TGltaXQsCiAgICAgICAgICBjaGFyc2V0OiBjaGFyc2V0LAogICAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMkMi5jaGFyc2V0U2VudGluZWwsCiAgICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cyQyLmNvbW1hLAogICAgICAgICAgZGVjb2RlcjogdHlwZW9mIG9wdHMuZGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZGVjb2RlciA6IGRlZmF1bHRzJDIuZGVjb2RlciwKICAgICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAnc3RyaW5nJyB8fCB1dGlscy5pc1JlZ0V4cChvcHRzLmRlbGltaXRlcikgPyBvcHRzLmRlbGltaXRlciA6IGRlZmF1bHRzJDIuZGVsaW1pdGVyLAogICAgICAgICAgZGVwdGg6IHR5cGVvZiBvcHRzLmRlcHRoID09PSAnbnVtYmVyJyA/IG9wdHMuZGVwdGggOiBkZWZhdWx0cyQyLmRlcHRoLAogICAgICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IG9wdHMuaWdub3JlUXVlcnlQcmVmaXggPT09IHRydWUsCiAgICAgICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IHR5cGVvZiBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgOiBkZWZhdWx0cyQyLmludGVycHJldE51bWVyaWNFbnRpdGllcywKICAgICAgICAgIHBhcmFtZXRlckxpbWl0OiB0eXBlb2Ygb3B0cy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMkMi5wYXJhbWV0ZXJMaW1pdCwKICAgICAgICAgIHBhcnNlQXJyYXlzOiBvcHRzLnBhcnNlQXJyYXlzICE9PSBmYWxzZSwKICAgICAgICAgIHBsYWluT2JqZWN0czogdHlwZW9mIG9wdHMucGxhaW5PYmplY3RzID09PSAnYm9vbGVhbicgPyBvcHRzLnBsYWluT2JqZWN0cyA6IGRlZmF1bHRzJDIucGxhaW5PYmplY3RzLAogICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nOiB0eXBlb2Ygb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgPT09ICdib29sZWFuJyA/IG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nIDogZGVmYXVsdHMkMi5zdHJpY3ROdWxsSGFuZGxpbmcKICAgICAgfTsKICB9OwoKICB2YXIgcGFyc2UkMSA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHsKICAgICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cyk7CgogICAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgIHJldHVybiBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTsKICAgICAgfQoKICAgICAgdmFyIHRlbXBPYmogPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7CiAgICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTsKCiAgICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3QKCiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07CiAgICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zKTsKICAgICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTsKICB9OwoKICB2YXIgbGliID0gewogICAgICBmb3JtYXRzOiBmb3JtYXRzLAogICAgICBwYXJzZTogcGFyc2UkMSwKICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlfMQogIH07CiAgdmFyIGxpYl8zID0gbGliLnN0cmluZ2lmeTsKCiAgdmFyIEJJTl9UWVBFUyA9IFsnYXJyYXlidWZmZXInLCAnYmxvYiddOw0KDQogIGZ1bmN0aW9uIHJlcXVlc3Qob3B0aW9ucykgew0KICAgIHZhciBodHRwLCB1cmksIG1ldGhvZCwgdGltZW91dDsNCiAgICBodHRwID0gbmV3IEFjdGl2ZVhPYmplY3QoJ1dpbkh0dHAuV2luSHR0cFJlcXVlc3QuNS4xJyk7DQogICAgdXJpID0gb3B0aW9ucy51cmkgfHwgb3B0aW9ucy51cmwgfHwgb3B0aW9ucy5wYXRoOw0KICAgIG1ldGhvZCA9IChvcHRpb25zLm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKTsNCiAgICB0aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IHx8IDMwMDA7DQogICAgaHR0cC5zZXRUaW1lb3V0cyh0aW1lb3V0LCB0aW1lb3V0LCB0aW1lb3V0LCB0aW1lb3V0KTsNCg0KICAgIHRyeSB7DQogICAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZm9ybSB8fCBvcHRpb25zLmRhdGEgfHwgbnVsbDsNCiAgICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykgeyBkYXRhID0gbGliXzMoZGF0YSk7IH0NCiAgICAgIGlmIChkYXRhKSB7DQogICAgICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7DQogICAgICAgICAgaHR0cC5vcGVuKG1ldGhvZCwgdXJpICsgJz8nICsgZGF0YSwgZmFsc2UpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGh0dHAub3BlbihtZXRob2QsIHVyaSwgZmFsc2UpOw0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBodHRwLm9wZW4obWV0aG9kLCB1cmksIGZhbHNlKTsNCiAgICAgIH0NCiAgICAgIGFwcGx5T3B0aW9ucyhodHRwLCBvcHRpb25zKTsNCiAgICAgIGh0dHAuc2VuZChkYXRhKTsNCg0KICAgICAgcmV0dXJuIHsNCiAgICAgICAgc3RhdHVzQ29kZTogaHR0cC5zdGF0dXMsDQogICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyhodHRwLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSwNCiAgICAgICAgYm9keTogQklOX1RZUEVTLmluY2x1ZGVzKG9wdGlvbnMucmVzcG9uc2VUeXBlKQ0KICAgICAgICAgID8gQnVmZmVyLmZyb20oaHR0cC5SZXNwb25zZUJvZHkpDQogICAgICAgICAgOiBodHRwLlJlc3BvbnNlVGV4dA0KICAgICAgfTsNCiAgICB9IGNhdGNoIChlKSB7DQogICAgICB0aHJvdyBlOw0KICAgIH0NCiAgfQ0KDQogIC8qDQogIGVudW0gV2luSHR0cFJlcXVlc3RPcHRpb24gew0KICAgIFVzZXJBZ2VudFN0cmluZyA9IDAsDQogICAgVVJMID0gMSwNCiAgICBVUkxDb2RlUGFnZSA9IDIsDQogICAgRXNjYXBlUGVyY2VudEluVVJMID0gMywNCiAgICBTc2xFcnJvcklnbm9yZUZsYWdzID0gNCwNCiAgICBTZWxlY3RDZXJ0aWZpY2F0ZSA9IDUsDQogICAgRW5hYmxlUmVkaXJlY3RzID0gNiwNCiAgICBVcmxFc2NhcGVEaXNhYmxlID0gNywNCiAgICBVcmxFc2NhcGVEaXNhYmxlUXVlcnkgPSA4LA0KICAgIFNlY3VyZVByb3RvY29scyA9IDksDQogICAgRW5hYmxlVHJhY2luZyA9IDEwLA0KICAgIFJldmVydEltcGVyc29uYXRpb25PdmVyU3NsID0gMTEsDQogICAgRW5hYmxlSHR0cHNUb0h0dHBSZWRpcmVjdHMgPSAxMiwNCiAgICBFbmFibGVQYXNzcG9ydEF1dGhlbnRpY2F0aW9uID0gMTMsDQogICAgTWF4QXV0b21hdGljUmVkaXJlY3RzID0gMTQsDQogICAgTWF4UmVzcG9uc2VIZWFkZXJTaXplID0gMTUsDQogICAgTWF4UmVzcG9uc2VEcmFpblNpemUgPSAxNiwNCiAgICBFbmFibGVIdHRwMV8xID0gMTcsDQogICAgRW5hYmxlQ2VydGlmaWNhdGVSZXZvY2F0aW9uQ2hlY2sgPSAxOA0KICB9DQogICovDQoNCiAgdmFyIHNldFJlcU9wdHMgPSBGdW5jdGlvbigNCiAgICAnaHR0cCcsDQogICAgIlxuaHR0cC5PcHRpb24oMCkgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgNi4xOyBUcmlkZW50LzcuMDsgcnY6MTEuMCkgbGlrZSBHZWNrbyc7XG5odHRwLk9wdGlvbig0KSA9IDEzMDU2O1xuaHR0cC5PcHRpb24oNikgPSBmYWxzZTsiDQogICk7DQoNCiAgZnVuY3Rpb24gYXBwbHlPcHRpb25zKGh0dHAsIG9wdGlvbnMpIHsNCiAgICBpZiAob3B0aW9ucy5wcm94eSkgew0KICAgICAgc2V0UmVxT3B0cyhodHRwKTsNCiAgICAgIGh0dHAuc2V0UHJveHkoJzInLCBvcHRpb25zLnByb3h5KTsNCiAgICAgIC8vIGh0dHAuU2V0Q2xpZW50Q2VydGlmaWNhdGUoIkxPQ0FMX01BQ0hJTkVcUGVyc29uYWxcTXkgQ2VydGlmaWNhdGUiKQ0KICAgICAgLy8gaHR0cC5TZXRDcmVkZW50aWFscygndXNlcicsICdwYXNzJywgMSk7DQogICAgfQ0KDQogICAgaWYgKG9wdGlvbnMubWV0aG9kICE9PSAnR0VUJykgew0KICAgICAgaHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7DQogICAgfQ0KDQogICAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnM7DQogICAgaWYgKGhlYWRlcnMpIHsNCiAgICAgIGZvciAodmFyIGtleSBpbiBoZWFkZXJzKSB7DQogICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PSAnY29va2llJykgew0KICAgICAgICAgIGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQ29va2llJywgJ3N0cmluZycpOw0KICAgICAgICAgIGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQ29va2llJywgaGVhZGVyc1trZXldKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBodHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBoZWFkZXJzW2tleV0pOw0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHN0cl9oZWFkZXJzKSB7DQogICAgdmFyIHJlc3VsdCA9IHt9LA0KICAgICAgaGVhZGVycywNCiAgICAgIGksDQogICAgICBrLA0KICAgICAgdjsNCiAgICBoZWFkZXJzID0gc3RyX2hlYWRlcnMudHJpbSgpLnNwbGl0KC9ccj9cbi8pOw0KICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7DQogICAgICBpID0gaGVhZGVyLmluZGV4T2YoJzonKTsNCiAgICAgIGsgPSBoZWFkZXIuc2xpY2UoMCwgaSkudHJpbSgpOw0KICAgICAgdiA9IGhlYWRlci5zbGljZShpICsgMSkudHJpbSgpOw0KICAgICAgaWYgKGsudG9Mb3dlckNhc2UoKSA9PSAnc2V0LWNvb2tpZScpIHsNCiAgICAgICAgaWYgKHJlc3VsdFtrXSkgeyByZXN1bHRba10ucHVzaCh2KTsgfQ0KICAgICAgICBlbHNlIHsgcmVzdWx0W2tdID0gW3ZdOyB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXN1bHRba10gPSB2Ow0KICAgICAgfQ0KICAgIH0pOw0KICAgIHJldHVybiByZXN1bHQ7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRPcHRpb24oYXJncykgew0KICAgIHZhciBvcHRpb25zOw0KICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIHsNCiAgICAgIG9wdGlvbnMgPSBhcmdzWzFdIHx8IHt9Ow0KICAgICAgb3B0aW9ucy51cmkgPSBhcmdzWzBdOw0KICAgIH0gZWxzZSB7DQogICAgICBvcHRpb25zID0gYXJnc1swXSB8fCB7fTsNCiAgICB9DQogICAgcmV0dXJuIG9wdGlvbnM7DQogIH0NCg0KICB2YXIgaHR0cCA9IHsNCiAgICByZXF1ZXN0OiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiByZXF1ZXN0KGdldE9wdGlvbihhcmd1bWVudHMpKTsNCiAgICB9LA0KICAgIGdldDogZnVuY3Rpb24oKSB7DQogICAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbihhcmd1bWVudHMpOw0KICAgICAgb3B0aW9ucy5tZXRob2QgPSAnR0VUJzsNCiAgICAgIHJldHVybiByZXF1ZXN0KG9wdGlvbnMpOw0KICAgIH0sDQogICAgcG9zdDogZnVuY3Rpb24oKSB7DQogICAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbihhcmd1bWVudHMpOw0KICAgICAgb3B0aW9ucy5tZXRob2QgPSAnUE9TVCc7DQogICAgICByZXR1cm4gcmVxdWVzdChvcHRpb25zKTsNCiAgICB9DQogIH07CgogIHZhciBodHRwJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICAnZGVmYXVsdCc6IGh0dHAKICB9KTsKCiAgZnVuY3Rpb24gX2NpcGhlcihlbmMsIGJ1Zl9wYXNzd29yZCwgYnVmX2RhdGEpIHsNCiAgICB2YXIgY3J5cHQgPSBuZXcgQWN0aXZlWE9iamVjdCgnU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5SaWpuZGFlbE1hbmFnZWQnKTsNCiAgICB2YXIga2V5SGFzaCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nk1hbmFnZWQnKTsNCiAgICBrZXlIYXNoLkNvbXB1dGVIYXNoXzIoYnVmX3Bhc3N3b3JkLmJ1ZmZlcik7DQogICAgY3J5cHQuS2V5ID0ga2V5SGFzaC5IYXNoOw0KICAgIGtleUhhc2guQ2xlYXIoKTsNCg0KICAgIHZhciBpdkhhc2ggPSBuZXcgQWN0aXZlWE9iamVjdCgNCiAgICAgICdTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Lk1ENUNyeXB0b1NlcnZpY2VQcm92aWRlcicNCiAgICApOw0KICAgIGl2SGFzaC5Db21wdXRlSGFzaF8yKGJ1Zl9wYXNzd29yZC5idWZmZXIpOw0KICAgIGNyeXB0LklWID0gaXZIYXNoLkhhc2g7DQogICAgaXZIYXNoLkNsZWFyKCk7DQoNCiAgICB2YXIgZHN0ID0gbnVsbDsNCiAgICB2YXIgdHMgPSBlbmMgPyBjcnlwdC5DcmVhdGVFbmNyeXB0b3IoKSA6IGNyeXB0LkNyZWF0ZURlY3J5cHRvcigpOw0KICAgIHRyeSB7DQogICAgICBkc3QgPSB0cy5UcmFuc2Zvcm1GaW5hbEJsb2NrKGJ1Zl9kYXRhLmJ1ZmZlciwgMCwgYnVmX2RhdGEubGVuZ3RoKTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgY3J5cHQuQ2xlYXIoKTsNCiAgICB9DQogICAgcmV0dXJuIGRzdDsNCiAgfQ0KDQogIHZhciBDaXBoZXIgPSBmdW5jdGlvbiBDaXBoZXIoYWxnb3JpdGhtLCBwYXNzd29yZCwgaXNFbmNvZGUpIHsNCiAgICB0aGlzLmFsZ29yaXRobSA9IGFsZ29yaXRobTsNCiAgICB0aGlzLnBhc3N3b3JkID0gcGFzc3dvcmQ7DQogICAgdGhpcy5pc0VuY29kZSA9IGlzRW5jb2RlOw0KICAgIHRoaXMuZGF0YSA9IG51bGw7DQogICAgdGhpcy5pbnB1dEVuY29kaW5nID0gbnVsbDsNCiAgICB0aGlzLm91dHB1dEVuY29kaW5nID0gbnVsbDsNCiAgfTsNCg0KICBDaXBoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgaW5wdXRFbmNvZGluZywgb3V0cHV0RW5jb2RpbmcpIHsNCiAgICB0aGlzLmRhdGEgPSBkYXRhOw0KICAgIGlmIChpbnB1dEVuY29kaW5nKSB7IHRoaXMuaW5wdXRFbmNvZGluZyA9IGlucHV0RW5jb2Rpbmc7IH0NCiAgICBpZiAob3V0cHV0RW5jb2RpbmcpIHsgdGhpcy5vdXRwdXRFbmNvZGluZyA9IG91dHB1dEVuY29kaW5nOyB9DQogICAgcmV0dXJuIHRoaXM7DQogIH07DQoNCiAgQ2lwaGVyLnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIGZpbmFsIChvdXRwdXRFbmNvZGluZykgew0KICAgIGlmIChvdXRwdXRFbmNvZGluZykgeyB0aGlzLm91dHB1dEVuY29kaW5nID0gb3V0cHV0RW5jb2Rpbmc7IH0NCiAgICB2YXIgYnl0ZXMgPSBfY2lwaGVyKA0KICAgICAgdGhpcy5pc0VuY29kZSwNCiAgICAgIEJ1ZmZlci5mcm9tKHRoaXMucGFzc3dvcmQpLA0KICAgICAgQnVmZmVyLmZyb20odGhpcy5kYXRhLCB0aGlzLmlucHV0RW5jb2RpbmcpDQogICAgKTsNCiAgICBpZiAodGhpcy5vdXRwdXRFbmNvZGluZyA9PSBudWxsIHx8IHRoaXMub3V0cHV0RW5jb2RpbmcgPT0gJ2JpbmFyeScpIHsNCiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcyk7DQogICAgfSBlbHNlIHsNCiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcodGhpcy5vdXRwdXRFbmNvZGluZyk7DQogICAgfQ0KICB9Ow0KDQogIGZ1bmN0aW9uIF9oYXNoKG9iam5hbWUsIGJ1Zl9kYXRhLCBvcHRfdHlwZSkgew0KICAgIHZhciBwcm92aWRlciA9IG5ldyBBY3RpdmVYT2JqZWN0KG9iam5hbWUpOw0KICAgIHByb3ZpZGVyLkNvbXB1dGVIYXNoXzIoYnVmX2RhdGEuYnVmZmVyKTsNCiAgICB2YXIgaGFzaHMgPSBwcm92aWRlci5IYXNoOw0KICAgIHByb3ZpZGVyLkNsZWFyKCk7DQogICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGhhc2hzKS50b1N0cmluZyhvcHRfdHlwZSB8fCAnaGV4Jyk7DQogIH0NCg0KICB2YXIgSGFzaCA9IGZ1bmN0aW9uIEhhc2goYWxnb3JpdGhtKSB7DQogICAgdGhpcy5hbGdvcml0aG0gPSBhbGdvcml0aG07DQogICAgdGhpcy5kYXRhID0gbnVsbDsNCiAgICB0aGlzLmlucHV0RW5jb2RpbmcgPSBudWxsOw0KICB9Ow0KDQogIEhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgaW5wdXRFbmNvZGluZykgewogICAgICBpZiAoIGlucHV0RW5jb2RpbmcgPT09IHZvaWQgMCApIGlucHV0RW5jb2RpbmcgPSAndXRmLTgnOwoNCiAgICB0aGlzLmlucHV0RW5jb2RpbmcgPSBpbnB1dEVuY29kaW5nOw0KICAgIHRoaXMuZGF0YSA9IGRhdGE7DQogICAgcmV0dXJuIHRoaXM7DQogIH07DQoNCiAgSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0IChlbmNvZGluZykgew0KICAgIGlmICh0aGlzLmFsZ29yaXRobSA9PSAnbWQ1Jykgew0KICAgICAgcmV0dXJuIF9oYXNoKA0KICAgICAgICAnU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5NRDVDcnlwdG9TZXJ2aWNlUHJvdmlkZXInLA0KICAgICAgICBCdWZmZXIuZnJvbSh0aGlzLmRhdGEsIHRoaXMuaW5wdXRFbmNvZGluZyksDQogICAgICAgIGVuY29kaW5nDQogICAgICApOw0KICAgIH0gZWxzZSBpZiAodGhpcy5hbGdvcml0aG0gPT0gJ3NoYTEnKSB7DQogICAgICByZXR1cm4gX2hhc2goDQogICAgICAgICdTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTFDcnlwdG9TZXJ2aWNlUHJvdmlkZXInLA0KICAgICAgICBCdWZmZXIuZnJvbSh0aGlzLmRhdGEsIHRoaXMuaW5wdXRFbmNvZGluZyksDQogICAgICAgIGVuY29kaW5nDQogICAgICApOw0KICAgIH0NCiAgfTsNCg0KICB2YXIgY3J5cHRvID0gew0KICAgIGNyZWF0ZUNpcGhlcjogZnVuY3Rpb24oYWxnb3JpdGhtLCBwYXNzd29yZCkgew0KICAgICAgcmV0dXJuIG5ldyBDaXBoZXIoYWxnb3JpdGhtLCBwYXNzd29yZCwgdHJ1ZSk7DQogICAgfSwNCg0KICAgIGNyZWF0ZURlQ2lwaGVyOiBmdW5jdGlvbihhbGdvcml0aG0sIHBhc3N3b3JkKSB7DQogICAgICByZXR1cm4gbmV3IENpcGhlcihhbGdvcml0aG0sIHBhc3N3b3JkLCBmYWxzZSk7DQogICAgfSwNCg0KICAgIGNyZWF0ZUhhc2g6IGZ1bmN0aW9uKGFsZ29yaXRobSkgew0KICAgICAgcmV0dXJuIG5ldyBIYXNoKGFsZ29yaXRobSk7DQogICAgfQ0KICB9OwoKICB2YXIgY3J5cHRvJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBDaXBoZXI6IENpcGhlciwKICAgICdkZWZhdWx0JzogY3J5cHRvCiAgfSk7CgogIHZhciBERUZBVUxUX09QVElPTlMgPSB7DQogICAgaGVhZGVyczogZmFsc2UsDQogICAgZGVsaW1pdGVyOiAnLCcsDQogICAgcXVvdGU6ICciJywNCiAgICBlc2NhcGU6ICciJywNCiAgICB0cmltOiBmYWxzZSwNCiAgICBydHJpbTogZmFsc2UsDQogICAgbHRyaW06IGZhbHNlLA0KICAgIG5ld2xpbmU6ICdcclxuJw0KICB9Ow0KDQogIC8vICNyZWdpb24gUGFyc2VyDQoNCiAgdmFyIFBhcnNlciA9IGZ1bmN0aW9uIFBhcnNlcihvcHRpb25zKSB7DQogICAgT2JqZWN0LmFzc2lnbih0aGlzLCBERUZBVUxUX09QVElPTlMpOw0KICAgIGlmIChpc09iamVjdChvcHRpb25zKSkgew0KICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTsNCiAgICB9DQogIH07DQoNCiAgUGFyc2VyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdCAoKSB7DQogICAgdGhpcy5yb3dzID0gW107DQogICAgdGhpcy5yb3cgPSBbXTsNCiAgICB0aGlzLmN1cnNvciA9IC0xOw0KICAgIHRoaXMuY2FjaGVkID0gMDsNCiAgICB0aGlzLmJ1ZiA9IFtdOw0KICAgIHRoaXMuYnVmTGVuID0gMDsNCiAgICB0aGlzLnF1b3RpbmcgPSBmYWxzZTsNCiAgfTsNCg0KICBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKHN0cikgew0KICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoLA0KICAgICAgYywNCiAgICAgIG5leHQ7DQogICAgdGhpcy5pbml0KCk7DQogICAgd2hpbGUgKCsrdGhpcy5jdXJzb3IgPCBsZW4pIHsNCiAgICAgIGMgPSBzdHJbdGhpcy5jdXJzb3JdOw0KICAgICAgaWYgKHRoaXMucXVvdGluZykgew0KICAgICAgICBuZXh0ID0gc3RyW3RoaXMuY3Vyc29yICsgMV07DQogICAgICAgIGlmIChjID09PSB0aGlzLmVzY2FwZSAmJiBuZXh0ID09PSB0aGlzLnF1b3RlKSB7DQogICAgICAgICAgdGhpcy5jdXJzb3IrKzsNCiAgICAgICAgICB0aGlzLl9jaGFyKG5leHQpOw0KICAgICAgICB9IGVsc2UgaWYgKGMgPT09IHRoaXMucXVvdGUgJiYgbmV4dCA9PT0gdGhpcy5kZWxpbWl0ZXIpIHsNCiAgICAgICAgICB0aGlzLnF1b3RpbmcgPSBmYWxzZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB0aGlzLl9jaGFyKGMpOw0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBpZiAodGhpcy5idWZMZW4gPT09IDAgJiYgYyA9PT0gdGhpcy5xdW90ZSkgew0KICAgICAgICAgIHRoaXMucXVvdGluZyA9IHRydWU7DQogICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gdGhpcy5kZWxpbWl0ZXIpIHsNCiAgICAgICAgICB0aGlzLl9jZWxsKCk7DQogICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJ1xuJykgew0KICAgICAgICAgIHRoaXMuX3JvdygpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHRoaXMuX2NoYXIoYyk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHRoaXMuX3Jlc3VsdCgpOw0KICB9Ow0KDQogIFBhcnNlci5wcm90b3R5cGUuX3Jlc3VsdCA9IGZ1bmN0aW9uIF9yZXN1bHQgKCkgew0KICAgIHZhciByZXN1bHQsIGhlYWRlcnMsIGxlbjsNCiAgICBpZiAodGhpcy5jYWNoZWQgIT09IHRoaXMuY3Vyc29yKSB7DQogICAgICB0aGlzLl9yb3coKTsNCiAgICB9DQogICAgbGVuID0gdGhpcy5yb3dzLmxlbmd0aDsNCiAgICByZXN1bHQgPSB0aGlzLnJvd3M7DQogICAgaWYgKHRoaXMuaGVhZGVycyA9PT0gdHJ1ZSAmJiBsZW4gPiAxKSB7DQogICAgICBoZWFkZXJzID0gdGhpcy5yb3dzLnNoaWZ0KCk7DQogICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaXMuaGVhZGVycykgJiYgbGVuID4gMCkgew0KICAgICAgaGVhZGVycyA9IHRoaXMuaGVhZGVyczsNCiAgICB9DQogICAgaWYgKGhlYWRlcnMgJiYgaGVhZGVycy5sZW5ndGggPiAwKSB7DQogICAgICByZXN1bHQgPSB0aGlzLnJvd3MubWFwKGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuIHppcE9iamVjdChoZWFkZXJzLCByb3cpOyB9KTsNCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdDsNCiAgfTsNCg0KICBQYXJzZXIucHJvdG90eXBlLl9jaGFyID0gZnVuY3Rpb24gX2NoYXIgKGMpIHsNCiAgICB0aGlzLmJ1Zlt0aGlzLmJ1Zkxlbl0gPSBjOw0KICAgIHRoaXMuYnVmTGVuKys7DQogIH07DQoNCiAgUGFyc2VyLnByb3RvdHlwZS5fY2VsbCA9IGZ1bmN0aW9uIF9jZWxsICgpIHsNCiAgICB2YXIgdmFsLCBpOw0KICAgIGkgPSB0aGlzLmJ1ZkxlbjsNCiAgICBpZiAoaSA9PT0gMCkgeyByZXR1cm47IH0NCiAgICB2YWwgPSB0aGlzLmJ1Zi5qb2luKCcnKTsNCiAgICBpZiAodGhpcy50cmltKSB7IHZhbCA9IHZhbC50cmltKCk7IH0NCiAgICBlbHNlIGlmICh0aGlzLmx0cmltKSB7IHZhbCA9IGx0cmltJDEodmFsKTsgfQ0KICAgIGVsc2UgaWYgKHRoaXMucnRyaW0pIHsgdmFsID0gcnRyaW0kMSh2YWwpOyB9DQogICAgdGhpcy5idWYubGVuZ3RoID0gMDsNCiAgICB0aGlzLmJ1ZkxlbiA9IDA7DQogICAgdGhpcy5yb3cucHVzaCh2YWwpOw0KICB9Ow0KDQogIFBhcnNlci5wcm90b3R5cGUuX3JvdyA9IGZ1bmN0aW9uIF9yb3cgKCkgew0KICAgIGlmICh0aGlzLmJ1ZkxlbiA+IDAgJiYgdGhpcy5idWZbdGhpcy5idWZMZW4gLSAxXSA9PT0gJ1xyJykgew0KICAgICAgdGhpcy5idWZbdGhpcy5idWZMZW4gLSAxXSA9ICcnOw0KICAgIH0NCiAgICB0aGlzLl9jZWxsKCk7DQogICAgaWYgKHRoaXMucm93Lmxlbmd0aCA+IDApIHsNCiAgICAgIHRoaXMucm93cy5wdXNoKHRoaXMucm93KTsNCiAgICAgIHRoaXMucm93ID0gW107DQogICAgICB0aGlzLmNhY2hlZCA9IHRoaXMuY3Vyc29yOw0KICAgIH0NCiAgfTsNCg0KICBmdW5jdGlvbiBsdHJpbSQxKHN0cikgew0KICAgIHJldHVybiBzdHIucmVwbGFjZSgvXlxzKy8sICcnKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJ0cmltJDEoc3RyKSB7DQogICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9ccyskLywgJycpOw0KICB9DQoNCiAgZnVuY3Rpb24gY3JlYXRlUGFyc2VyKG9wdGlvbnMpIHsNCiAgICByZXR1cm4gbmV3IFBhcnNlcihvcHRpb25zKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHBhcnNlJDIoc3RyLCBvcHRpb25zKSB7DQogICAgcmV0dXJuIG5ldyBQYXJzZXIob3B0aW9ucykucGFyc2Uoc3RyKTsNCiAgfQ0KDQogIC8vICNlbmRyZWdpb24NCg0KICAvLyAjcmVnaW9uIEZvcm1hdHRlcg0KDQogIHZhciBGb3JtYXR0ZXIgPSBmdW5jdGlvbiBGb3JtYXR0ZXIob3B0aW9ucykgew0KICAgIE9iamVjdC5hc3NpZ24odGhpcywgREVGQVVMVF9PUFRJT05TKTsNCiAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHsNCiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7DQogICAgfQ0KICB9Ow0KDQogIEZvcm1hdHRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKCkgew0KICAgIHRoaXMucm93cyA9IFtdOw0KICAgIHRoaXMuY3RybENoYXJQYXR0ZXJuID0gUmVnRXhwKA0KICAgICAgZXNjYXBlUmVnRXhwKFt0aGlzLnF1b3RlLCB0aGlzLmRlbGltaXRlciwgdGhpcy5uZXdsaW5lXS5qb2luKCd8JykpDQogICAgKTsNCiAgfTsNCg0KICBGb3JtYXR0ZXIucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZGF0YSkgew0KICAgIHZhciByb3csIGksIGxlbiwgcm93RGF0YUlzQXJyYXk7DQogICAgdGhpcy5pbml0KCk7DQogICAgaWYgKGlzQXJyYXkodGhpcy5oZWFkZXJzKSkgew0KICAgICAgdGhpcy5fcm93KHRoaXMuaGVhZGVycyk7DQogICAgfQ0KICAgIGxlbiA9IGlzQXJyYXkoZGF0YSkgJiYgZGF0YS5sZW5ndGg7DQogICAgaWYgKGxlbiAmJiBsZW4gPiAwKSB7DQogICAgICBpID0gMDsNCiAgICAgIHJvdyA9IGRhdGFbMF07DQogICAgICByb3dEYXRhSXNBcnJheSA9IGlzQXJyYXkocm93KTsNCiAgICAgIGlmIChyb3dEYXRhSXNBcnJheSkgew0KICAgICAgICBpZiAodGhpcy5oZWFkZXJzID09PSB0cnVlKSB7DQogICAgICAgICAgdGhpcy5oZWFkZXJzID0gcm93Ow0KICAgICAgICAgIHRoaXMuX3Jvdyh0aGlzLmhlYWRlcnMpOw0KICAgICAgICAgIGkgPSAxOw0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLmhlYWRlcnMgPSBPYmplY3Qua2V5cyhyb3cpOw0KICAgICAgICB0aGlzLl9yb3codGhpcy5oZWFkZXJzKTsNCiAgICAgIH0NCg0KICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykgew0KICAgICAgICByb3cgPSBkYXRhW2ldOw0KICAgICAgICBpZiAocm93RGF0YUlzQXJyYXkpIHsgdGhpcy5fcm93KHJvdyk7IH0NCiAgICAgICAgZWxzZSB7IHRoaXMuX3JvdyhtYXAocm93KSk7IH0NCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHRoaXMuX3Jlc3VsdCgpOw0KICB9Ow0KDQogIEZvcm1hdHRlci5wcm90b3R5cGUuX3JvdyA9IGZ1bmN0aW9uIF9yb3cgKHJvdykgewogICAgICB2YXIgdGhpcyQxID0gdGhpczsKDQogICAgdmFyIHF1b3RlID0gdGhpcy5xdW90ZTsNCiAgICB2YXIgZXNjYXBlX3F1b3RlID0gdGhpcy5lc2NhcGUgKyBxdW90ZTsNCiAgICB2YXIgcXVvdGVSZWdleHAgPSBSZWdFeHAodGhpcy5xdW90ZSwgJ2cnKTsNCiAgICB2YXIgbGluZSA9IHJvdw0KICAgICAgLm1hcChmdW5jdGlvbiAoaXQpIHsNCiAgICAgICAgdmFyIHZhbCA9IGl0ICsgJyc7DQogICAgICAgIGlmICh0aGlzJDEuY3RybENoYXJQYXR0ZXJuLnRlc3QodmFsKSkgew0KICAgICAgICAgIHZhbCA9IHF1b3RlICsgdmFsLnJlcGxhY2UocXVvdGVSZWdleHAsIGVzY2FwZV9xdW90ZSkgKyBxdW90ZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gdmFsOw0KICAgICAgfSkNCiAgICAgIC5qb2luKHRoaXMuZGVsaW1pdGVyKTsNCiAgICB0aGlzLnJvd3MucHVzaChsaW5lKTsNCiAgfTsNCg0KICBGb3JtYXR0ZXIucHJvdG90eXBlLl9yZXN1bHQgPSBmdW5jdGlvbiBfcmVzdWx0ICgpIHsNCiAgICByZXR1cm4gdGhpcy5yb3dzLmpvaW4odGhpcy5uZXdsaW5lKTsNCiAgfTsNCg0KICBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZXIob3B0aW9ucykgew0KICAgIHJldHVybiBuZXcgRm9ybWF0dGVyKG9wdGlvbnMpOw0KICB9DQoNCiAgZnVuY3Rpb24gc3RyaW5naWZ5JDEoZGF0YSwgb3B0aW9ucykgew0KICAgIHJldHVybiBuZXcgRm9ybWF0dGVyKG9wdGlvbnMpLnN0cmluZ2lmeShkYXRhKTsNCiAgfQ0KDQogIC8vICNlbmRyZWdpb24KCiAgdmFyIGNzdiA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHsKICAgIGNyZWF0ZVBhcnNlcjogY3JlYXRlUGFyc2VyLAogICAgcGFyc2U6IHBhcnNlJDIsCiAgICBjcmVhdGVGb3JtYXR0ZXI6IGNyZWF0ZUZvcm1hdHRlciwKICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5JDEKICB9KTsKCiAgdmFyIEFQUF9JRCA9ICdFeGNlbC5BcHBsaWNhdGlvbic7DQoNCiAgZnVuY3Rpb24gZmluZCQxKGl0ZW1zLCBmbikgew0KICAgIHZhciBlbiA9IG5ldyBFbnVtZXJhdG9yKGl0ZW1zKTsNCiAgICB2YXIgaXRlbTsNCiAgICBmb3IgKHZhciBpID0gMDsgIWVuLmF0RW5kKCk7IGVuLm1vdmVOZXh0KCksIGkrKykgew0KICAgICAgaXRlbSA9IGVuLml0ZW0oKTsNCiAgICAgIGlmIChmbihpdGVtLCBpKSA9PT0gdHJ1ZSkgeyByZXR1cm4gaXRlbTsgfQ0KICAgIH0NCiAgICByZXR1cm4gbnVsbDsNCiAgfQ0KDQogIGZ1bmN0aW9uIG1hdGNoZXIkMShwYXR0ZXJuKSB7DQogICAgdmFyIGlzTWF0Y2g7DQogICAgaWYgKGlzRnVuY3Rpb24ocGF0dGVybikpIHsgaXNNYXRjaCA9IHBhdHRlcm47IH0NCiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkgeyBpc01hdGNoID0gZnVuY3Rpb24gKGl0KSB7IHJldHVybiBpdC5OYW1lLmluY2x1ZGVzKHBhdHRlcm4pOyB9OyB9DQogICAgZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHsgaXNNYXRjaCA9IGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gcGF0dGVybi50ZXN0KGl0Lk5hbWUpOyB9OyB9DQogICAgZWxzZSB7IGlzTWF0Y2ggPSBudWxsOyB9DQogICAgcmV0dXJuIGlzTWF0Y2g7DQogIH0NCg0KICB2YXIgRXhjZWwgPSBmdW5jdGlvbiBFeGNlbChwdGgpIHsKICAgIGlmICggcHRoID09PSB2b2lkIDAgKSBwdGggPSAnJzsKDQogICAgdmFyIGFwcDsNCiAgICB0cnkgew0KICAgICAgYXBwID0gR2V0T2JqZWN0KHB0aCwgQVBQX0lEKTsNCiAgICB9IGNhdGNoIChlKSB7DQogICAgICBhcHAgPSBuZXcgQWN0aXZlWE9iamVjdChBUFBfSUQpOw0KICAgIH0NCiAgICBpZiAoIWFwcC5WaXNpYmxlKSB7IGFwcC5WaXNpYmxlID0gdHJ1ZTsgfQ0KICAgIGlmIChhcHAuV29ya2Jvb2tzLkNvdW50ID09PSAwKSB7IGFwcC5Xb3JrYm9va3MuQWRkKCk7IH0NCiAgICB0aGlzLmFwcCA9IGFwcDsNCiAgfTsKCiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyBhY3RpdmVCb29rOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGFjdGl2ZVNoZWV0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGFjdGl2ZUNlbGw6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc2VsZWN0aW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGJvb2tzOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzJDIuYWN0aXZlQm9vay5nZXQgPSBmdW5jdGlvbiAoKSB7DQogICAgcmV0dXJuIHRoaXMuYXBwLkFjdGl2ZVdvcmtCb29rOw0KICB9Ow0KDQogIHByb3RvdHlwZUFjY2Vzc29ycyQyLmFjdGl2ZVNoZWV0LmdldCA9IGZ1bmN0aW9uICgpIHsNCiAgICByZXR1cm4gdGhpcy5hcHAuQWN0aXZlU2hlZXQ7DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzJDIuYWN0aXZlQ2VsbC5nZXQgPSBmdW5jdGlvbiAoKSB7DQogICAgcmV0dXJuIHRoaXMuYXBwLkFjdGl2ZUNlbGw7DQogIH07DQoNCiAgcHJvdG90eXBlQWNjZXNzb3JzJDIuc2VsZWN0aW9uLmdldCA9IGZ1bmN0aW9uICgpIHsNCiAgICByZXR1cm4gdGhpcy5hcHAuU2VsZWN0aW9uOw0KICB9Ow0KDQogIHByb3RvdHlwZUFjY2Vzc29ycyQyLmJvb2tzLmdldCA9IGZ1bmN0aW9uICgpIHsNCiAgICByZXR1cm4gdGhpcy5hcHAuV29ya0Jvb2tzOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlICgpIHsNCiAgICB0aGlzLmFwcCAmJiB0aGlzLmFwcC5RdWl0KCk7DQogICAgdGhpcy5hcHAgPSBudWxsOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5nZXRCb29rID0gZnVuY3Rpb24gZ2V0Qm9vayAobmFtZSkgew0KICAgIHJldHVybiBuYW1lID8gdGhpcy5hcHAuV29ya0Jvb2tzKG5hbWUpIDogdGhpcy5hY3RpdmVCb29rOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5nZXRTaGVldCA9IGZ1bmN0aW9uIGdldFNoZWV0IChzaGVldE5hbWUsIGJvb2tOYW1lKSB7DQogICAgcmV0dXJuIHNoZWV0TmFtZQ0KICAgICAgPyB0aGlzLmdldEJvb2soYm9va05hbWUpLlNoZWV0cyhzaGVldE5hbWUpDQogICAgICA6IHRoaXMuYWN0aXZlU2hlZXQ7DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLnJhbmdlID0gZnVuY3Rpb24gcmFuZ2UgKGFkZHIpIHsNCiAgICByZXR1cm4gYWRkciA/IHRoaXMuYXBwLlJhbmdlKGFkZHIpIDogdGhpcy5zZWxlY3Rpb247DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLmdldFJhbmdlID0gZnVuY3Rpb24gZ2V0UmFuZ2UgKHN0clJhbmdlLCBzaGVldE5hbWUsIGJvb2tOYW1lKSB7DQogICAgcmV0dXJuIHN0clJhbmdlDQogICAgICA/IHRoaXMuZ2V0U2hlZXQoc2hlZXROYW1lLCBib29rTmFtZSkuUmFuZ2Uoc3RyUmFuZ2UpDQogICAgICA6IHRoaXMuc2VsZWN0aW9uOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5jZWxsID0gZnVuY3Rpb24gY2VsbCAocm93LCBjb2wpIHsNCiAgICByZXR1cm4gcm93ICYmIGNvbCA/IHRoaXMuYXBwLkNlbGxzKHJvdywgY29sKSA6IHRoaXMuYWN0aXZlQ2VsbDsNCiAgfTsNCg0KICBFeGNlbC5wcm90b3R5cGUuZ2V0Q2VsbCA9IGZ1bmN0aW9uIGdldENlbGwgKHJvdywgY29sLCBzaGVldE5hbWUsIGJvb2tOYW1lKSB7DQogICAgcmV0dXJuIHJvdyAmJiBjb2wNCiAgICAgID8gdGhpcy5nZXRTaGVldChzaGVldE5hbWUsIGJvb2tOYW1lKS5DZWxscyhyb3csIGNvbCkNCiAgICAgIDogdGhpcy5hY3RpdmVDZWxsOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5nZXRCb29rcyA9IGZ1bmN0aW9uIGdldEJvb2tzICgpIHsNCiAgICByZXR1cm4gbWFwKHRoaXMuYm9va3MpOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5vcGVuQm9vayA9IGZ1bmN0aW9uIG9wZW5Cb29rIChwYXRoKSB7DQogICAgaWYgKCFpc2ZpbGUocGF0aCkpIHsgcmV0dXJuIG51bGw7IH0NCiAgICB2YXIgdGFyZ2V0ID0gZmluZCQxKHRoaXMuYm9va3MsIGZ1bmN0aW9uIChib29rKSB7IHJldHVybiBib29rLk5hbWUgPT0gYmFzZW5hbWUocGF0aCk7IH0pOw0KICAgIHJldHVybiB0YXJnZXQgPyB0YXJnZXQgOiB0aGlzLmJvb2tzLk9wZW4ocGF0aCk7DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLm5ld0Jvb2sgPSBmdW5jdGlvbiBuZXdCb29rICgpIHsNCiAgICByZXR1cm4gdGhpcy5ib29rcy5hZGQoKTsNCiAgfTsNCg0KICBFeGNlbC5wcm90b3R5cGUuZ2V0U2hlZXRzID0gZnVuY3Rpb24gZ2V0U2hlZXRzIChib29rKSB7DQogICAgcmV0dXJuIG1hcCh0aGlzLmdldEJvb2soYm9vaykuU2hlZXRzKTsNCiAgfTsNCg0KICBFeGNlbC5wcm90b3R5cGUuZmluZEJvb2sgPSBmdW5jdGlvbiBmaW5kQm9vayAocGF0dGVybikgew0KICAgIHZhciBpc01hdGNoID0gbWF0Y2hlciQxKHBhdHRlcm4pOw0KICAgIHJldHVybiBpc01hdGNoICYmIGZpbmQkMSh0aGlzLmJvb2tzLCBpc01hdGNoKTsNCiAgfTsNCg0KICBFeGNlbC5wcm90b3R5cGUuZmluZFNoZWV0ID0gZnVuY3Rpb24gZmluZFNoZWV0IChwYXR0ZXJuLCBfYm9vaykgew0KICAgIHZhciBib29rLCBpc01hdGNoOw0KICAgIGlmIChfYm9vaykgew0KICAgICAgYm9vayA9IHRoaXMuZmluZEJvb2soX2Jvb2spOw0KICAgICAgaWYgKCFib29rKSB7IGJvb2sgPSBfYm9vazsgfQ0KICAgIH0gZWxzZSB7DQogICAgICBib29rID0gdGhpcy5hY3RpdmVCb29rOw0KICAgIH0NCiAgICBpc01hdGNoID0gbWF0Y2hlciQxKHBhdHRlcm4pOw0KICAgIHJldHVybiBpc01hdGNoICYmIGZpbmQkMShib29rLlNoZWV0cywgaXNNYXRjaCk7DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcyAocmFuZ2UpIHsNCiAgICB2YXIgcm93Tm8sDQogICAgICB0YmwgPSBbXSwNCiAgICAgIHJvd0RhdGE7DQogICAgZWFjaChyYW5nZSwgZnVuY3Rpb24gKHIpIHsNCiAgICAgIGlmIChyb3dObyAhPSByLlJvdykgew0KICAgICAgICBpZiAocm93RGF0YSkgeyB0YmwucHVzaChyb3dEYXRhKTsgfQ0KICAgICAgICByb3dEYXRhID0gW107DQogICAgICAgIHJvd05vID0gci5Sb3c7DQogICAgICB9DQogICAgICByb3dEYXRhLnB1c2goci52YWx1ZSk7DQogICAgfSk7DQogICAgaWYgKHJvd0RhdGEpIHsgdGJsLnB1c2gocm93RGF0YSk7IH0NCiAgICByZXR1cm4gdGJsOw0KICB9Ow0KDQogIEV4Y2VsLnByb3RvdHlwZS5zZXRWYWx1ZXMgPSBmdW5jdGlvbiBzZXRWYWx1ZXMgKHJhbmdlLCB2YWxzKSB7DQogICAgaWYgKGlzQXJyYXkodmFscykpIHsNCiAgICAgIGVhY2godmFscywgZnVuY3Rpb24gKHZhbCkgew0KICAgICAgICBpZiAoaXNBcnJheSh2YWwpKSB7DQogICAgICAgICAgZWFjaCh2YWwsIGZ1bmN0aW9uIChpdCwgaSkgew0KICAgICAgICAgICAgcmFuZ2Uub2Zmc2V0KDAsIGkpLnZhbHVlID0gaXQ7DQogICAgICAgICAgfSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgcmFuZ2UudmFsdWUgPSB2YWw7DQogICAgICAgIH0NCiAgICAgICAgcmFuZ2UgPSByYW5nZS5vZmZzZXQoMSwgMCk7DQogICAgICB9KTsNCiAgICB9DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLm5vX3VwZGF0ZSA9IGZ1bmN0aW9uIG5vX3VwZGF0ZSAoY2IpIHsNCiAgICB0cnkgew0KICAgICAgdGhpcy5hcHAuU2NyZWVuVXBkYXRpbmcgPSBmYWxzZTsNCiAgICAgIGNiKCk7DQogICAgfSBmaW5hbGx5IHsNCiAgICAgIHRoaXMuYXBwLlNjcmVlblVwZGF0aW5nID0gdHJ1ZTsNCiAgICB9DQogIH07DQoNCiAgRXhjZWwucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoY2IpIHsNCiAgICB0cnkgew0KICAgICAgdGhpcy5hcHAuU2NyZWVuVXBkYXRpbmcgPSB0cnVlOw0KICAgICAgY2IoKTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgdGhpcy5hcHAuU2NyZWVuVXBkYXRpbmcgPSBmYWxzZTsNCiAgICB9DQogIH07CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFeGNlbC5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQyICk7Cg0KICBFeGNlbC54bGRvd24gPSAtNDEyMTsNCiAgRXhjZWwueGxUb0xlZnQgPSAtNDE1OTsNCiAgRXhjZWwueGxUb1JpZ2h0ID0gLTQxNjE7DQogIEV4Y2VsLnhsdXAgPSAtNDE2MjsKCiAgdmFyIGV4Y2VsID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoewogICAgJ2RlZmF1bHQnOiBFeGNlbAogIH0pOwoKICBmdW5jdGlvbiBnZXRXaW5kb3dzKCkgew0KICAgIHZhciB3aW5zID0gW107DQogICAgZWFjaChuZXcgRW51bWVyYXRvcihfX1NoZWxsQXBwLldpbmRvd3MoKSksIGZ1bmN0aW9uIChhcHApIHsNCiAgICAgIGlmIChhcHAgJiYgYXBwLk5hbWUgPT09ICdJbnRlcm5ldCBFeHBsb3JlcicpIHsNCiAgICAgICAgd2lucy5wdXNoKGFwcCk7DQogICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIHdpbnM7DQogIH0NCg0KICBmdW5jdGlvbiBnZXRBY3RpdmUoKSB7DQogICAgdmFyIGllOw0KICAgIGVhY2gobmV3IEVudW1lcmF0b3IoX19TaGVsbEFwcC5XaW5kb3dzKCkpLCBmdW5jdGlvbiAoYXBwKSB7DQogICAgICBpZiAoYXBwICYmIGFwcC5OYW1lID09PSAnSW50ZXJuZXQgRXhwbG9yZXInICYmICFhcHAuRG9jdW1lbnQuaGlkZGVuKSB7DQogICAgICAgIGllID0gYXBwOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIGllOw0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0SUUoKSB7DQogICAgdmFyIGllOw0KICAgIGVhY2gobmV3IEVudW1lcmF0b3IoX19TaGVsbEFwcC5XaW5kb3dzKCkpLCBmdW5jdGlvbiAoYXBwKSB7DQogICAgICBpZiAoYXBwICYmIGFwcC5OYW1lID09PSAnSW50ZXJuZXQgRXhwbG9yZXInKSB7DQogICAgICAgIGllID0gYXBwOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIGllOw0KICB9DQoNCiAgZnVuY3Rpb24gd2FpdChpZSwgdGltZW91dCkgew0KICAgIHZhciBlbGFwc2VkID0gMDsNCiAgICB0aW1lb3V0IHx8ICh0aW1lb3V0ID0gNTAwMCk7DQogICAgd2hpbGUgKGllLkJ1c3kgfHwgaWUuUmVhZHlTdGF0ZSAhPT0gNCkgew0KICAgICAgaWYgKGVsYXBzZWQgPj0gdGltZW91dCkgew0KICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lFIHRpbWVvdXQnKTsNCiAgICAgIH0NCiAgICAgIGVsYXBzZWQgKz0gMTAwOw0KICAgICAgcHJvY2Vzcy5zbGVlcCgxMDApOw0KICAgIH0NCiAgfQ0KDQogIHZhciBJRV9PUFRJT05TID0gWw0KICAgICdBZGRyZXNzQmFyJywNCiAgICAnRnVsbFNjcmVlbicsDQogICAgJ1dpZHRoJywNCiAgICAnSGVpZ2h0JywNCiAgICAnVG9wJywNCiAgICAnTGVmdCcsDQogICAgJ01lbnVCYXInLA0KICAgICdSZXNpemFibGUnLA0KICAgICdTaWxlbnQnLA0KICAgICdTdGF0dXNCYXInLA0KICAgICdUb29sQmFyJywNCiAgICAnVmlzaWJsZScNCiAgXS5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGl0KSB7DQogICAgbWVtb1tpdF0gPSBpdDsNCiAgICBtZW1vW2l0LnRvTG93ZXJDYXNlKCldID0gaXQ7DQogICAgcmV0dXJuIG1lbW87DQogIH0sIHt9KTsNCg0KICBmdW5jdGlvbiBvcGVuKHVybCwgb3B0aW9ucykgew0KICAgIHZhciBpZSA9IG5ldyBBY3RpdmVYT2JqZWN0KCdJbnRlcm5ldEV4cGxvcmVyLkFwcGxpY2F0aW9uJyk7DQogICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTsNCiAgICBlYWNoKG9wdGlvbnMsIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICB2YXIgcHJvcCA9IElFX09QVElPTlNba107DQogICAgICBpZiAocHJvcCkgeyBpZVtwcm9wXSA9IHY7IH0NCiAgICB9KTsNCiAgICBpZiAoIWhhcyhvcHRpb25zLCAndmlzaWJsZScpICYmICFoYXMob3B0aW9ucywgJ1Zpc2libGUnKSkgew0KICAgICAgaWUuVmlzaWJsZSA9IHRydWU7DQogICAgfQ0KICAgIGllLk5hdmlnYXRlKHVybCB8fCAnYWJvdXQ6YmxhbmsnKTsNCiAgICB3YWl0KGllLCBvcHRpb25zLnRpbWVvdXQpOw0KICAgIHJldHVybiBpZTsNCiAgfQoKICB2YXIgaWUgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBnZXRXaW5kb3dzOiBnZXRXaW5kb3dzLAogICAgZ2V0QWN0aXZlOiBnZXRBY3RpdmUsCiAgICBnZXRJRTogZ2V0SUUsCiAgICB3YWl0OiB3YWl0LAogICAgb3Blbjogb3BlbgogIH0pOwoKICB2YXIgQVBQX0lEJDEgPSAnT3V0bG9vay5BcHBsaWNhdGlvbic7DQogIHZhciBvbE1haWxJdGVtID0gMDsNCg0KICB2YXIgT3V0bG9vayA9IGZ1bmN0aW9uIE91dGxvb2soKSB7DQogICAgdmFyIGFwcDsNCiAgICB0cnkgew0KICAgICAgYXBwID0gR2V0T2JqZWN0KCcnLCBBUFBfSUQkMSk7DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgYXBwID0gbmV3IEFjdGl2ZVhPYmplY3QoQVBQX0lEJDEpOw0KICAgIH0NCiAgICB0aGlzLmFwcCA9IGFwcDsNCiAgfTsNCg0KICBPdXRsb29rLnByb3RvdHlwZS5jcmVhdGVNYWlsID0gZnVuY3Rpb24gY3JlYXRlTWFpbCAob3B0aW9ucykgew0KICAgIHZhciBpdGVtID0gdGhpcy5hcHAuQ3JlYXRlSXRlbShvbE1haWxJdGVtKTsNCiAgICBpZiAob3B0aW9ucykgew0KICAgICAgZWFjaChvcHRpb25zLCBmdW5jdGlvbiAodmFsdWUsIGtleSkgew0KICAgICAgICBpdGVtW2tleV0gPSB2YWx1ZTsNCiAgICAgIH0pOw0KICAgIH0NCiAgICBpdGVtLkRpc3BsYXkoKTsNCiAgICByZXR1cm4gaXRlbTsNCiAgfTsKCiAgdmFyIG91dGxvb2sgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICAnZGVmYXVsdCc6IE91dGxvb2sKICB9KTsKCiAgLyogQ3Vyc29yTG9jYXRpb25FbnVtICovDQogIHZhciBhZFVzZUNsaWVudCA9IDM7DQogIHZhciBhZFVzZU5vbmUgPSAxOw0KICB2YXIgYWRVc2VTZXJ2ZXIgPSAyOw0KICAvKiBMb2NrVHlwZUVudW0gKi8NCiAgdmFyIGFkTG9ja1Vuc3BlY2lmaWVkID0gLTE7DQogIHZhciBhZExvY2tSZWFkT25seSA9IDE7DQogIHZhciBhZExvY2tQZXNzaW1pc3RpYyA9IDI7DQogIHZhciBhZExvY2tPcHRpbWlzdGljID0gMzsNCiAgdmFyIGFkTG9ja0JhdGNoT3B0aW1pc3RpYyA9IDQ7DQogIC8qIEN1cnNvclR5cGVFbnVtICovDQogIHZhciBhZE9wZW5VbnNwZWNpZmllZCA9IC0xOw0KICB2YXIgYWRPcGVuRm9yd2FyZE9ubHkgPSAwOw0KICB2YXIgYWRPcGVuS2V5c2V0ID0gMTsNCiAgdmFyIGFkT3BlbkR5bmFtaWMgPSAyOw0KICB2YXIgYWRPcGVuU3RhdGljID0gMzsNCiAgLyogRGF0YVR5cGVFbnVtICovDQogIHZhciBhZEJpZ0ludCA9IDIwOw0KICB2YXIgYWRCaW5hcnkgPSAxMjg7DQogIHZhciBhZEJvb2xlYW4gPSAxMTsNCiAgdmFyIGFkQ2hhciA9IDEyOTsNCiAgdmFyIGFkQ3VycmVuY3kgPSA2Ow0KICB2YXIgYWREYXRlID0gNzsNCiAgdmFyIGFkREJEYXRlID0gMTMzOw0KICB2YXIgYWREQlRpbWUgPSAxMzQ7DQogIHZhciBhZERCVGltZVN0YW1wID0gMTM1Ow0KICB2YXIgYWREZWNpbWFsID0gMTQ7DQogIHZhciBhZERvdWJsZSA9IDU7DQogIHZhciBhZEdVSUQgPSA3MjsNCiAgdmFyIGFkSURpc3BhdGNoID0gOTsNCiAgdmFyIGFkSW50ZWdlciA9IDM7DQogIHZhciBhZExvbmdWYXJCaW5hcnkgPSAyMDU7DQogIHZhciBhZExvbmdWYXJDaGFyID0gMjAxOw0KICB2YXIgYWRMb25nVmFyV0NoYXIgPSAyMDM7DQogIHZhciBhZE51bWVyaWMgPSAxMzE7DQogIHZhciBhZFNpbmdsZSA9IDQ7DQogIHZhciBhZFNtYWxsSW50ID0gMjsNCiAgdmFyIGFkVW5zaWduZWRUaW55SW50ID0gMTc7DQogIHZhciBhZFZhckJpbmFyeSA9IDIwNDsNCiAgdmFyIGFkVmFyQ2hhciA9IDIwMDsNCiAgdmFyIGFkVmFyaWFudCA9IDEyOw0KICB2YXIgYWRWYXJXQ2hhciA9IDIwMjsNCiAgdmFyIGFkV0NoYXIgPSAxMzA7DQogIC8qIFBhcmFtZXRlckRpcmVjdGlvbkVudW0gKi8NCiAgdmFyIGFkUGFyYW1Vbmtub3duID0gMDsNCiAgdmFyIGFkUGFyYW1JbnB1dCA9IDE7DQogIHZhciBhZFBhcmFtT3V0cHV0ID0gMjsNCiAgdmFyIGFkUGFyYW1JbnB1dE91dHB1dCA9IDM7DQogIHZhciBhZFBhcmFtUmV0dXJuVmFsdWUgPSA0Ow0KICAvKiBTY2hlbWFFbnVtICovDQogIHZhciBhZFNjaGVtYVRhYmxlcyA9IDIwOw0KICB2YXIgYWRTY2hlbWFDb2x1bW5zID0gNDsNCg0KICB2YXIgQWRvZGIgPSBmdW5jdGlvbiBBZG9kYigpIHsNCiAgICB0aGlzLmNvbm4gPSBuZXcgQWN0aXZlWE9iamVjdCgnQURPREIuQ29ubmVjdGlvbicpOw0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIGNsb3NlICgpIHsNCiAgICB0aGlzLmNvbm4gJiYgdGhpcy5jb25uLlN0YXRlICE9IDAgJiYgdGhpcy5jb25uLkNsb3NlKCk7DQogICAgdGhpcy5jb25uID0gbnVsbDsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuYmVnaW4gPSBmdW5jdGlvbiBiZWdpbiAoKSB7DQogICAgdGhpcy5jb25uLkJlZ2luVHJhbnMoKTsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gY29tbWl0ICgpIHsNCiAgICB0aGlzLmNvbm4uQ29tbWl0VHJhbnMoKTsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUucm9sbGJhY2sgPSBmdW5jdGlvbiByb2xsYmFjayAoKSB7DQogICAgdGhpcy5jb25uLlJvbGxiYWNrVHJhbnMoKTsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldE9wdGlvbnMgKGFyZ3MpIHsNCiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0uX2lzX29wdGlvbnMpIHsgcmV0dXJuIGFyZ3NbMF07IH0NCiAgICB2YXIgaSA9IC0xLA0KICAgICAgbGVuID0gYXJncy5sZW5ndGgsDQogICAgICBhcmcsDQogICAgICBvcCA9IHsgX2lzX29wdGlvbnM6IHRydWUgfTsNCiAgICB3aGlsZSAoKytpIDwgbGVuKSB7DQogICAgICBhcmcgPSBhcmdzW2ldOw0KICAgICAgc3dpdGNoICh0eXBlT2YoYXJnKSkgew0KICAgICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgICAgIG9wLnNxbCA9IGFyZzsNCiAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAnYXJyYXknOg0KICAgICAgICBjYXNlICdvYmplY3QnOg0KICAgICAgICAgIG9wLnBhcmFtcyA9IGFyZzsNCiAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAnYm9vbGVhbic6DQogICAgICAgICAgb3AucHJlcGFyZWQgPSBhcmc7DQogICAgICAgICAgYnJlYWs7DQogICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzoNCiAgICAgICAgICBvcC5jYWxsYmFjayA9IGFyZzsNCiAgICAgICAgICBicmVhazsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG9wOw0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5nZXREYXRhVHlwZU1hcHBpbmcgPSBmdW5jdGlvbiBnZXREYXRhVHlwZU1hcHBpbmcgKCkgew0KICAgIHJldHVybiB7DQogICAgICBzdHJpbmc6IGFkVmFyV0NoYXIsDQogICAgICBpbnQ6IGFkU21hbGxJbnQsDQogICAgICBkZWNpbWFsOiBhZERvdWJsZSwNCiAgICAgIGJvb2xlYW46IGFkQm9vbGVhbiwNCiAgICAgIGRhdGU6IGFkRGF0ZSwNCiAgICAgIGJ1ZmZlcjogYWRCaW5hcnksDQogICAgICBudWxsOiBhZFZhcldDaGFyLA0KICAgICAgdW5kZWZpbmVkOiBhZFZhcldDaGFyDQogICAgfTsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuY3JlYXRlUGFyYW1zID0gZnVuY3Rpb24gY3JlYXRlUGFyYW1zIChvcHRzKSB7DQogICAgdmFyIGNtZG9iaiA9IG9wdHMuY21kLA0KICAgICAgcGFyYW1zID0gb3B0cy5wYXJhbXM7DQogICAgaWYgKCFjbWRvYmogfHwgIXBhcmFtcykgeyByZXR1cm47IH0NCiAgICB2YXIganNUeXBlLA0KICAgICAgdHAsDQogICAgICBzaXplID0gMTAsDQogICAgICBkdG1hcCA9IHRoaXMuZ2V0RGF0YVR5cGVNYXBwaW5nKCk7DQogICAgZWFjaChwYXJhbXMsIGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkgew0KICAgICAganNUeXBlID0gdHlwZU9mKHZhbHVlKTsNCiAgICAgIGlmIChqc1R5cGUgPT0gJ3N0cmluZycpIHsNCiAgICAgICAgdHAgPSBkdG1hcFsnc3RyaW5nJ107DQogICAgICAgIHNpemUgPSB0cCA9PT0gYWRWYXJpYW50ID8gdmFsdWUubGVuZ3RoICogMiA6IHZhbHVlLmxlbmd0aDsNCiAgICAgIH0gZWxzZSBpZiAoanNUeXBlID09ICdudW1iZXInKSB7DQogICAgICAgIHRwID0gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgPyBkdG1hcFsnaW50J10gOiBkdG1hcFsnZGVjaW1hbCddOw0KICAgICAgfSBlbHNlIGlmIChoYXMoZHRtYXAsIGpzVHlwZSkpIHsNCiAgICAgICAgdHAgPSBkdG1hcFtqc1R5cGVdOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBZG9kYi5jcmVhdGVQYXJhbXM6IHVuZXhwZWN0ZWQgdHlwZSAnICsganNUeXBlKTsNCiAgICAgIH0NCiAgICAgIHZhciBwYXJhbW9iaiA9IGNtZG9iai5DcmVhdGVQYXJhbWV0ZXIoDQogICAgICAgIG5hbWUsDQogICAgICAgIHRwLA0KICAgICAgICBhZFBhcmFtSW5wdXQsDQogICAgICAgIHNpemUsDQogICAgICAgIHZhbHVlDQogICAgICApOw0KICAgICAgY21kb2JqLlBhcmFtZXRlcnMuQXBwZW5kKHBhcmFtb2JqKTsNCiAgICB9KTsNCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUgKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICB2YXIgb3AgPSB0aGlzLmdldE9wdGlvbnMoYXJncyk7DQogICAgdHJ5IHsNCiAgICAgIHZhciBjbWQgPSBuZXcgQWN0aXZlWE9iamVjdCgnQURPREIuQ29tbWFuZCcpOw0KICAgICAgY21kLkFjdGl2ZUNvbm5lY3Rpb24gPSB0aGlzLmNvbm47DQogICAgICBjbWQuQ29tbWFuZFR5cGUgPSAxOyAvKnRleHQqLw0KICAgICAgY21kLlByZXBhcmVkID0gb3AucHJlcGFyZWQgfHwgZmFsc2U7DQogICAgICBjbWQuQ29tbWFuZFRleHQgPSBvcC5zcWw7DQogICAgICBvcC5jbWQgPSBjbWQ7DQogICAgICB0aGlzLmNyZWF0ZVBhcmFtcyhvcCk7DQogICAgICByZXR1cm4gY21kLkV4ZWN1dGUoKTsNCiAgICB9IGNhdGNoIChlKSB7DQogICAgICBlLnNxbCA9IG9wLnNxbDsNCiAgICAgIHRocm93IGU7DQogICAgfQ0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiBzZWxlY3QgKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4kMSA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgIHdoaWxlICggbGVuJDEtLSApIGFyZ3NbIGxlbiQxIF0gPSBhcmd1bWVudHNbIGxlbiQxIF07Cg0KICAgIHZhciBycywNCiAgICAgIHJvdywNCiAgICAgIGksDQogICAgICBsZW4sDQogICAgICBvcCA9IHRoaXMuZ2V0T3B0aW9ucyhhcmdzKTsNCiAgICB0cnkgew0KICAgICAgcnMgPSB0aGlzLmV4ZWN1dGUob3ApOw0KICAgICAgd2hpbGUgKCFycy5FT0YpIHsNCiAgICAgICAgcm93ID0ge307DQogICAgICAgIGlmIChsZW4gPT0gbnVsbCkgeyBsZW4gPSBycy5GaWVsZHMuQ291bnQ7IH0NCiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7DQogICAgICAgICAgcm93W3JzLkZpZWxkcyhpKS5OYW1lXSA9IHRoaXMuZ2V0RmllbGRWYWx1ZShycy5GaWVsZHMoaSkpOw0KICAgICAgICB9DQogICAgICAgIGlmIChvcC5jYWxsYmFjayhyb3cpID09PSBmYWxzZSkgeyBicmVhazsgfQ0KICAgICAgICBycy5Nb3ZlTmV4dCgpOw0KICAgICAgfQ0KICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgIGUuc3FsID0gb3Auc3FsOw0KICAgICAgdGhyb3cgZTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgcnMgJiYgcnMuU3RhdGUgIT0gMCAmJiBycy5DbG9zZSgpOw0KICAgIH0NCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuZ2V0RmllbGRWYWx1ZSA9IGZ1bmN0aW9uIGdldEZpZWxkVmFsdWUgKGZpZWxkKSB7DQogICAgc3dpdGNoIChmaWVsZC5UeXBlKSB7DQogICAgICBjYXNlIGFkQmluYXJ5Og0KICAgICAgY2FzZSBhZFZhckJpbmFyeToNCiAgICAgICAgcmV0dXJuICdbTE9CXSc7DQogICAgICBjYXNlIGFkRGF0ZToNCiAgICAgIGNhc2UgYWREQkRhdGU6DQogICAgICBjYXNlIGFkREJUaW1lOg0KICAgICAgY2FzZSBhZERCVGltZVN0YW1wOg0KICAgICAgICByZXR1cm4gbmV3IERhdGUoZmllbGQudmFsdWUpOw0KICAgICAgZGVmYXVsdDoNCiAgICAgICAgcmV0dXJuIGZpZWxkLnZhbHVlOw0KICAgIH0NCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuZWFjaFJvdyA9IGZ1bmN0aW9uIGVhY2hSb3cgKCkgewogICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdOwoNCiAgICB2YXIgb3AgPSB0aGlzLmdldE9wdGlvbnMoYXJncyk7DQogICAgdGhpcy5zZWxlY3Qob3ApOw0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5maXJzdFJvdyA9IGZ1bmN0aW9uIGZpcnN0Um93ICgpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgdmFyIG9wID0gdGhpcy5nZXRPcHRpb25zKGFyZ3MpLA0KICAgICAgX3JvdzsNCiAgICBvcC5jYWxsYmFjayA9IGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuICgoX3JvdyA9IHJvdyksIGZhbHNlKTsgfTsNCiAgICB0aGlzLnNlbGVjdChvcCk7DQogICAgcmV0dXJuIF9yb3c7DQogIH07DQoNCiAgQWRvZGIucHJvdG90eXBlLnJvd3MgPSBmdW5jdGlvbiByb3dzICgpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgdmFyIG9wID0gdGhpcy5nZXRPcHRpb25zKGFyZ3MpLA0KICAgICAgcm93cyA9IFtdOw0KICAgIG9wLmNhbGxiYWNrID0gZnVuY3Rpb24gKHJvdykgew0KICAgICAgcm93cy5wdXNoKHJvdyk7DQogICAgfTsNCiAgICB0aGlzLnNlbGVjdChvcCk7DQogICAgcmV0dXJuIHJvd3M7DQogIH07DQoNCiAgQWRvZGIucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gYmF0Y2ggKGNtZCwgZm4pIHsNCiAgICB2YXIgY29ubiwgcnM7DQogICAgdHJ5IHsNCiAgICAgIGNvbm4gPSB0aGlzLmNvbm47DQogICAgICBycyA9IG5ldyBBY3RpdmVYT2JqZWN0KCdBRE9EQi5SZWNvcmRzZXQnKTsNCiAgICAgIHJzLkN1cnNvckxvY2F0aW9uID0gYWRVc2VDbGllbnQ7DQogICAgICBycy5Mb2NrVHlwZSA9IGFkTG9ja0JhdGNoT3B0aW1pc3RpYzsNCiAgICAgIHJzLkN1cnNvclR5cGUgPSBhZE9wZW5EeW5hbWljOw0KICAgICAgcnMuT3BlbihjbWQsIGNvbm4pOw0KICAgICAgZm4ocnMpOw0KICAgIH0gZmluYWxseSB7DQogICAgICBycyAmJiBycy5TdGF0ZSAhPSAwICYmIHJzLkNsb3NlKCk7DQogICAgfQ0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5zZXRGaWVsZFZhbHVlID0gZnVuY3Rpb24gc2V0RmllbGRWYWx1ZSAoZmllbGQsIHZhbHVlKSB7DQogICAgc3dpdGNoICh0eXBlT2YodmFsdWUpKSB7DQogICAgICBjYXNlICdkYXRlJzoNCiAgICAgICAgZmllbGQuVmFsdWUgPSBmb3JtYXREYXRlKHZhbHVlKTsNCiAgICAgICAgYnJlYWs7DQogICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgY2FzZSAnbnVtYmVyJzoNCiAgICAgICAgZmllbGQuVmFsdWUgPSB2YWx1ZTsNCiAgICAgICAgYnJlYWs7DQogICAgICBkZWZhdWx0Og0KICAgICAgICBmaWVsZC5WYWx1ZSA9IFN0cmluZyh2YWx1ZSk7DQogICAgICAgIGJyZWFrOw0KICAgIH0NCiAgfTsNCg0KICBBZG9kYi5wcm90b3R5cGUuYmF0Y2hfaW5zZXJ0ID0gZnVuY3Rpb24gYmF0Y2hfaW5zZXJ0IChjbWQsIHJvd3MpIHsNCiAgICB2YXIgc2VsZiA9IHRoaXM7DQogICAgdGhpcy5iYXRjaChjbWQsIGZ1bmN0aW9uIChycykgew0KICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAocm93KSB7DQogICAgICAgIHJzLkFkZE5ldygpOw0KICAgICAgICBlYWNoKHJvdywgZnVuY3Rpb24gKHYsIGspIHsNCiAgICAgICAgICBzZWxmLnNldEZpZWxkVmFsdWUocnMuRmllbGRzKGspLCB2KTsNCiAgICAgICAgfSk7DQogICAgICB9KTsNCiAgICAgIHJzLlVwZGF0ZUJhdGNoKCk7DQogICAgfSk7DQogIH07DQoNCiAgQWRvZGIucHJvdG90eXBlLnRhYmxlRXhpc3RzID0gZnVuY3Rpb24gdGFibGVFeGlzdHMgKHRhYmxlTmFtZSkgew0KICAgIHZhciBjb25uLA0KICAgICAgcnMsDQogICAgICByZXN1bHQgPSBmYWxzZSwNCiAgICAgIHBhcmFtcyA9IFtudWxsLCBudWxsLCB0YWJsZU5hbWUsICdUQUJMRSddOw0KICAgIHRyeSB7DQogICAgICBjb25uID0gdGhpcy5jb25uOw0KICAgICAgcnMgPSBjb25uLk9wZW5TY2hlbWEoYWRTY2hlbWFUYWJsZXMsIHBhcmFtcyk7DQogICAgICBpZiAoIXJzLkVPRikgeyByZXN1bHQgPSB0cnVlOyB9DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgdGhyb3cgZTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgcnMgJiYgcnMuU3RhdGUgIT0gMCAmJiBycy5DbG9zZSgpOw0KICAgIH0NCiAgICByZXR1cm4gcmVzdWx0Ow0KICB9Ow0KDQogIEFkb2RiLnByb3RvdHlwZS5nZXRUYWJsZXMgPSBmdW5jdGlvbiBnZXRUYWJsZXMgKCkgew0KICAgIHZhciBjb25uLA0KICAgICAgcnMsDQogICAgICByZXN1bHQgPSBbXSwNCiAgICAgIGNvdW50ID0gMDsNCiAgICB0cnkgew0KICAgICAgY29ubiA9IHRoaXMuY29ubjsNCiAgICAgIHJzID0gY29ubi5PcGVuU2NoZW1hKGFkU2NoZW1hVGFibGVzKTsNCiAgICAgIHdoaWxlICghcnMuRU9GKSB7DQogICAgICAgIGlmIChycy5GaWVsZHMoJ1RBQkxFX1RZUEUnKS5WYWx1ZSA9PT0gJ1RBQkxFJykgew0KICAgICAgICAgIHJlc3VsdFtjb3VudCsrXSA9IHJzLkZpZWxkcygnVEFCTEVfTkFNRScpLlZhbHVlOw0KICAgICAgICB9DQogICAgICAgIHJzLk1vdmVOZXh0KCk7DQogICAgICB9DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgdGhyb3cgZTsNCiAgICB9IGZpbmFsbHkgew0KICAgICAgcnMgJiYgcnMuU3RhdGUgIT0gMCAmJiBycy5DbG9zZSgpOw0KICAgIH0NCiAgICByZXR1cm4gcmVzdWx0Ow0KICB9Ow0KDQogIGZ1bmN0aW9uIGZvcm1hdERhdGUoZCkgew0KICAgIHJldHVybiAoDQogICAgICBkLmdldEZ1bGxZZWFyKCkgKw0KICAgICAgJy8nICsNCiAgICAgIChkLmdldE1vbnRoKCkgKyAxKSArDQogICAgICAnLycgKw0KICAgICAgZC5nZXREYXRlKCkgKw0KICAgICAgJyAnICsNCiAgICAgIGQuZ2V0SG91cnMoKSArDQogICAgICAnOicgKw0KICAgICAgZC5nZXRNaW51dGVzKCkgKw0KICAgICAgJzonICsNCiAgICAgIGQuZ2V0U2Vjb25kcygpDQogICAgKTsNCiAgfQoKICB2YXIgYWRvZGIgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBhZFVzZUNsaWVudDogYWRVc2VDbGllbnQsCiAgICBhZFVzZU5vbmU6IGFkVXNlTm9uZSwKICAgIGFkVXNlU2VydmVyOiBhZFVzZVNlcnZlciwKICAgIGFkTG9ja1Vuc3BlY2lmaWVkOiBhZExvY2tVbnNwZWNpZmllZCwKICAgIGFkTG9ja1JlYWRPbmx5OiBhZExvY2tSZWFkT25seSwKICAgIGFkTG9ja1Blc3NpbWlzdGljOiBhZExvY2tQZXNzaW1pc3RpYywKICAgIGFkTG9ja09wdGltaXN0aWM6IGFkTG9ja09wdGltaXN0aWMsCiAgICBhZExvY2tCYXRjaE9wdGltaXN0aWM6IGFkTG9ja0JhdGNoT3B0aW1pc3RpYywKICAgIGFkT3BlblVuc3BlY2lmaWVkOiBhZE9wZW5VbnNwZWNpZmllZCwKICAgIGFkT3BlbkZvcndhcmRPbmx5OiBhZE9wZW5Gb3J3YXJkT25seSwKICAgIGFkT3BlbktleXNldDogYWRPcGVuS2V5c2V0LAogICAgYWRPcGVuRHluYW1pYzogYWRPcGVuRHluYW1pYywKICAgIGFkT3BlblN0YXRpYzogYWRPcGVuU3RhdGljLAogICAgYWRCaWdJbnQ6IGFkQmlnSW50LAogICAgYWRCaW5hcnk6IGFkQmluYXJ5LAogICAgYWRCb29sZWFuOiBhZEJvb2xlYW4sCiAgICBhZENoYXI6IGFkQ2hhciwKICAgIGFkQ3VycmVuY3k6IGFkQ3VycmVuY3ksCiAgICBhZERhdGU6IGFkRGF0ZSwKICAgIGFkREJEYXRlOiBhZERCRGF0ZSwKICAgIGFkREJUaW1lOiBhZERCVGltZSwKICAgIGFkREJUaW1lU3RhbXA6IGFkREJUaW1lU3RhbXAsCiAgICBhZERlY2ltYWw6IGFkRGVjaW1hbCwKICAgIGFkRG91YmxlOiBhZERvdWJsZSwKICAgIGFkR1VJRDogYWRHVUlELAogICAgYWRJRGlzcGF0Y2g6IGFkSURpc3BhdGNoLAogICAgYWRJbnRlZ2VyOiBhZEludGVnZXIsCiAgICBhZExvbmdWYXJCaW5hcnk6IGFkTG9uZ1ZhckJpbmFyeSwKICAgIGFkTG9uZ1ZhckNoYXI6IGFkTG9uZ1ZhckNoYXIsCiAgICBhZExvbmdWYXJXQ2hhcjogYWRMb25nVmFyV0NoYXIsCiAgICBhZE51bWVyaWM6IGFkTnVtZXJpYywKICAgIGFkU2luZ2xlOiBhZFNpbmdsZSwKICAgIGFkU21hbGxJbnQ6IGFkU21hbGxJbnQsCiAgICBhZFVuc2lnbmVkVGlueUludDogYWRVbnNpZ25lZFRpbnlJbnQsCiAgICBhZFZhckJpbmFyeTogYWRWYXJCaW5hcnksCiAgICBhZFZhckNoYXI6IGFkVmFyQ2hhciwKICAgIGFkVmFyaWFudDogYWRWYXJpYW50LAogICAgYWRWYXJXQ2hhcjogYWRWYXJXQ2hhciwKICAgIGFkV0NoYXI6IGFkV0NoYXIsCiAgICBhZFBhcmFtVW5rbm93bjogYWRQYXJhbVVua25vd24sCiAgICBhZFBhcmFtSW5wdXQ6IGFkUGFyYW1JbnB1dCwKICAgIGFkUGFyYW1PdXRwdXQ6IGFkUGFyYW1PdXRwdXQsCiAgICBhZFBhcmFtSW5wdXRPdXRwdXQ6IGFkUGFyYW1JbnB1dE91dHB1dCwKICAgIGFkUGFyYW1SZXR1cm5WYWx1ZTogYWRQYXJhbVJldHVyblZhbHVlLAogICAgYWRTY2hlbWFUYWJsZXM6IGFkU2NoZW1hVGFibGVzLAogICAgYWRTY2hlbWFDb2x1bW5zOiBhZFNjaGVtYUNvbHVtbnMsCiAgICBBZG9kYjogQWRvZGIKICB9KTsKCiAgdmFyIEFjY0RCID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQWRvZGIpIHsKICAgIGZ1bmN0aW9uIEFjY0RCKHBhdGgpIHsNCiAgICAgIGlmICghaXNBYnNvbHV0ZShwYXRoKSkgew0KICAgICAgICBwYXRoID0gbm9ybWFsaXplJDEocGF0aCk7DQogICAgICB9DQogICAgICBpZiAoIWlzZmlsZShwYXRoKSkgew0KICAgICAgICB2YXIgYXBwID0gbmV3IEFjdGl2ZVhPYmplY3QoJ0FjY2Vzcy5BcHBsaWNhdGlvbicpOw0KICAgICAgICBhcHAuTmV3Q3VycmVudERhdGFiYXNlKHBhdGgpOw0KICAgICAgfQ0KICAgICAgQWRvZGIuY2FsbCh0aGlzKTsNCiAgICAgIHRoaXMuY29ubi5Db25uZWN0aW9uU3RyaW5nID0gIlByb3ZpZGVyPU1pY3Jvc29mdC5BY2UuT0xFREIuMTIuMDtEYXRhIFNvdXJjZT0iICsgcGF0aDsNCiAgICAgIHRoaXMuY29ubi5PcGVuKCk7DQogICAgfQoKICAgIGlmICggQWRvZGIgKSBBY2NEQi5fX3Byb3RvX18gPSBBZG9kYjsKICAgIEFjY0RCLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFkb2RiICYmIEFkb2RiLnByb3RvdHlwZSApOwogICAgQWNjREIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQWNjREI7CgogICAgcmV0dXJuIEFjY0RCOwogIH0oQWRvZGIpKTsNCg0KICBmdW5jdGlvbiBhY2NkYihwdGgpIHsNCiAgICByZXR1cm4gbmV3IEFjY0RCKHB0aCk7DQogIH0KCiAgdmFyIGFjY2RiJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBBY2NEQjogQWNjREIsCiAgICAnZGVmYXVsdCc6IGFjY2RiCiAgfSk7CgogIHZhciBDc3ZEQiA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEFkb2RiKSB7CiAgICBmdW5jdGlvbiBDc3ZEQihwYXRoLCBoYXNIZWFkZXIpIHsNCiAgICAgIGlmICghaXNBYnNvbHV0ZShwYXRoKSkgew0KICAgICAgICBwYXRoID0gbm9ybWFsaXplJDEocGF0aCk7DQogICAgICB9DQogICAgICBpZiAoaXNmaWxlKHBhdGgpKSB7IHBhdGggPSBkaXJuYW1lKHBhdGgpOyB9DQogICAgICB2YXIgaGRyID0NCiAgICAgICAgaGFzSGVhZGVyID09IG51bGwgfHwgaGFzSGVhZGVyID09IHRydWUgfHwgaGFzSGVhZGVyID09ICdZRVMnDQogICAgICAgICAgPyAnWUVTJw0KICAgICAgICAgIDogJ05PJzsNCiAgICAgIEFkb2RiLmNhbGwodGhpcyk7DQogICAgICB0aGlzLmNvbm4uQ29ubmVjdGlvblN0cmluZyA9ICJQcm92aWRlcj1NaWNyb3NvZnQuQWNlLk9MRURCLjEyLjA7RGF0YSBTb3VyY2U9IiArIHBhdGggKyAiO0V4dGVuZGVkIFByb3BlcnRpZXM9XCJUZXh0O0hEUj0iICsgaGRyICsgIjtGTVQ9RGVsaW1pdGVkXCIiOw0KICAgICAgdGhpcy5jb25uLk9wZW4oKTsNCiAgICB9CgogICAgaWYgKCBBZG9kYiApIENzdkRCLl9fcHJvdG9fXyA9IEFkb2RiOwogICAgQ3N2REIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQWRvZGIgJiYgQWRvZGIucHJvdG90eXBlICk7CiAgICBDc3ZEQi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDc3ZEQjsKCiAgICByZXR1cm4gQ3N2REI7CiAgfShBZG9kYikpOw0KDQogIGZ1bmN0aW9uIGNzdmRiKHBhdGgsIGhhc0hlYWRlcikgew0KICAgIHJldHVybiBuZXcgQ3N2REIocGF0aCwgaGFzSGVhZGVyKTsNCiAgfQoKICB2YXIgY3N2ZGIkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHsKICAgIENzdkRCOiBDc3ZEQiwKICAgICdkZWZhdWx0JzogY3N2ZGIKICB9KTsKCiAgdmFyIEVYQ0VMX1RZUEUgPSB7DQogICAgeGxzOiAnRXhjZWwgOC4wJywNCiAgICB4bHN4OiAnRXhjZWwgMTIuMCBYbWwnLA0KICAgIHhsc2I6ICdFeGNlbCAxMi4wJywNCiAgICB4bHNtOiAnRXhjZWwgMTIuMCBNYWNybycNCiAgfTsNCg0KICB2YXIgRXhjZWxEQiA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEFkb2RiKSB7CiAgICBmdW5jdGlvbiBFeGNlbERCKHBhdGgsIGhhc0hlYWRlcikgew0KICAgICAgaWYgKCFpc0Fic29sdXRlKHBhdGgpKSB7DQogICAgICAgIHBhdGggPSBub3JtYWxpemUkMShwYXRoKTsNCiAgICAgIH0NCiAgICAgIHZhciBleHQgPSBleHRuYW1lKHBhdGgpLnRvTG93ZXJDYXNlKCk7DQogICAgICB2YXIgaGRyID0NCiAgICAgICAgaGFzSGVhZGVyID09IG51bGwgfHwgaGFzSGVhZGVyID09IHRydWUgfHwgaGFzSGVhZGVyID09ICdZRVMnDQogICAgICAgICAgPyAnWUVTJw0KICAgICAgICAgIDogJ05PJzsNCiAgICAgIGlmICghRVhDRUxfVFlQRVtleHRdKSB7IHRocm93IG5ldyBFcnJvcihleHQgKyAnIGZpbGUgaXMgbm90IHN1cHBvcnRlZCcpOyB9DQogICAgICBBZG9kYi5jYWxsKHRoaXMpOw0KICAgICAgdGhpcy5jb25uLkNvbm5lY3Rpb25TdHJpbmcgPSAiUHJvdmlkZXI9TWljcm9zb2Z0LkFjZS5PTEVEQi4xMi4wO0RhdGEgU291cmNlPSIgKyBwYXRoICsgIjtFeHRlbmRlZCBQcm9wZXJ0aWVzPVwiIiArIChFWENFTF9UWVBFW2V4dF0pICsgIjtIRFI9IiArIGhkciArICJcIiI7DQogICAgICB0aGlzLmNvbm4uT3BlbigpOw0KICAgIH0KCiAgICBpZiAoIEFkb2RiICkgRXhjZWxEQi5fX3Byb3RvX18gPSBBZG9kYjsKICAgIEV4Y2VsREIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQWRvZGIgJiYgQWRvZGIucHJvdG90eXBlICk7CiAgICBFeGNlbERCLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEV4Y2VsREI7CgogICAgcmV0dXJuIEV4Y2VsREI7CiAgfShBZG9kYikpOw0KDQogIGZ1bmN0aW9uIGV4Y2VsZGIocGF0aCwgaGFzSGVhZGVyKSB7DQogICAgcmV0dXJuIG5ldyBFeGNlbERCKHBhdGgsIGhhc0hlYWRlcik7DQogIH0KCiAgdmFyIGV4Y2VsZGIkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHsKICAgIEV4Y2VsREI6IEV4Y2VsREIsCiAgICAnZGVmYXVsdCc6IGV4Y2VsZGIKICB9KTsKCiAgdmFyIE9yYWNsZURCID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQWRvZGIpIHsKICAgIGZ1bmN0aW9uIE9yYWNsZURCKGRzLCB1c3IsIHBhc3MpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIEFkb2RiLmNhbGwodGhpcyk7DQogICAgICAgIHRoaXMuY29ubi5Db25uZWN0aW9uU3RyaW5nID0NCiAgICAgICAgICAvLyA9IGBQcm92aWRlcj1PcmFPTEVEQi5PcmFjbGU7RGF0YSBTb3VyY2U9JHtkc307VXNlciBJRD0ke3Vzcn07UGFzc3dvcmQ9JHtwYXNzfWA7DQogICAgICAgICAgIlByb3ZpZGVyPU1TREFPUkE7RGF0YSBTb3VyY2U9IiArIGRzICsgIjtVc2VyIElEPSIgKyB1c3IgKyAiO1Bhc3N3b3JkPSIgKyBwYXNzOw0KICAgICAgICB0aGlzLmNvbm4uT3BlbigpOw0KICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgY29ubmVjdCBmYWlsZWQuJyk7DQogICAgICAgIGNvbnNvbGUubG9nKA0KICAgICAgICAgICdkYXRhc291cmNlOiAlc1xuICAgIHVzZXJpZDogJXNcbiAgcGFzc3dvcmQ6ICVzJywNCiAgICAgICAgICBkcywNCiAgICAgICAgICB1c3IsDQogICAgICAgICAgcGFzcw0KICAgICAgICApOw0KICAgICAgICB0aHJvdyBlOw0KICAgICAgfQ0KICAgIH0KCiAgICBpZiAoIEFkb2RiICkgT3JhY2xlREIuX19wcm90b19fID0gQWRvZGI7CiAgICBPcmFjbGVEQi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBBZG9kYiAmJiBBZG9kYi5wcm90b3R5cGUgKTsKICAgIE9yYWNsZURCLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9yYWNsZURCOw0KDQogICAgT3JhY2xlREIucHJvdG90eXBlLmdldERhdGFUeXBlTWFwcGluZyA9IGZ1bmN0aW9uIGdldERhdGFUeXBlTWFwcGluZyAoKSB7DQogICAgICByZXR1cm4gew0KICAgICAgICBzdHJpbmc6IGFkVmFyaWFudCwNCiAgICAgICAgaW50OiBhZEludGVnZXIsDQogICAgICAgIGRlY2ltYWw6IGFkTnVtZXJpYywNCiAgICAgICAgYm9vbGVhbjogYWRCb29sZWFuLA0KICAgICAgICBkYXRlOiBhZERCVGltZVN0YW1wLA0KICAgICAgICBidWZmZXI6IGFkQmluYXJ5LA0KICAgICAgICBudWxsOiBhZFZhcmlhbnQsDQogICAgICAgIHVuZGVmaW5lZDogYWRWYXJpYW50DQogICAgICB9Ow0KICAgIH07DQoNCiAgICBPcmFjbGVEQi5wcm90b3R5cGUudGFibGVFeGlzdHMgPSBmdW5jdGlvbiB0YWJsZUV4aXN0cyAodGFibGVOYW1lKSB7DQogICAgICB2YXIgcm93ID0gdGhpcy5maXJzdFJvdygnc2VsZWN0IDEgZnJvbSB1c2VyX3RhYmxlcyB3aGVyZSB0YWJsZV9uYW1lID0gPycsIFsNCiAgICAgICAgdGFibGVOYW1lDQogICAgICBdKTsNCiAgICAgIHJldHVybiByb3cgIT0gbnVsbDsNCiAgICB9Ow0KDQogICAgT3JhY2xlREIucHJvdG90eXBlLmdldFRhYmxlcyA9IGZ1bmN0aW9uIGdldFRhYmxlcyAoKSB7DQogICAgICB2YXIgcm93cyA9IHRoaXMucm93cygnc2VsZWN0IHRhYmxlX25hbWUgZnJvbSB1c2VyX3RhYmxlcycpOw0KICAgICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gaXQuVEFCTEVfTkFNRTsgfSk7DQogICAgfTsKCiAgICByZXR1cm4gT3JhY2xlREI7CiAgfShBZG9kYikpOw0KDQogIGZ1bmN0aW9uIG9yYWNsZWRiKGRzLCB1c3IsIHBhc3MpIHsNCiAgICByZXR1cm4gbmV3IE9yYWNsZURCKGRzLCB1c3IsIHBhc3MpOw0KICB9DQoNCiAgLy8gT3JhT0xFREINCg0KICB2YXIgX3ZicyQxLCBfc2Vzc2lvbjsNCg0KICB2YXIgT280byA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEFkb2RiKSB7CiAgICBmdW5jdGlvbiBPbzRvKGRzLCB1c2VyLCBwYXNzKSB7DQogICAgICBBZG9kYi5jYWxsKHRoaXMpOw0KICAgICAgdGhpcy5kYXRhQmFzZSA9IHRoaXMuc2Vzc2lvbi5PcGVuRGF0YWJhc2UoZHMsIHVzZXIgKyAnLycgKyBwYXNzLCAwKTsNCiAgICB9CgogICAgaWYgKCBBZG9kYiApIE9vNG8uX19wcm90b19fID0gQWRvZGI7CiAgICBPbzRvLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEFkb2RiICYmIEFkb2RiLnByb3RvdHlwZSApOwogICAgT280by5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPbzRvOwoKICAgIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IHZiczogeyBjb25maWd1cmFibGU6IHRydWUgfSxzZXNzaW9uOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07DQoNCiAgICBwcm90b3R5cGVBY2Nlc3NvcnMudmJzLmdldCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIGlmICghX3ZicyQxKSB7DQogICAgICAgIF92YnMkMSA9IF9fVkJTOw0KICAgICAgICBfdmJzJDEuQWRkQ29kZSgiXG5GdW5jdGlvbiBSZWFkQmxvYihmaWVsZClcbiAgRGltIGJ1ZigpXG4gIGZpZWxkLkdldENodW5rQnl0ZUV4IGJ1ZiwgMCwgZmllbGQuRmllbGRTaXplKClcbiAgUmVhZEJsb2IgPSBidWZcbkVuZCBGdW5jdGlvblxuXG5GdW5jdGlvbiBSZWFkQ2xvYihmaWVsZClcbiAgRGltIGJ1ZlxuICBmaWVsZC5WYWx1ZS5SZWFkIGJ1ZlxuICBSZWFkQ2xvYiA9IGJ1ZlxuRW5kIEZ1bmN0aW9uXG4gICAgICAiKTsNCiAgICAgIH0NCiAgICAgIHJldHVybiBfdmJzJDEuQ29kZU9iamVjdDsNCiAgICB9Ow0KDQogICAgcHJvdG90eXBlQWNjZXNzb3JzLnNlc3Npb24uZ2V0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgaWYgKCFfc2Vzc2lvbikgew0KICAgICAgICBfc2Vzc2lvbiA9IG5ldyBBY3RpdmVYT2JqZWN0KCdPcmFjbGVJblByb2NTZXJ2ZXIuWE9yYVNlc3Npb24nKTsNCiAgICAgIH0NCiAgICAgIHJldHVybiBfc2Vzc2lvbjsNCiAgICB9OwoKICAgIE9vNG8ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UgKCkgew0KICAgICAgdGhpcy5kYXRhQmFzZS5DbG9zZSgpOw0KICAgICAgdGhpcy5kYXRhQmFzZSA9IG51bGw7DQogICAgICBfc2Vzc2lvbiA9IG51bGw7DQogICAgfTsNCg0KICAgIE9vNG8ucHJvdG90eXBlLmJlZ2luID0gZnVuY3Rpb24gYmVnaW4gKCkgew0KICAgICAgdGhpcy5zZXNzaW9uLkJlZ2luVHJhbnMoKTsNCiAgICB9Ow0KDQogICAgT280by5wcm90b3R5cGUuY29tbWl0ID0gZnVuY3Rpb24gY29tbWl0ICgpIHsNCiAgICAgIHRoaXMuc2Vzc2lvbi5Db21taXRUcmFucygpOw0KICAgIH07DQoNCiAgICBPbzRvLnByb3RvdHlwZS5yb2xsYmFjayA9IGZ1bmN0aW9uIHJvbGxiYWNrICgpIHsNCiAgICAgIHRoaXMuc2Vzc2lvbi5Sb2xsYmFjaygpOw0KICAgIH07DQoNCiAgICBPbzRvLnByb3RvdHlwZS5nZXREYXRhVHlwZU1hcHBpbmcgPSBmdW5jdGlvbiBnZXREYXRhVHlwZU1hcHBpbmcgKCkgew0KICAgICAgcmV0dXJuIHsNCiAgICAgICAgc3RyaW5nOiAxLA0KICAgICAgICBpbnQ6IDIsDQogICAgICAgIGRlY2ltYWw6IDIsDQogICAgICAgIG51bWJlcjogMiwNCiAgICAgICAgYm9vbGVhbjogMSwNCiAgICAgICAgZGF0ZTogMTIsDQogICAgICAgIGJ1ZmZlcjogMTEzLA0KICAgICAgICBudWxsOiAxLA0KICAgICAgICB1bmRlZmluZWQ6IDENCiAgICAgIH07DQogICAgfTsNCg0KICAgIE9vNG8ucHJvdG90eXBlLmNyZWF0ZVBhcmFtcyA9IGZ1bmN0aW9uIGNyZWF0ZVBhcmFtcyAob3B0cykgew0KICAgICAgdmFyIHBhcmFtcyA9IG9wdHMucGFyYW1zLA0KICAgICAgICBzZWxmID0gdGhpczsNCiAgICAgIGlmICghcGFyYW1zKSB7IHJldHVybjsgfQ0KICAgICAgdmFyIGR0bWFwID0gdGhpcy5nZXREYXRhVHlwZU1hcHBpbmcoKTsNCiAgICAgIGVhY2gocGFyYW1zLCBmdW5jdGlvbiAodiwgaykgew0KICAgICAgICB2YXIgdHlwZSA9IGR0bWFwW3R5cGVPZih2KV0gfHwgMTsNCiAgICAgICAgc2VsZi5kYXRhQmFzZS5QYXJhbWV0ZXJzLkFkZChTdHJpbmcoayksIHYsIDEsIHR5cGUpOw0KDQogICAgICAgIGlmIChpc0FycmF5KHBhcmFtcykgJiYgb3B0cy5zcWwuaW5jbHVkZXMoJz8nKSkgew0KICAgICAgICAgIHZhciBpbmRleCA9IDA7DQogICAgICAgICAgb3B0cy5zcWwgPSBvcHRzLnNxbC5yZXBsYWNlKC9cPy9nLCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICByZXR1cm4gJzonICsgaW5kZXgrKzsNCiAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfTsNCg0KICAgIE9vNG8ucHJvdG90eXBlLnJlbW92ZVBhcmFtcyA9IGZ1bmN0aW9uIHJlbW92ZVBhcmFtcyAob3B0cykgew0KICAgICAgdmFyIHBhcmFtcyA9IG9wdHMucGFyYW1zLA0KICAgICAgICBzZWxmID0gdGhpczsNCiAgICAgIGlmICghcGFyYW1zKSB7IHJldHVybjsgfQ0KICAgICAgZWFjaChwYXJhbXMsIGZ1bmN0aW9uICh2LCBrKSB7DQogICAgICAgIHNlbGYuZGF0YUJhc2UuUGFyYW1ldGVycy5SZW1vdmUoU3RyaW5nKGspKTsNCiAgICAgIH0pOw0KICAgIH07DQoNCiAgICBPbzRvLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZSAoKSB7CiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07Cg0KICAgICAgdmFyIG9wdHMgPSB0aGlzLmdldE9wdGlvbnMoYXJncyk7DQogICAgICB0cnkgew0KICAgICAgICB0aGlzLmNyZWF0ZVBhcmFtcyhvcHRzKTsNCiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUJhc2UuRXhlY3V0ZVNRTChvcHRzLnNxbCk7DQogICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgIGUuc3FsID0gb3B0cy5zcWw7DQogICAgICAgIHRocm93IGU7DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICB0aGlzLnJlbW92ZVBhcmFtcyhvcHRzKTsNCiAgICAgIH0NCiAgICB9Ow0KDQogICAgT280by5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gc2VsZWN0ICgpIHsKICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuJDEgPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICB3aGlsZSAoIGxlbiQxLS0gKSBhcmdzWyBsZW4kMSBdID0gYXJndW1lbnRzWyBsZW4kMSBdOwoNCiAgICAgIHZhciBycywNCiAgICAgICAgcm93LA0KICAgICAgICBpLA0KICAgICAgICBsZW4sDQogICAgICAgIG9wdHMgPSB0aGlzLmdldE9wdGlvbnMoYXJncyk7DQogICAgICB0cnkgew0KICAgICAgICB0aGlzLmNyZWF0ZVBhcmFtcyhvcHRzKTsNCiAgICAgICAgcnMgPSB0aGlzLmRhdGFCYXNlLkNyZWF0ZUR5bmFzZXQob3B0cy5zcWwsIDApOw0KICAgICAgICB3aGlsZSAoIXJzLkVPRikgew0KICAgICAgICAgIHJvdyA9IHt9Ow0KICAgICAgICAgIGlmIChsZW4gPT0gbnVsbCkgeyBsZW4gPSBycy5GaWVsZHMuQ291bnQ7IH0NCiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsNCiAgICAgICAgICAgIHJvd1tycy5GaWVsZHMoaSkuTmFtZV0gPSB0aGlzLmdldEZpZWxkVmFsdWUocnMuRmllbGRzKGkpKTsNCiAgICAgICAgICB9DQogICAgICAgICAgaWYgKG9wdHMuY2FsbGJhY2socm93KSA9PT0gZmFsc2UpIHsgYnJlYWs7IH0NCiAgICAgICAgICBycy5Nb3ZlTmV4dCgpOw0KICAgICAgICB9DQogICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgIGUuc3FsID0gb3B0cy5zcWw7DQogICAgICAgIHRocm93IGU7DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICB0aGlzLnJlbW92ZVBhcmFtcyhvcHRzKTsNCiAgICAgICAgcnMgJiYgcnMuQ2xvc2UoKTsNCiAgICAgIH0NCiAgICB9Ow0KDQogICAgT280by5wcm90b3R5cGUuZ2V0RmllbGRWYWx1ZSA9IGZ1bmN0aW9uIGdldEZpZWxkVmFsdWUgKGZpZWxkKSB7DQogICAgICBzd2l0Y2ggKGZpZWxkLk9yYUlEYXRhVHlwZSkgew0KICAgICAgICBjYXNlIDI6DQogICAgICAgIGNhc2UgODoNCiAgICAgICAgICByZXR1cm4gTnVtYmVyKGZpZWxkLnZhbHVlKTsNCiAgICAgICAgY2FzZSAxMTI6DQogICAgICAgICAgcmV0dXJuIHRoaXMudmJzLlJlYWRDbG9iKGZpZWxkKTsNCiAgICAgICAgY2FzZSAxMTM6DQogICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMudmJzLlJlYWRCbG9iKGZpZWxkKSk7DQogICAgICAgIGNhc2UgMTI6DQogICAgICAgIGNhc2UgMTg3Og0KICAgICAgICBjYXNlIDE4ODoNCiAgICAgICAgY2FzZSAyMzI6DQogICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGZpZWxkLnZhbHVlKTsNCiAgICAgICAgZGVmYXVsdDoNCiAgICAgICAgICByZXR1cm4gZmllbGQudmFsdWU7DQogICAgICB9DQogICAgfTsNCg0KICAgIE9vNG8ucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gYmF0Y2ggKCkge307DQoNCiAgICBPbzRvLnByb3RvdHlwZS5iYXRjaF9pbnNlcnQgPSBmdW5jdGlvbiBiYXRjaF9pbnNlcnQgKGNtZCwgcm93cykgew0KICAgICAgdmFyIHNlbGYgPSB0aGlzOw0KICAgICAgdmFyIHJzID0gdGhpcy5kYXRhQmFzZS5DcmVhdGVEeW5hc2V0KGNtZCwgMCk7DQogICAgICB0cnkgew0KICAgICAgICB0aGlzLmJlZ2luKCk7DQogICAgICAgIGVhY2gocm93cywgZnVuY3Rpb24gKHJvdykgew0KICAgICAgICAgIHJzLkFkZE5ldygpOw0KICAgICAgICAgIGVhY2gocm93LCBmdW5jdGlvbiAodiwgaykgew0KICAgICAgICAgICAgc2VsZi5zZXRGaWVsZFZhbHVlKHJzLkZpZWxkcyhrKSwgdik7DQogICAgICAgICAgfSk7DQogICAgICAgICAgcnMuVXBkYXRlKCk7DQogICAgICAgIH0pOw0KICAgICAgICB0aGlzLmNvbW1pdCgpOw0KICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICB0aGlzLnJvbGxiYWNrKCk7DQogICAgICAgIHRocm93IGU7DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICBycyAmJiBycy5DbG9zZSgpOw0KICAgICAgfQ0KICAgIH07CgogICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE9vNG8ucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTsKCiAgICByZXR1cm4gT280bzsKICB9KEFkb2RiKSk7DQoNCiAgZnVuY3Rpb24gb280byhkcywgdXNlciwgcGFzcykgew0KICAgIHJldHVybiBuZXcgT280byhkcywgdXNlciwgcGFzcyk7DQogIH0KCiAgdmFyIG9yYWNsZWRiJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICBPcmFjbGVEQjogT3JhY2xlREIsCiAgICAnZGVmYXVsdCc6IG9yYWNsZWRiLAogICAgT280bzogT280bywKICAgIG9vNG86IG9vNG8KICB9KTsKCiAgdmFyIF9zZXJ2aWNlOw0KDQogIGZ1bmN0aW9uIGdldFNlcnZpY2UoKSB7DQogICAgaWYgKCFfc2VydmljZSkgew0KICAgICAgdmFyIGxvY2F0b3IgPSBuZXcgQWN0aXZlWE9iamVjdCgnV2JlbVNjcmlwdGluZy5TV2JlbUxvY2F0b3InKTsNCiAgICAgIF9zZXJ2aWNlID0gbG9jYXRvci5Db25uZWN0U2VydmVyKCcuJywgJ3Jvb3RcXENJTVYyJyk7DQogICAgfQ0KICAgIHJldHVybiBfc2VydmljZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldCQzKGNtZCkgew0KICAgIHJldHVybiBnZXRTZXJ2aWNlKCkuR2V0KGNtZCk7DQogIH0NCg0KICBmdW5jdGlvbiBleGVjJDEod3FsKSB7DQogICAgcmV0dXJuIGdldFNlcnZpY2UoKS5FeGVjUXVlcnkod3FsKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHF1ZXJ5KHdxbCkgew0KICAgIHZhciBycyA9IGV4ZWMkMSh3cWwpOw0KICAgIHZhciByb3dzID0gbWFwKG5ldyBFbnVtZXJhdG9yKHJzKSwgZnVuY3Rpb24gKHJlY29yZCkgew0KICAgICAgcmV0dXJuIHJlZHVjZSgNCiAgICAgICAgbmV3IEVudW1lcmF0b3IocmVjb3JkLlByb3BlcnRpZXNfKSwNCiAgICAgICAgZnVuY3Rpb24gKHJvd0RhdGEsIHByb3ApIHsNCiAgICAgICAgICBpZiAocHJvcC5WYWx1ZSAhPSBudWxsKSB7DQogICAgICAgICAgICByb3dEYXRhW3Byb3AubmFtZV0gPSBwcm9wLklzQXJyYXkNCiAgICAgICAgICAgICAgPyBuZXcgVkJBcnJheShwcm9wLlZhbHVlKS50b0FycmF5KCkNCiAgICAgICAgICAgICAgOiBwcm9wLlZhbHVlOw0KICAgICAgICAgIH0NCiAgICAgICAgICByZXR1cm4gcm93RGF0YTsNCiAgICAgICAgfSwNCiAgICAgICAge30NCiAgICAgICk7DQogICAgfSk7DQogICAgcnMgPSBudWxsOw0KICAgIHJldHVybiByb3dzOw0KICB9DQoNCiAgZnVuY3Rpb24gZWFjaFJvdyh3cWwsIGNiKSB7DQogICAgdmFyIHJzID0gZXhlYyQxKHdxbCk7DQogICAgZWFjaChuZXcgRW51bWVyYXRvcihycyksIGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gY2IoaXQpOyB9KTsNCiAgICBycyA9IG51bGw7DQogIH0NCg0KICBmdW5jdGlvbiBmaXJzdFJvdyh3cWwpIHsNCiAgICB2YXIgb2JqOw0KICAgIHZhciBycyA9IGV4ZWMkMSh3cWwpOw0KICAgIGVhY2gobmV3IEVudW1lcmF0b3IocnMpLCBmdW5jdGlvbiAoaXQpIHsNCiAgICAgIG9iaiA9IGl0Ow0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0pOw0KICAgIHJzID0gbnVsbDsNCiAgICByZXR1cm4gb2JqOw0KICB9DQoNCiAgZnVuY3Rpb24gY3B1KCkgew0KICAgIHJldHVybiBxdWVyeSgnc2VsZWN0ICogZnJvbSBXaW4zMl9Qcm9jZXNzb3InKVswXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHN5cygpIHsNCiAgICByZXR1cm4gcXVlcnkoJ3NlbGVjdCAqIGZyb20gV2luMzJfQ29tcHV0ZXJTeXN0ZW0nKVswXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG9zKCkgew0KICAgIHJldHVybiBxdWVyeSgnc2VsZWN0ICogZnJvbSBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0nKVswXTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHNodXRkb3duKGZvcmNlZCkgew0KICAgIHJldHVybiBmaXJzdFJvdygnc2VsZWN0ICogZnJvbSBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0nKS5XaW4zMlNodXRkb3duKA0KICAgICAgMSArIChmb3JjZWQgPyA0IDogMCkNCiAgICApOw0KICB9DQoNCiAgZnVuY3Rpb24gbG9nb2ZmKGZvcmNlZCkgew0KICAgIHJldHVybiBmaXJzdFJvdygnc2VsZWN0ICogZnJvbSBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0nKS5XaW4zMlNodXRkb3duKA0KICAgICAgMCArIChmb3JjZWQgPyA0IDogMCkNCiAgICApOw0KICB9DQoNCiAgZnVuY3Rpb24gcmVzdGFydChmb3JjZWQpIHsNCiAgICByZXR1cm4gZmlyc3RSb3coJ3NlbGVjdCAqIGZyb20gV2luMzJfT3BlcmF0aW5nU3lzdGVtJykuV2luMzJTaHV0ZG93bigNCiAgICAgIDIgKyAoZm9yY2VkID8gNCA6IDApDQogICAgKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHBvd2Vyb2ZmKGZvcmNlZCkgew0KICAgIHJldHVybiBmaXJzdFJvdygnc2VsZWN0ICogZnJvbSBXaW4zMl9PcGVyYXRpbmdTeXN0ZW0nKS5XaW4zMlNodXRkb3duKA0KICAgICAgOCArIChmb3JjZWQgPyA0IDogMCkNCiAgICApOw0KICB9DQoNCiAgZnVuY3Rpb24gcHMobCkgew0KICAgIHZhciBwcm9wcyA9IFsnUHJvY2Vzc0lkJywgJ0NhcHRpb24nXTsNCiAgICBpZiAobCkgeyBwcm9wcy5wdXNoKCdQYXJlbnRQcm9jZXNzSWQnLCAnQ3JlYXRpb25EYXRlJywgJ0NvbW1hbmRMaW5lJyk7IH0NCiAgICB2YXIgcnMgPSBleGVjJDEoJ3NlbGVjdCAqIGZyb20gV2luMzJfUHJvY2VzcycpOw0KICAgIHJldHVybiBtYXAobmV3IEVudW1lcmF0b3IocnMpLCBmdW5jdGlvbiAoaXQpIHsNCiAgICAgIHJldHVybiByZWR1Y2UocHJvcHMsIGZ1bmN0aW9uIChyb3csIG5hbWUpIHsgcmV0dXJuICgocm93W25hbWVdID0gaXRbbmFtZV0pLCByb3cpOyB9LCB7fSk7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBraWxsKGFyZykgew0KICAgIHZhciB3cWwgPSAnc2VsZWN0ICogZnJvbSBXaW4zMl9Qcm9jZXNzJzsNCiAgICBpZiAoaXNTdHJpbmcoYXJnKSkgeyB3cWwgKz0gIiB3aGVyZSBDYXB0aW9uPSciICsgYXJnICsgIiciOyB9DQogICAgZWxzZSBpZiAoaXNOdW1iZXIoYXJnKSkgeyB3cWwgKz0gIiB3aGVyZSBQcm9jZXNzSWQ9IiArIGFyZzsgfQ0KICAgIGVsc2UgeyByZXR1cm4gLTE7IH0NCiAgICByZXR1cm4gZmlyc3RSb3cod3FsKS5UZXJtaW5hdGUoKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGVudigpIHsNCiAgICB2YXIgcnMgPSBleGVjJDEoJ3NlbGVjdCAqIGZyb20gV2luMzJfRW52aXJvbm1lbnQnKTsNCiAgICByZXR1cm4gcmVkdWNlKA0KICAgICAgbmV3IEVudW1lcmF0b3IocnMpLA0KICAgICAgZnVuY3Rpb24gKHJlc3VsdCwgaXQpIHsgcmV0dXJuICgocmVzdWx0W2l0Lk5hbWVdID0gaXQuVmFyaWFibGVWYWx1ZSksIHJlc3VsdCk7IH0sDQogICAgICB7fQ0KICAgICk7DQogIH0KCiAgdmFyIHdtaSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHsKICAgIGdldDogZ2V0JDMsCiAgICBleGVjOiBleGVjJDEsCiAgICBxdWVyeTogcXVlcnksCiAgICBlYWNoUm93OiBlYWNoUm93LAogICAgZmlyc3RSb3c6IGZpcnN0Um93LAogICAgY3B1OiBjcHUsCiAgICBzeXM6IHN5cywKICAgIG9zOiBvcywKICAgIHNodXRkb3duOiBzaHV0ZG93biwKICAgIGxvZ29mZjogbG9nb2ZmLAogICAgcmVzdGFydDogcmVzdGFydCwKICAgIHBvd2Vyb2ZmOiBwb3dlcm9mZiwKICAgIHBzOiBwcywKICAgIGtpbGw6IGtpbGwsCiAgICBlbnY6IGVudgogIH0pOwoKICB2YXIgZGF5anNfbWluID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykgewogICFmdW5jdGlvbih0LG4pe21vZHVsZS5leHBvcnRzPW4oKTt9KGNvbW1vbmpzR2xvYmFsLGZ1bmN0aW9uKCl7dmFyIHQ9Im1pbGxpc2Vjb25kIixuPSJzZWNvbmQiLGU9Im1pbnV0ZSIscj0iaG91ciIsaT0iZGF5IixzPSJ3ZWVrIix1PSJtb250aCIsbz0icXVhcnRlciIsYT0ieWVhciIsaD0vXihcZHs0fSktPyhcZHsxLDJ9KS0/KFxkezAsMn0pW14wLTldKihcZHsxLDJ9KT86PyhcZHsxLDJ9KT86PyhcZHsxLDJ9KT8uPyhcZHsxLDN9KT8kLyxmPS9cWyhbXlxdXSspXXxZezIsNH18TXsxLDR9fER7MSwyfXxkezEsNH18SHsxLDJ9fGh7MSwyfXxhfEF8bXsxLDJ9fHN7MSwyfXxaezEsMn18U1NTL2csYz1mdW5jdGlvbih0LG4sZSl7dmFyIHI9U3RyaW5nKHQpO3JldHVybiAhcnx8ci5sZW5ndGg+PW4/dDoiIitBcnJheShuKzEtci5sZW5ndGgpLmpvaW4oZSkrdH0sZD17czpjLHo6ZnVuY3Rpb24odCl7dmFyIG49LXQudXRjT2Zmc2V0KCksZT1NYXRoLmFicyhuKSxyPU1hdGguZmxvb3IoZS82MCksaT1lJTYwO3JldHVybiAobjw9MD8iKyI6Ii0iKStjKHIsMiwiMCIpKyI6IitjKGksMiwiMCIpfSxtOmZ1bmN0aW9uKHQsbil7dmFyIGU9MTIqKG4ueWVhcigpLXQueWVhcigpKSsobi5tb250aCgpLXQubW9udGgoKSkscj10LmNsb25lKCkuYWRkKGUsdSksaT1uLXI8MCxzPXQuY2xvbmUoKS5hZGQoZSsoaT8tMToxKSx1KTtyZXR1cm4gTnVtYmVyKC0oZSsobi1yKS8oaT9yLXM6cy1yKSl8fDApfSxhOmZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpfHwwOk1hdGguZmxvb3IodCl9LHA6ZnVuY3Rpb24oaCl7cmV0dXJuIHtNOnUseTphLHc6cyxkOmksaDpyLG06ZSxzOm4sbXM6dCxROm99W2hdfHxTdHJpbmcoaHx8IiIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvcyQvLCIiKX0sdTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dH19LCQ9e25hbWU6ImVuIix3ZWVrZGF5czoiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXkiLnNwbGl0KCJfIiksbW9udGhzOiJKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyIi5zcGxpdCgiXyIpfSxsPSJlbiIsbT17fTttW2xdPSQ7dmFyIHk9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiB2fSxNPWZ1bmN0aW9uKHQsbixlKXt2YXIgcjtpZighdClyZXR1cm4gbDtpZigic3RyaW5nIj09dHlwZW9mIHQpbVt0XSYmKHI9dCksbiYmKG1bdF09bixyPXQpO2Vsc2V7dmFyIGk9dC5uYW1lO21baV09dCxyPWk7fXJldHVybiBlfHwobD1yKSxyfSxnPWZ1bmN0aW9uKHQsbixlKXtpZih5KHQpKXJldHVybiB0LmNsb25lKCk7dmFyIHI9bj8ic3RyaW5nIj09dHlwZW9mIG4/e2Zvcm1hdDpuLHBsOmV9Om46e307cmV0dXJuIHIuZGF0ZT10LG5ldyB2KHIpfSxEPWQ7RC5sPU0sRC5pPXksRC53PWZ1bmN0aW9uKHQsbil7cmV0dXJuIGcodCx7bG9jYWxlOm4uJEwsdXRjOm4uJHV9KX07dmFyIHY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBjKHQpe3RoaXMuJEw9dGhpcy4kTHx8TSh0LmxvY2FsZSxudWxsLCEwKSx0aGlzLnBhcnNlKHQpO312YXIgZD1jLnByb3RvdHlwZTtyZXR1cm4gZC5wYXJzZT1mdW5jdGlvbih0KXt0aGlzLiRkPWZ1bmN0aW9uKHQpe3ZhciBuPXQuZGF0ZSxlPXQudXRjO2lmKG51bGw9PT1uKXJldHVybiBuZXcgRGF0ZShOYU4pO2lmKEQudShuKSlyZXR1cm4gbmV3IERhdGU7aWYobiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKG4pO2lmKCJzdHJpbmciPT10eXBlb2YgbiYmIS9aJC9pLnRlc3Qobikpe3ZhciByPW4ubWF0Y2goaCk7aWYocilyZXR1cm4gZT9uZXcgRGF0ZShEYXRlLlVUQyhyWzFdLHJbMl0tMSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHJbN118fDApKTpuZXcgRGF0ZShyWzFdLHJbMl0tMSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHJbN118fDApfXJldHVybiBuZXcgRGF0ZShuKX0odCksdGhpcy5pbml0KCk7fSxkLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpO30sZC4kdXRpbHM9ZnVuY3Rpb24oKXtyZXR1cm4gRH0sZC5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuICEoIkludmFsaWQgRGF0ZSI9PT10aGlzLiRkLnRvU3RyaW5nKCkpfSxkLmlzU2FtZT1mdW5jdGlvbih0LG4pe3ZhciBlPWcodCk7cmV0dXJuIHRoaXMuc3RhcnRPZihuKTw9ZSYmZTw9dGhpcy5lbmRPZihuKX0sZC5pc0FmdGVyPWZ1bmN0aW9uKHQsbil7cmV0dXJuIGcodCk8dGhpcy5zdGFydE9mKG4pfSxkLmlzQmVmb3JlPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHRoaXMuZW5kT2Yobik8Zyh0KX0sZC4kZz1mdW5jdGlvbih0LG4sZSl7cmV0dXJuIEQudSh0KT90aGlzW25dOnRoaXMuc2V0KGUsdCl9LGQueWVhcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy4kZyh0LCIkeSIsYSl9LGQubW9udGg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuJGcodCwiJE0iLHUpfSxkLmRheT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy4kZyh0LCIkVyIsaSl9LGQuZGF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy4kZyh0LCIkRCIsImRhdGUiKX0sZC5ob3VyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLiRnKHQsIiRIIixyKX0sZC5taW51dGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuJGcodCwiJG0iLGUpfSxkLnNlY29uZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy4kZyh0LCIkcyIsbil9LGQubWlsbGlzZWNvbmQ9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuJGcobiwiJG1zIix0KX0sZC51bml4PWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkvMWUzKX0sZC52YWx1ZU9mPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQuZ2V0VGltZSgpfSxkLnN0YXJ0T2Y9ZnVuY3Rpb24odCxvKXt2YXIgaD10aGlzLGY9ISFELnUobyl8fG8sYz1ELnAodCksZD1mdW5jdGlvbih0LG4pe3ZhciBlPUQudyhoLiR1P0RhdGUuVVRDKGguJHksbix0KTpuZXcgRGF0ZShoLiR5LG4sdCksaCk7cmV0dXJuIGY/ZTplLmVuZE9mKGkpfSwkPWZ1bmN0aW9uKHQsbil7cmV0dXJuIEQudyhoLnRvRGF0ZSgpW3RdLmFwcGx5KGgudG9EYXRlKCksKGY/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShuKSksaCl9LGw9dGhpcy4kVyxtPXRoaXMuJE0seT10aGlzLiRELE09InNldCIrKHRoaXMuJHU/IlVUQyI6IiIpO3N3aXRjaChjKXtjYXNlIGE6cmV0dXJuIGY/ZCgxLDApOmQoMzEsMTEpO2Nhc2UgdTpyZXR1cm4gZj9kKDEsbSk6ZCgwLG0rMSk7Y2FzZSBzOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCx2PShsPGc/bCs3OmwpLWc7cmV0dXJuIGQoZj95LXY6eSsoNi12KSxtKTtjYXNlIGk6Y2FzZSJkYXRlIjpyZXR1cm4gJChNKyJIb3VycyIsMCk7Y2FzZSByOnJldHVybiAkKE0rIk1pbnV0ZXMiLDEpO2Nhc2UgZTpyZXR1cm4gJChNKyJTZWNvbmRzIiwyKTtjYXNlIG46cmV0dXJuICQoTSsiTWlsbGlzZWNvbmRzIiwzKTtkZWZhdWx0OnJldHVybiB0aGlzLmNsb25lKCl9fSxkLmVuZE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXJ0T2YodCwhMSl9LGQuJHNldD1mdW5jdGlvbihzLG8pe3ZhciBoLGY9RC5wKHMpLGM9InNldCIrKHRoaXMuJHU/IlVUQyI6IiIpLGQ9KGg9e30saFtpXT1jKyJEYXRlIixoLmRhdGU9YysiRGF0ZSIsaFt1XT1jKyJNb250aCIsaFthXT1jKyJGdWxsWWVhciIsaFtyXT1jKyJIb3VycyIsaFtlXT1jKyJNaW51dGVzIixoW25dPWMrIlNlY29uZHMiLGhbdF09YysiTWlsbGlzZWNvbmRzIixoKVtmXSwkPWY9PT1pP3RoaXMuJEQrKG8tdGhpcy4kVyk6bztpZihmPT09dXx8Zj09PWEpe3ZhciBsPXRoaXMuY2xvbmUoKS5zZXQoImRhdGUiLDEpO2wuJGRbZF0oJCksbC5pbml0KCksdGhpcy4kZD1sLnNldCgiZGF0ZSIsTWF0aC5taW4odGhpcy4kRCxsLmRheXNJbk1vbnRoKCkpKS50b0RhdGUoKTt9ZWxzZSBkJiZ0aGlzLiRkW2RdKCQpO3JldHVybiB0aGlzLmluaXQoKSx0aGlzfSxkLnNldD1mdW5jdGlvbih0LG4pe3JldHVybiB0aGlzLmNsb25lKCkuJHNldCh0LG4pfSxkLmdldD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpc1tELnAodCldKCl9LGQuYWRkPWZ1bmN0aW9uKHQsbyl7dmFyIGgsZj10aGlzO3Q9TnVtYmVyKHQpO3ZhciBjPUQucChvKSxkPWZ1bmN0aW9uKG4pe3ZhciBlPWcoZik7cmV0dXJuIEQudyhlLmRhdGUoZS5kYXRlKCkrTWF0aC5yb3VuZChuKnQpKSxmKX07aWYoYz09PXUpcmV0dXJuIHRoaXMuc2V0KHUsdGhpcy4kTSt0KTtpZihjPT09YSlyZXR1cm4gdGhpcy5zZXQoYSx0aGlzLiR5K3QpO2lmKGM9PT1pKXJldHVybiBkKDEpO2lmKGM9PT1zKXJldHVybiBkKDcpO3ZhciAkPShoPXt9LGhbZV09NmU0LGhbcl09MzZlNSxoW25dPTFlMyxoKVtjXXx8MSxsPXRoaXMudmFsdWVPZigpK3QqJDtyZXR1cm4gRC53KGwsdGhpcyl9LGQuc3VidHJhY3Q9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxuKX0sZC5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpcztpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuICJJbnZhbGlkIERhdGUiO3ZhciBlPXR8fCJZWVlZLU1NLUREVEhIOm1tOnNzWiIscj1ELnoodGhpcyksaT10aGlzLiRsb2NhbGUoKSxzPXRoaXMuJEgsdT10aGlzLiRtLG89dGhpcy4kTSxhPWkud2Vla2RheXMsaD1pLm1vbnRocyxjPWZ1bmN0aW9uKHQscixpLHMpe3JldHVybiB0JiYodFtyXXx8dChuLGUpKXx8aVtyXS5zdWJzdHIoMCxzKX0sZD1mdW5jdGlvbih0KXtyZXR1cm4gRC5zKHMlMTJ8fDEyLHQsIjAiKX0sJD1pLm1lcmlkaWVtfHxmdW5jdGlvbih0LG4sZSl7dmFyIHI9dDwxMj8iQU0iOiJQTSI7cmV0dXJuIGU/ci50b0xvd2VyQ2FzZSgpOnJ9LGw9e1lZOlN0cmluZyh0aGlzLiR5KS5zbGljZSgtMiksWVlZWTp0aGlzLiR5LE06bysxLE1NOkQucyhvKzEsMiwiMCIpLE1NTTpjKGkubW9udGhzU2hvcnQsbyxoLDMpLE1NTU06aFtvXXx8aCh0aGlzLGUpLEQ6dGhpcy4kRCxERDpELnModGhpcy4kRCwyLCIwIiksZDpTdHJpbmcodGhpcy4kVyksZGQ6YyhpLndlZWtkYXlzTWluLHRoaXMuJFcsYSwyKSxkZGQ6YyhpLndlZWtkYXlzU2hvcnQsdGhpcy4kVyxhLDMpLGRkZGQ6YVt0aGlzLiRXXSxIOlN0cmluZyhzKSxISDpELnMocywyLCIwIiksaDpkKDEpLGhoOmQoMiksYTokKHMsdSwhMCksQTokKHMsdSwhMSksbTpTdHJpbmcodSksbW06RC5zKHUsMiwiMCIpLHM6U3RyaW5nKHRoaXMuJHMpLHNzOkQucyh0aGlzLiRzLDIsIjAiKSxTU1M6RC5zKHRoaXMuJG1zLDMsIjAiKSxaOnJ9O3JldHVybiBlLnJlcGxhY2UoZixmdW5jdGlvbih0LG4pe3JldHVybiBufHxsW3RdfHxyLnJlcGxhY2UoIjoiLCIiKX0pfSxkLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSxkLmRpZmY9ZnVuY3Rpb24odCxoLGYpe3ZhciBjLGQ9RC5wKGgpLCQ9Zyh0KSxsPTZlNCooJC51dGNPZmZzZXQoKS10aGlzLnV0Y09mZnNldCgpKSxtPXRoaXMtJCx5PUQubSh0aGlzLCQpO3JldHVybiB5PShjPXt9LGNbYV09eS8xMixjW3VdPXksY1tvXT15LzMsY1tzXT0obS1sKS82MDQ4ZTUsY1tpXT0obS1sKS84NjRlNSxjW3JdPW0vMzZlNSxjW2VdPW0vNmU0LGNbbl09bS8xZTMsYylbZF18fG0sZj95OkQuYSh5KX0sZC5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKHUpLiREfSxkLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gbVt0aGlzLiRMXX0sZC5sb2NhbGU9ZnVuY3Rpb24odCxuKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgZT10aGlzLmNsb25lKCk7cmV0dXJuIGUuJEw9TSh0LG4sITApLGV9LGQuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gRC53KHRoaXMudG9EYXRlKCksdGhpcyl9LGQudG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMuJGQpfSxkLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRvSVNPU3RyaW5nKCl9LGQudG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSxkLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sY30oKTtyZXR1cm4gZy5wcm90b3R5cGU9di5wcm90b3R5cGUsZy5leHRlbmQ9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdChuLHYsZyksZ30sZy5sb2NhbGU9TSxnLmlzRGF5anM9eSxnLnVuaXg9ZnVuY3Rpb24odCl7cmV0dXJuIGcoMWUzKnQpfSxnLmVuPW1bbF0sZy5Mcz1tLGd9KTsKICB9KTsKCiAgdmFyIFBMQUNFX0hPTERFUiA9IHt9Ow0KDQogIGZ1bmN0aW9uIHBpcGUoKSB7CiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTsKDQogICAgYXJncyA9IGFyZ3MNCiAgICAgIC5tYXAoZnVuY3Rpb24gKGl0KSB7IHJldHVybiAoaXNGdW5jdGlvbihpdCkgPyBbaXQsIFBMQUNFX0hPTERFUl0gOiBpdCk7IH0pDQogICAgICAuZmlsdGVyKGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gaXNBcnJheShpdCkgJiYgaXQubGVuZ3RoID4gMCAmJiBpc0Z1bmN0aW9uKGl0WzBdKTsgfSkNCiAgICAgIC5tYXAoZnVuY3Rpb24gKGl0KSB7IHJldHVybiAoaXQubGVuZ3RoID09PSAxID8gW2l0WzBdLCBQTEFDRV9IT0xERVJdIDogaXQpOyB9KTsNCiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGlkZW50aXR5OyB9DQogICAgcmV0dXJuIGZ1bmN0aW9uKGluaXQpIHsNCiAgICAgIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIGZuX2FyZ3MpIHsNCiAgICAgICAgdmFyIGZuID0gZm5fYXJnc1swXTsNCiAgICAgICAgdmFyIF9hcmdzID0gdGFpbChmbl9hcmdzKS5tYXAoZnVuY3Rpb24gKF9hcmcpIHsgcmV0dXJuIF9hcmcgPT09IFBMQUNFX0hPTERFUiA/IHJlc3VsdCA6IF9hcmc7IH0NCiAgICAgICAgKTsNCiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHZvaWQgMCwgX2FyZ3MpOw0KICAgICAgfSwgaW5pdCk7DQogICAgfTsNCiAgfQ0KDQogIHBpcGUuX18gPSBQTEFDRV9IT0xERVI7CgogIHZhciBwaXBlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7CiAgICAnZGVmYXVsdCc6IHBpcGUKICB9KTsKCiAgdmFyIEludGVybmFsTW9kdWxlcyA9IHsNCiAgICBhY2NkYjogYWNjZGIkMSwNCiAgICBhZG9kYjogYWRvZGIsDQogICAgY2hpbGRfcHJvY2VzczogY2hpbGRfcHJvY2VzcywNCiAgICBjcnlwdG86IGNyeXB0byQxLA0KICAgIGNzdjogY3N2LA0KICAgIGNzdmRiOiBjc3ZkYiQxLA0KICAgIGRheWpzOiB7IGRlZmF1bHQ6IGRheWpzX21pbiB9LA0KICAgIGV4Y2VsOiBleGNlbCwNCiAgICBleGNlbGRiOiBleGNlbGRiJDEsDQogICAgZnM6IGZzLA0KICAgIGh0dHA6IGh0dHAkMSwNCiAgICBpZTogaWUsDQogICAgb3JhY2xlZGI6IG9yYWNsZWRiJDEsDQogICAgb3V0bG9vazogb3V0bG9vaywNCiAgICBwYXRoOiBQYXRoLA0KICAgIHFzOiB7IGRlZmF1bHQ6IGxpYiB9LA0KICAgIHRvb2w6IHRvb2wsDQogICAgdXRpbDogdXRpbCwNCiAgICB3bWk6IHdtaSwNCiAgICBwaXBlOiBwaXBlJDENCiAgfTsNCg0KICB3aW5kb3cucmVxdWlyZSA9IGZ1bmN0aW9uKG5hbWUpIHsNCiAgICByZXR1cm4gSW50ZXJuYWxNb2R1bGVzW25hbWVdOw0KICB9Ow0KDQogIGlmIChwcm9jZXNzLmFyZ3YubGVuZ3RoID09PSAzKSB7DQogICAgdmFyIHB0aCA9IHByb2Nlc3MuYXJndlsyXTsNCiAgICBpZiAoIWlzQWJzb2x1dGUocHRoKSkgew0KICAgICAgcHRoID0gcmVzb2x2ZShwdGgpOw0KICAgIH0NCiAgICBpZiAoIWV4dG5hbWUocHRoKSkgew0KICAgICAgcHRoICs9ICcuanMnOw0KICAgIH0NCiAgICBpZiAoIWlzZmlsZShwdGgpKSB7DQogICAgICB0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCBsb2FkIGZpbGUgJyIgKyBwdGggKyAiJyIpOw0KICAgIH0NCiAgICB2YXIgc3JjID0gcmVhZEZpbGVTeW5jKHB0aCwgJ1VURi04Jyk7DQoNCiAgICBPYmplY3QuYXNzaWduKHdpbmRvdywgew0KICAgICAgX19maWxlbmFtZTogcHRoLA0KICAgICAgX19kaXJuYW1lOiBkaXJuYW1lKHB0aCksDQogICAgICBwcm9jZXNzOiBwcm9jZXNzLA0KICAgICAgQnVmZmVyOiBCdWZmZXIsDQogICAgICBjb25zb2xlOiBjb25zb2xlDQogICAgfSk7DQoNCiAgICBzcmMgPSB0cmFuc3BpbGUoc3JjKTsNCiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7DQogICAgc2NyaXB0LnRleHQgPSBzcmM7DQogICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICB9Cgp9KCkpOwo=';
src = window.decodeURIComponent(window.escape(window.atob(src)));

var script = document.createElement('script');
script.text = src;
window.addEventListener('error', function(e) {
  if (e.error) {
    WScript.Echo(e.error.stack);
  } else {
    if (e.message) WScript.Echo(' Error:' + e.message);
    WScript.Echo('  line:', e.lineno);
    WScript.Echo('column:', e.colno);
  }
});
document.head.appendChild(script);
/*
:LBL_END
pause
exit
::*/
